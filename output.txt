

=== Folder: . ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\firebase_options.dart ---
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCphP5d8nMkrtR7w3wzKnrU90Ovn6i-RrU',
    appId: '1:866444566884:web:763a3afe141c4498dd5a71',
    messagingSenderId: '866444566884',
    projectId: 'pcmc-app-2024-ravirajmane',
    authDomain: 'pcmc-app-2024-ravirajmane.firebaseapp.com',
    storageBucket: 'pcmc-app-2024-ravirajmane.firebasestorage.app',
    measurementId: 'G-JNP45L8GE3',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyC3a0oLxhS5hpRpmPbUTTqbGpPYGUOolqA',
    appId: '1:866444566884:android:905c838409cbe3c8dd5a71',
    messagingSenderId: '866444566884',
    projectId: 'pcmc-app-2024-ravirajmane',
    storageBucket: 'pcmc-app-2024-ravirajmane.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCiPV9uSpSDSndTNyMl44DdsnmCo9upY7s',
    appId: '1:866444566884:ios:6caa7e60c3eb4e53dd5a71',
    messagingSenderId: '866444566884',
    projectId: 'pcmc-app-2024-ravirajmane',
    storageBucket: 'pcmc-app-2024-ravirajmane.firebasestorage.app',
    iosBundleId: 'com.example.mainUi',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCiPV9uSpSDSndTNyMl44DdsnmCo9upY7s',
    appId: '1:866444566884:ios:6caa7e60c3eb4e53dd5a71',
    messagingSenderId: '866444566884',
    projectId: 'pcmc-app-2024-ravirajmane',
    storageBucket: 'pcmc-app-2024-ravirajmane.firebasestorage.app',
    iosBundleId: 'com.example.mainUi',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyCphP5d8nMkrtR7w3wzKnrU90Ovn6i-RrU',
    appId: '1:866444566884:web:088a63504e25493fdd5a71',
    messagingSenderId: '866444566884',
    projectId: 'pcmc-app-2024-ravirajmane',
    authDomain: 'pcmc-app-2024-ravirajmane.firebaseapp.com',
    storageBucket: 'pcmc-app-2024-ravirajmane.firebasestorage.app',
    measurementId: 'G-1SM00DMF4Q',
  );

}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\main.dart ---
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'l10n/app_localizations.dart';
import 'package:flutter_web_plugins/url_strategy.dart';
import 'routes.dart';
import 'utils/theme.dart';
import 'screens/auth/login_callback.dart';
import 'screens/auth/splash_screen.dart';
import 'providers/locale_provider.dart';
import 'package:main_ui/services/auth_service.dart';
import 'package:main_ui/services/api_service.dart';  
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await AuthService.initialize();
  await ApiService.init();
  usePathUrlStrategy();
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final locale = ref.watch(localeNotifierProvider);

    return MaterialApp(
      title: 'Grievance System',
      theme: lightTheme,
      darkTheme: darkTheme,
      themeMode: ThemeMode.system,
      locale: locale,
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('en'),
        Locale('mr'),
        Locale('hi'),
      ],
      home: const SplashScreen(),
      routes: appRoutes,
      onGenerateRoute: (settings) {
        if (settings.name?.startsWith('/login/callback') ?? false) {
          return MaterialPageRoute(
            builder: (context) => LoginCallbackScreen(),
            settings: settings,
          );
        }
        return null;
      },
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\routes.dart ---
import 'package:flutter/material.dart';
import 'screens/auth/login_screen.dart';
import 'screens/auth/login_callback.dart';
import 'screens/citizen/submit_grievance.dart';
import 'screens/citizen/track_grievance.dart';
import 'screens/citizen/grievance_detail.dart';
import 'screens/member_head/view_grievances.dart';
import 'screens/member_head/assign_grievance.dart';
import 'screens/member_head/reject_grievance.dart';
import 'screens/field_staff/assigned_list.dart';
import 'screens/field_staff/update_status.dart';
import 'screens/field_staff/upload_workproof.dart';
import 'screens/admin/dashboard.dart';
import 'screens/admin/manage_users.dart';
import 'screens/admin/manage_subjects.dart';
import 'screens/admin/audit_logs.dart';
import 'screens/admin/complaint_management.dart';
import 'screens/admin/user_history.dart';
import 'screens/common/profile_screen.dart';
import 'screens/common/settings_screen.dart';
import 'screens/admin/manage_configs.dart';
import 'screens/admin/all_users_history.dart';
import 'screens/admin/ManageAreasScreen.dart';
import 'screens/common/announcements_screen.dart';
import 'screens/admin/reports_screen.dart';
import 'screens/common/notifications_screen.dart';
import 'screens/auth/otp_verification_screen.dart';
import 'screens/common/view_privacy_policy_screen.dart';
import 'screens/common/faqs_screen.dart';
import 'screens/common/contact_support_screen.dart';
import 'screens/common/app_version_screen.dart';

Map<String, WidgetBuilder> appRoutes = {
  '/login': (context) => const LoginScreen(),
  '/login/callback': (context) => const LoginCallbackScreen(),
  '/admin/configs': (context) => const ManageConfigs(),
  '/citizen/track': (context) => const TrackGrievance(),
  '/citizen/submit': (context) => const SubmitGrievance(),
  '/citizen/detail': (context) {
    final args = ModalRoute.of(context)!.settings.arguments as int?;
    if (args == null || args <= 0) {
      return const Scaffold(body: Center(child: Text('Invalid grievance ID')));
    }
    return GrievanceDetail(id: args);
  },
  '/member_head/view': (context) => const ViewGrievances(),
  '/member_head/assign': (context) => const AssignGrievance(),
  '/member_head/reject': (context) => const RejectGrievance(),
  '/employer/assigned': (context) => const AssignedList(),
  '/employer/update': (context) => const UpdateStatus(),
  '/employer/upload': (context) => const UploadWorkproof(),
  '/admin/dashboard': (context) => const Dashboard(),
  '/admin/users': (context) => const ManageUsers(),
  '/admin/subjects': (context) => const ManageSubjects(),
  '/admin/all_users_history': (context) => const AllUsersHistoryScreen(),
  '/admin/audit': (context) => const AuditLogs(),
  '/admin/complaints': (context) => const ComplaintManagement(),
  '/admin/user_history': (context) {
    final args = ModalRoute.of(context)!.settings.arguments as int?;
    if (args == null) {
      return const Scaffold(body: Center(child: Text('User ID required')));
    }
    return UserHistoryScreen(userId: args); // Pass userId to screen
  },
  '/profile': (context) => const ProfileScreen(),
  '/settings': (context) => const SettingsScreen(),
  '/citizen/home': (context) => const TrackGrievance(),
  '/member_head/home': (context) => const ViewGrievances(),
  '/employer/home': (context) => const AssignedList(),
  '/field_staff/home': (context) => const AssignedList(), // Added for FIELD_STAFF role
  '/admin/home': (context) => const Dashboard(),
  '/admin/areas': (context) => const ManageAreasScreen(),
  '/announcements': (context) => const AnnouncementsScreen(),
  '/admin/reports': (context) => const ReportsScreen(),
  '/notifications': (context) => const NotificationsScreen(),
  '/auth/otp': (context) => const OtpVerificationScreen(),

  '/privacy-policy': (context) => const PrivacyPolicyScreen(),
  '/faqs': (context) => const FaqsScreen(),
  '/contact-support': (context) => const ContactSupportScreen(),
  '/app-version': (context) => const AppVersionScreen(),

};

=== Folder: l10n ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\l10n\app_localizations.dart ---
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'app_localizations_en.dart';
import 'app_localizations_hi.dart';
import 'app_localizations_mr.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of AppLocalizations
/// returned by `AppLocalizations.of(context)`.
///
/// Applications need to include `AppLocalizations.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'l10n/app_localizations.dart';
///
/// return MaterialApp(
///   localizationsDelegates: AppLocalizations.localizationsDelegates,
///   supportedLocales: AppLocalizations.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the AppLocalizations.supportedLocales
/// property.
abstract class AppLocalizations {
  AppLocalizations(String locale)
    : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate =
      _AppLocalizationsDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates =
      <LocalizationsDelegate<dynamic>>[
        delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
      ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('en'),
    Locale('hi'),
    Locale('mr'),
  ];

  /// App title displayed on home screen
  ///
  /// In en, this message translates to:
  /// **'Grievance System'**
  String get appTitle;

  /// Label for login button
  ///
  /// In en, this message translates to:
  /// **'Login'**
  String get login;

  /// Label for register button
  ///
  /// In en, this message translates to:
  /// **'Register'**
  String get register;

  /// Label for submit grievance button
  ///
  /// In en, this message translates to:
  /// **'Submit Grievance'**
  String get submitGrievance;

  /// Error message for failed login
  ///
  /// In en, this message translates to:
  /// **'Authentication failed'**
  String get authenticationFailed;

  /// Generic error label
  ///
  /// In en, this message translates to:
  /// **'An error occurred'**
  String get error;

  /// Label for name input field
  ///
  /// In en, this message translates to:
  /// **'Name'**
  String get name;

  /// Label for email input field
  ///
  /// In en, this message translates to:
  /// **'Email'**
  String get email;

  /// Label for password input field
  ///
  /// In en, this message translates to:
  /// **'Password'**
  String get password;

  /// Prompt to register
  ///
  /// In en, this message translates to:
  /// **'Don\'t have an account? Register'**
  String get registerPrompt;

  /// Prompt to login
  ///
  /// In en, this message translates to:
  /// **'Already have an account? Login'**
  String get loginPrompt;

  /// Label for Google login button
  ///
  /// In en, this message translates to:
  /// **'Login with Google'**
  String get googleLogin;

  /// Error message for failed Google login
  ///
  /// In en, this message translates to:
  /// **'Google login failed'**
  String get googleLoginFailed;

  /// Label for settings screen
  ///
  /// In en, this message translates to:
  /// **'Settings'**
  String get settings;

  /// Label for dark mode toggle
  ///
  /// In en, this message translates to:
  /// **'Dark Mode'**
  String get darkMode;

  /// Label for language selector
  ///
  /// In en, this message translates to:
  /// **'Language'**
  String get language;

  /// No description provided for @comments.
  ///
  /// In en, this message translates to:
  /// **'Comments'**
  String get comments;

  /// No description provided for @noComments.
  ///
  /// In en, this message translates to:
  /// **'No Comments Yet'**
  String get noComments;

  /// No description provided for @noCommentsMessage.
  ///
  /// In en, this message translates to:
  /// **'Be the first to add a comment!'**
  String get noCommentsMessage;

  /// No description provided for @addComment.
  ///
  /// In en, this message translates to:
  /// **'Add Comment'**
  String get addComment;

  /// No description provided for @yourComment.
  ///
  /// In en, this message translates to:
  /// **'Your Comment'**
  String get yourComment;

  /// No description provided for @commentCannotBeEmpty.
  ///
  /// In en, this message translates to:
  /// **'Comment cannot be empty'**
  String get commentCannotBeEmpty;

  /// No description provided for @cancel.
  ///
  /// In en, this message translates to:
  /// **'Cancel'**
  String get cancel;

  /// No description provided for @submit.
  ///
  /// In en, this message translates to:
  /// **'Submit'**
  String get submit;

  /// No description provided for @commentAddedSuccess.
  ///
  /// In en, this message translates to:
  /// **'Comment added successfully'**
  String get commentAddedSuccess;

  /// No description provided for @failedToAddComment.
  ///
  /// In en, this message translates to:
  /// **'Failed to add comment'**
  String get failedToAddComment;

  /// No description provided for @grievanceDetails.
  ///
  /// In en, this message translates to:
  /// **'Grievance Details'**
  String get grievanceDetails;

  /// No description provided for @status.
  ///
  /// In en, this message translates to:
  /// **'Status'**
  String get status;

  /// No description provided for @submitFeedback.
  ///
  /// In en, this message translates to:
  /// **'Submit Feedback'**
  String get submitFeedback;

  /// No description provided for @selectRating.
  ///
  /// In en, this message translates to:
  /// **'Select Rating'**
  String get selectRating;

  /// No description provided for @feedback.
  ///
  /// In en, this message translates to:
  /// **'Feedback'**
  String get feedback;

  /// No description provided for @pleaseProvideRating.
  ///
  /// In en, this message translates to:
  /// **'Please provide a rating'**
  String get pleaseProvideRating;

  /// No description provided for @feedbackSubmitted.
  ///
  /// In en, this message translates to:
  /// **'Your feedback has been submitted'**
  String get feedbackSubmitted;

  /// No description provided for @failedToLoadGrievance.
  ///
  /// In en, this message translates to:
  /// **'Failed to load grievance'**
  String get failedToLoadGrievance;

  /// No description provided for @userHistory.
  ///
  /// In en, this message translates to:
  /// **'User History'**
  String get userHistory;

  /// No description provided for @userNotFound.
  ///
  /// In en, this message translates to:
  /// **'User not found'**
  String get userNotFound;

  /// No description provided for @noGrievancesFound.
  ///
  /// In en, this message translates to:
  /// **'No grievances found'**
  String get noGrievancesFound;

  /// No description provided for @noGrievances.
  ///
  /// In en, this message translates to:
  /// **'No Grievances'**
  String get noGrievances;

  /// No description provided for @noGrievancesMessage.
  ///
  /// In en, this message translates to:
  /// **'There are no grievances to display.'**
  String get noGrievancesMessage;

  /// No description provided for @retry.
  ///
  /// In en, this message translates to:
  /// **'Retry'**
  String get retry;

  /// No description provided for @filterByStatus.
  ///
  /// In en, this message translates to:
  /// **'Filter by Status'**
  String get filterByStatus;

  /// No description provided for @filterByPriority.
  ///
  /// In en, this message translates to:
  /// **'Filter by Priority'**
  String get filterByPriority;

  /// No description provided for @filterByArea.
  ///
  /// In en, this message translates to:
  /// **'Filter by Area'**
  String get filterByArea;

  /// No description provided for @filterBySubject.
  ///
  /// In en, this message translates to:
  /// **'Filter by Subject'**
  String get filterBySubject;

  /// No description provided for @reassign.
  ///
  /// In en, this message translates to:
  /// **'Reassign'**
  String get reassign;

  /// No description provided for @escalate.
  ///
  /// In en, this message translates to:
  /// **'Escalate'**
  String get escalate;

  /// No description provided for @updateStatus.
  ///
  /// In en, this message translates to:
  /// **'Update Status'**
  String get updateStatus;

  /// No description provided for @viewDetails.
  ///
  /// In en, this message translates to:
  /// **'View Details'**
  String get viewDetails;

  /// No description provided for @reassignGrievance.
  ///
  /// In en, this message translates to:
  /// **'Reassign Grievance'**
  String get reassignGrievance;

  /// No description provided for @selectAssignee.
  ///
  /// In en, this message translates to:
  /// **'Select Assignee'**
  String get selectAssignee;

  /// No description provided for @selectStatus.
  ///
  /// In en, this message translates to:
  /// **'Select Status'**
  String get selectStatus;

  /// No description provided for @update.
  ///
  /// In en, this message translates to:
  /// **'Update'**
  String get update;

  /// No description provided for @noComplaints.
  ///
  /// In en, this message translates to:
  /// **'No Complaints'**
  String get noComplaints;

  /// No description provided for @noComplaintsMessage.
  ///
  /// In en, this message translates to:
  /// **'There are no complaints to display.'**
  String get noComplaintsMessage;

  /// No description provided for @tryAgain.
  ///
  /// In en, this message translates to:
  /// **'Retry'**
  String get tryAgain;

  /// No description provided for @reassignComplaint.
  ///
  /// In en, this message translates to:
  /// **'Reassign'**
  String get reassignComplaint;

  /// No description provided for @escalateComplaint.
  ///
  /// In en, this message translates to:
  /// **'Escalate'**
  String get escalateComplaint;

  /// Error message when user ID is not provided
  ///
  /// In en, this message translates to:
  /// **'User ID is required'**
  String get userIdRequired;

  /// No description provided for @noConfigs.
  ///
  /// In en, this message translates to:
  /// **'No Configurations'**
  String get noConfigs;

  /// No description provided for @noConfigsMessage.
  ///
  /// In en, this message translates to:
  /// **'There are no configurations to display. Add one below.'**
  String get noConfigsMessage;

  /// No description provided for @addConfig.
  ///
  /// In en, this message translates to:
  /// **'Add Configuration'**
  String get addConfig;

  /// No description provided for @editConfig.
  ///
  /// In en, this message translates to:
  /// **'Edit Configuration'**
  String get editConfig;

  /// No description provided for @configKey.
  ///
  /// In en, this message translates to:
  /// **'Configuration Key'**
  String get configKey;

  /// No description provided for @configValue.
  ///
  /// In en, this message translates to:
  /// **'Configuration Value'**
  String get configValue;

  /// No description provided for @configCannotBeEmpty.
  ///
  /// In en, this message translates to:
  /// **'Key and Value cannot be empty'**
  String get configCannotBeEmpty;

  /// No description provided for @configValueCannotBeEmpty.
  ///
  /// In en, this message translates to:
  /// **'Value cannot be empty'**
  String get configValueCannotBeEmpty;

  /// No description provided for @configAddedSuccess.
  ///
  /// In en, this message translates to:
  /// **'Configuration added successfully'**
  String get configAddedSuccess;

  /// No description provided for @configUpdatedSuccess.
  ///
  /// In en, this message translates to:
  /// **'Configuration updated successfully'**
  String get configUpdatedSuccess;

  /// No description provided for @track_grievances.
  ///
  /// In en, this message translates to:
  /// **'Track Your Grievances'**
  String get track_grievances;

  /// No description provided for @no_grievances.
  ///
  /// In en, this message translates to:
  /// **'No Grievances Yet'**
  String get no_grievances;

  /// No description provided for @no_grievances_message.
  ///
  /// In en, this message translates to:
  /// **'Submit your first grievance to get started'**
  String get no_grievances_message;

  /// No description provided for @submit_grievance.
  ///
  /// In en, this message translates to:
  /// **'Submit Grievance'**
  String get submit_grievance;

  /// No description provided for @your_grievances.
  ///
  /// In en, this message translates to:
  /// **'Your Grievances'**
  String get your_grievances;

  /// No description provided for @please_login.
  ///
  /// In en, this message translates to:
  /// **'Please login'**
  String get please_login;

  /// No description provided for @addUser.
  ///
  /// In en, this message translates to:
  /// **'Add User'**
  String get addUser;

  /// No description provided for @role.
  ///
  /// In en, this message translates to:
  /// **'Role'**
  String get role;

  /// No description provided for @add.
  ///
  /// In en, this message translates to:
  /// **'Add'**
  String get add;

  /// No description provided for @userAddedSuccess.
  ///
  /// In en, this message translates to:
  /// **'User added successfully'**
  String get userAddedSuccess;

  /// No description provided for @failedToAddUser.
  ///
  /// In en, this message translates to:
  /// **'Failed to add user'**
  String get failedToAddUser;

  /// No description provided for @editUser.
  ///
  /// In en, this message translates to:
  /// **'Edit User'**
  String get editUser;

  /// No description provided for @deleteUser.
  ///
  /// In en, this message translates to:
  /// **'Delete User'**
  String get deleteUser;

  /// No description provided for @userUpdatedSuccess.
  ///
  /// In en, this message translates to:
  /// **'User updated successfully'**
  String get userUpdatedSuccess;

  /// No description provided for @failedToUpdateUser.
  ///
  /// In en, this message translates to:
  /// **'Failed to update user'**
  String get failedToUpdateUser;

  /// No description provided for @deleteUserConfirmation.
  ///
  /// In en, this message translates to:
  /// **'Are you sure you want to delete this user?'**
  String get deleteUserConfirmation;

  /// No description provided for @userDeletedSuccess.
  ///
  /// In en, this message translates to:
  /// **'User deleted successfully'**
  String get userDeletedSuccess;

  /// No description provided for @delete.
  ///
  /// In en, this message translates to:
  /// **'Delete'**
  String get delete;

  /// No description provided for @failedToDeleteUser.
  ///
  /// In en, this message translates to:
  /// **'Failed to delete User'**
  String get failedToDeleteUser;

  /// No description provided for @manageUsers.
  ///
  /// In en, this message translates to:
  /// **'Manage Users'**
  String get manageUsers;

  /// No description provided for @noUsers.
  ///
  /// In en, this message translates to:
  /// **'No Users'**
  String get noUsers;

  /// No description provided for @noUsersMessage.
  ///
  /// In en, this message translates to:
  /// **'There are no users to display.'**
  String get noUsersMessage;

  /// No description provided for @noEmail.
  ///
  /// In en, this message translates to:
  /// **'No Email'**
  String get noEmail;

  /// No description provided for @loading.
  ///
  /// In en, this message translates to:
  /// **'Processing login...'**
  String get loading;

  /// No description provided for @viewgrievanceetails.
  ///
  /// In en, this message translates to:
  /// **'View Grievances'**
  String get viewgrievanceetails;

  /// No description provided for @assignGrievance.
  ///
  /// In en, this message translates to:
  /// **'Assign Grievance'**
  String get assignGrievance;

  /// No description provided for @rejectGrievance.
  ///
  /// In en, this message translates to:
  /// **'Reject Grievance'**
  String get rejectGrievance;

  /// No description provided for @rejectionReason.
  ///
  /// In en, this message translates to:
  /// **'Rejection Reason'**
  String get rejectionReason;

  /// No description provided for @reject.
  ///
  /// In en, this message translates to:
  /// **'Reject'**
  String get reject;

  /// No description provided for @assignedGrievances.
  ///
  /// In en, this message translates to:
  /// **'Assigned Grievances'**
  String get assignedGrievances;

  /// No description provided for @noAssigned.
  ///
  /// In en, this message translates to:
  /// **'No Assigned Grievances'**
  String get noAssigned;

  /// No description provided for @noAssignedMessage.
  ///
  /// In en, this message translates to:
  /// **'There are no grievances assigned to you.'**
  String get noAssignedMessage;

  /// No description provided for @upload.
  ///
  /// In en, this message translates to:
  /// **'Upload'**
  String get upload;

  /// No description provided for @uploadWorkproof.
  ///
  /// In en, this message translates to:
  /// **'Upload Work Proof'**
  String get uploadWorkproof;

  /// No description provided for @guest.
  ///
  /// In en, this message translates to:
  /// **'Guest'**
  String get guest;

  /// No description provided for @invalidRole.
  ///
  /// In en, this message translates to:
  /// **'Invalid Role'**
  String get invalidRole;

  /// No description provided for @profile.
  ///
  /// In en, this message translates to:
  /// **'Profile'**
  String get profile;

  /// No description provided for @logout.
  ///
  /// In en, this message translates to:
  /// **'Logout'**
  String get logout;

  /// No description provided for @logoutFailed.
  ///
  /// In en, this message translates to:
  /// **'Logout Failed'**
  String get logoutFailed;

  /// No description provided for @notifications.
  ///
  /// In en, this message translates to:
  /// **'Notifications'**
  String get notifications;

  /// No description provided for @save.
  ///
  /// In en, this message translates to:
  /// **'Save'**
  String get save;

  /// No description provided for @appVersion.
  ///
  /// In en, this message translates to:
  /// **'App Version'**
  String get appVersion;

  /// No description provided for @about.
  ///
  /// In en, this message translates to:
  /// **'About'**
  String get about;

  /// No description provided for @contactSupport.
  ///
  /// In en, this message translates to:
  /// **'Contact Support'**
  String get contactSupport;

  /// No description provided for @faqs.
  ///
  /// In en, this message translates to:
  /// **'FAQs'**
  String get faqs;

  /// No description provided for @helpSupport.
  ///
  /// In en, this message translates to:
  /// **'Help & Support'**
  String get helpSupport;

  /// No description provided for @viewPrivacyPolicyprivacySecurity.
  ///
  /// In en, this message translates to:
  /// **'View Privacy Policy / Privacy & Security'**
  String get viewPrivacyPolicyprivacySecurity;

  /// No description provided for @enableNotifications.
  ///
  /// In en, this message translates to:
  /// **'Enable Notifications'**
  String get enableNotifications;

  /// No description provided for @account.
  ///
  /// In en, this message translates to:
  /// **'Account'**
  String get account;

  /// No description provided for @privacySecurity.
  ///
  /// In en, this message translates to:
  /// **'Privacy & Security'**
  String get privacySecurity;

  /// No description provided for @viewPrivacyPolicy.
  ///
  /// In en, this message translates to:
  /// **'View Privacy Policy'**
  String get viewPrivacyPolicy;

  /// No description provided for @invalidEmail.
  ///
  /// In en, this message translates to:
  /// **'Invalid Email'**
  String get invalidEmail;

  /// No description provided for @nameRequired.
  ///
  /// In en, this message translates to:
  /// **'Name is required'**
  String get nameRequired;

  /// No description provided for @emailRequired.
  ///
  /// In en, this message translates to:
  /// **'Email is required'**
  String get emailRequired;

  /// No description provided for @passwordRequired.
  ///
  /// In en, this message translates to:
  /// **'Password is required'**
  String get passwordRequired;

  /// No description provided for @recentComplaints.
  ///
  /// In en, this message translates to:
  /// **'Recent Complaints'**
  String get recentComplaints;

  /// No description provided for @filterByPeriod.
  ///
  /// In en, this message translates to:
  /// **'Filter by Period'**
  String get filterByPeriod;

  /// No description provided for @totalComplaints.
  ///
  /// In en, this message translates to:
  /// **'Total Complaints'**
  String get totalComplaints;

  /// No description provided for @day.
  ///
  /// In en, this message translates to:
  /// **'Day'**
  String get day;

  /// No description provided for @week.
  ///
  /// In en, this message translates to:
  /// **'Week'**
  String get week;

  /// No description provided for @month.
  ///
  /// In en, this message translates to:
  /// **'Month'**
  String get month;

  /// No description provided for @year.
  ///
  /// In en, this message translates to:
  /// **'Year'**
  String get year;

  /// No description provided for @allTime.
  ///
  /// In en, this message translates to:
  /// **'All Time'**
  String get allTime;

  /// No description provided for @complaintStatusOverview.
  ///
  /// In en, this message translates to:
  /// **'Complaint Status Overview'**
  String get complaintStatusOverview;

  /// No description provided for @grievanceTrend.
  ///
  /// In en, this message translates to:
  /// **'Grievance Trend'**
  String get grievanceTrend;

  /// No description provided for @numberOfGrievances.
  ///
  /// In en, this message translates to:
  /// **'Number of Grievances'**
  String get numberOfGrievances;

  /// No description provided for @timePeriod.
  ///
  /// In en, this message translates to:
  /// **'Time Period'**
  String get timePeriod;

  /// No description provided for @deptWiseDistribution.
  ///
  /// In en, this message translates to:
  /// **'Department-wise Distribution'**
  String get deptWiseDistribution;

  /// No description provided for @department.
  ///
  /// In en, this message translates to:
  /// **'Department'**
  String get department;

  /// No description provided for @slaMetrics.
  ///
  /// In en, this message translates to:
  /// **'SLA Metrics'**
  String get slaMetrics;

  /// No description provided for @slaDays.
  ///
  /// In en, this message translates to:
  /// **'SLA Days'**
  String get slaDays;

  /// No description provided for @complianceRate.
  ///
  /// In en, this message translates to:
  /// **'Compliance Rate'**
  String get complianceRate;

  /// No description provided for @avgResolutionTime.
  ///
  /// In en, this message translates to:
  /// **'Avg Resolution Time'**
  String get avgResolutionTime;

  /// No description provided for @exportPDF.
  ///
  /// In en, this message translates to:
  /// **'Export PDF'**
  String get exportPDF;

  /// No description provided for @exportCSV.
  ///
  /// In en, this message translates to:
  /// **'Export CSV'**
  String get exportCSV;

  /// No description provided for @exportExcel.
  ///
  /// In en, this message translates to:
  /// **'Export Excel'**
  String get exportExcel;

  /// No description provided for @reportExported.
  ///
  /// In en, this message translates to:
  /// **'Report exported'**
  String get reportExported;

  /// No description provided for @errorExportingReport.
  ///
  /// In en, this message translates to:
  /// **'Error exporting report'**
  String get errorExportingReport;

  /// No description provided for @viewAuditLogs.
  ///
  /// In en, this message translates to:
  /// **'View Audit Logs'**
  String get viewAuditLogs;

  /// No description provided for @complaintManagement.
  ///
  /// In en, this message translates to:
  /// **'Complaint Management'**
  String get complaintManagement;

  /// No description provided for @manageConfigs.
  ///
  /// In en, this message translates to:
  /// **'Manage Configurations'**
  String get manageConfigs;

  /// No description provided for @manageSubjects.
  ///
  /// In en, this message translates to:
  /// **'Manage Subjects'**
  String get manageSubjects;

  /// No description provided for @manageAreas.
  ///
  /// In en, this message translates to:
  /// **'Manage Areas'**
  String get manageAreas;

  /// No description provided for @reports.
  ///
  /// In en, this message translates to:
  /// **'Reports'**
  String get reports;

  /// No description provided for @assignedList.
  ///
  /// In en, this message translates to:
  /// **'Assigned Grievances'**
  String get assignedList;

  /// No description provided for @announcements.
  ///
  /// In en, this message translates to:
  /// **'Announcements'**
  String get announcements;

  /// No description provided for @privacyPolicy.
  ///
  /// In en, this message translates to:
  /// **'Privacy Policy'**
  String get privacyPolicy;
}

class _AppLocalizationsDelegate
    extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  Future<AppLocalizations> load(Locale locale) {
    return SynchronousFuture<AppLocalizations>(lookupAppLocalizations(locale));
  }

  @override
  bool isSupported(Locale locale) =>
      <String>['en', 'hi', 'mr'].contains(locale.languageCode);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

AppLocalizations lookupAppLocalizations(Locale locale) {
  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'en':
      return AppLocalizationsEn();
    case 'hi':
      return AppLocalizationsHi();
    case 'mr':
      return AppLocalizationsMr();
  }

  throw FlutterError(
    'AppLocalizations.delegate failed to load unsupported locale "$locale". This is likely '
    'an issue with the localizations generation tool. Please file an issue '
    'on GitHub with a reproducible sample app and the gen-l10n configuration '
    'that was used.',
  );
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\l10n\app_localizations_en.dart ---
// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for English (`en`).
class AppLocalizationsEn extends AppLocalizations {
  AppLocalizationsEn([String locale = 'en']) : super(locale);

  @override
  String get appTitle => 'Grievance System';

  @override
  String get login => 'Login';

  @override
  String get register => 'Register';

  @override
  String get submitGrievance => 'Submit Grievance';

  @override
  String get authenticationFailed => 'Authentication failed';

  @override
  String get error => 'An error occurred';

  @override
  String get name => 'Name';

  @override
  String get email => 'Email';

  @override
  String get password => 'Password';

  @override
  String get registerPrompt => 'Don\'t have an account? Register';

  @override
  String get loginPrompt => 'Already have an account? Login';

  @override
  String get googleLogin => 'Login with Google';

  @override
  String get googleLoginFailed => 'Google login failed';

  @override
  String get settings => 'Settings';

  @override
  String get darkMode => 'Dark Mode';

  @override
  String get language => 'Language';

  @override
  String get comments => 'Comments';

  @override
  String get noComments => 'No Comments Yet';

  @override
  String get noCommentsMessage => 'Be the first to add a comment!';

  @override
  String get addComment => 'Add Comment';

  @override
  String get yourComment => 'Your Comment';

  @override
  String get commentCannotBeEmpty => 'Comment cannot be empty';

  @override
  String get cancel => 'Cancel';

  @override
  String get submit => 'Submit';

  @override
  String get commentAddedSuccess => 'Comment added successfully';

  @override
  String get failedToAddComment => 'Failed to add comment';

  @override
  String get grievanceDetails => 'Grievance Details';

  @override
  String get status => 'Status';

  @override
  String get submitFeedback => 'Submit Feedback';

  @override
  String get selectRating => 'Select Rating';

  @override
  String get feedback => 'Feedback';

  @override
  String get pleaseProvideRating => 'Please provide a rating';

  @override
  String get feedbackSubmitted => 'Your feedback has been submitted';

  @override
  String get failedToLoadGrievance => 'Failed to load grievance';

  @override
  String get userHistory => 'User History';

  @override
  String get userNotFound => 'User not found';

  @override
  String get noGrievancesFound => 'No grievances found';

  @override
  String get noGrievances => 'No Grievances';

  @override
  String get noGrievancesMessage => 'There are no grievances to display.';

  @override
  String get retry => 'Retry';

  @override
  String get filterByStatus => 'Filter by Status';

  @override
  String get filterByPriority => 'Filter by Priority';

  @override
  String get filterByArea => 'Filter by Area';

  @override
  String get filterBySubject => 'Filter by Subject';

  @override
  String get reassign => 'Reassign';

  @override
  String get escalate => 'Escalate';

  @override
  String get updateStatus => 'Update Status';

  @override
  String get viewDetails => 'View Details';

  @override
  String get reassignGrievance => 'Reassign Grievance';

  @override
  String get selectAssignee => 'Select Assignee';

  @override
  String get selectStatus => 'Select Status';

  @override
  String get update => 'Update';

  @override
  String get noComplaints => 'No Complaints';

  @override
  String get noComplaintsMessage => 'There are no complaints to display.';

  @override
  String get tryAgain => 'Retry';

  @override
  String get reassignComplaint => 'Reassign';

  @override
  String get escalateComplaint => 'Escalate';

  @override
  String get userIdRequired => 'User ID is required';

  @override
  String get noConfigs => 'No Configurations';

  @override
  String get noConfigsMessage =>
      'There are no configurations to display. Add one below.';

  @override
  String get addConfig => 'Add Configuration';

  @override
  String get editConfig => 'Edit Configuration';

  @override
  String get configKey => 'Configuration Key';

  @override
  String get configValue => 'Configuration Value';

  @override
  String get configCannotBeEmpty => 'Key and Value cannot be empty';

  @override
  String get configValueCannotBeEmpty => 'Value cannot be empty';

  @override
  String get configAddedSuccess => 'Configuration added successfully';

  @override
  String get configUpdatedSuccess => 'Configuration updated successfully';

  @override
  String get track_grievances => 'Track Your Grievances';

  @override
  String get no_grievances => 'No Grievances Yet';

  @override
  String get no_grievances_message =>
      'Submit your first grievance to get started';

  @override
  String get submit_grievance => 'Submit Grievance';

  @override
  String get your_grievances => 'Your Grievances';

  @override
  String get please_login => 'Please login';

  @override
  String get addUser => 'Add User';

  @override
  String get role => 'Role';

  @override
  String get add => 'Add';

  @override
  String get userAddedSuccess => 'User added successfully';

  @override
  String get failedToAddUser => 'Failed to add user';

  @override
  String get editUser => 'Edit User';

  @override
  String get deleteUser => 'Delete User';

  @override
  String get userUpdatedSuccess => 'User updated successfully';

  @override
  String get failedToUpdateUser => 'Failed to update user';

  @override
  String get deleteUserConfirmation =>
      'Are you sure you want to delete this user?';

  @override
  String get userDeletedSuccess => 'User deleted successfully';

  @override
  String get delete => 'Delete';

  @override
  String get failedToDeleteUser => 'Failed to delete User';

  @override
  String get manageUsers => 'Manage Users';

  @override
  String get noUsers => 'No Users';

  @override
  String get noUsersMessage => 'There are no users to display.';

  @override
  String get noEmail => 'No Email';

  @override
  String get loading => 'Processing login...';

  @override
  String get viewgrievanceetails => 'View Grievances';

  @override
  String get assignGrievance => 'Assign Grievance';

  @override
  String get rejectGrievance => 'Reject Grievance';

  @override
  String get rejectionReason => 'Rejection Reason';

  @override
  String get reject => 'Reject';

  @override
  String get assignedGrievances => 'Assigned Grievances';

  @override
  String get noAssigned => 'No Assigned Grievances';

  @override
  String get noAssignedMessage => 'There are no grievances assigned to you.';

  @override
  String get upload => 'Upload';

  @override
  String get uploadWorkproof => 'Upload Work Proof';

  @override
  String get guest => 'Guest';

  @override
  String get invalidRole => 'Invalid Role';

  @override
  String get profile => 'Profile';

  @override
  String get logout => 'Logout';

  @override
  String get logoutFailed => 'Logout Failed';

  @override
  String get notifications => 'Notifications';

  @override
  String get save => 'Save';

  @override
  String get appVersion => 'App Version';

  @override
  String get about => 'About';

  @override
  String get contactSupport => 'Contact Support';

  @override
  String get faqs => 'FAQs';

  @override
  String get helpSupport => 'Help & Support';

  @override
  String get viewPrivacyPolicyprivacySecurity =>
      'View Privacy Policy / Privacy & Security';

  @override
  String get enableNotifications => 'Enable Notifications';

  @override
  String get account => 'Account';

  @override
  String get privacySecurity => 'Privacy & Security';

  @override
  String get viewPrivacyPolicy => 'View Privacy Policy';

  @override
  String get invalidEmail => 'Invalid Email';

  @override
  String get nameRequired => 'Name is required';

  @override
  String get emailRequired => 'Email is required';

  @override
  String get passwordRequired => 'Password is required';

  @override
  String get recentComplaints => 'Recent Complaints';

  @override
  String get filterByPeriod => 'Filter by Period';

  @override
  String get totalComplaints => 'Total Complaints';

  @override
  String get day => 'Day';

  @override
  String get week => 'Week';

  @override
  String get month => 'Month';

  @override
  String get year => 'Year';

  @override
  String get allTime => 'All Time';

  @override
  String get complaintStatusOverview => 'Complaint Status Overview';

  @override
  String get grievanceTrend => 'Grievance Trend';

  @override
  String get numberOfGrievances => 'Number of Grievances';

  @override
  String get timePeriod => 'Time Period';

  @override
  String get deptWiseDistribution => 'Department-wise Distribution';

  @override
  String get department => 'Department';

  @override
  String get slaMetrics => 'SLA Metrics';

  @override
  String get slaDays => 'SLA Days';

  @override
  String get complianceRate => 'Compliance Rate';

  @override
  String get avgResolutionTime => 'Avg Resolution Time';

  @override
  String get exportPDF => 'Export PDF';

  @override
  String get exportCSV => 'Export CSV';

  @override
  String get exportExcel => 'Export Excel';

  @override
  String get reportExported => 'Report exported';

  @override
  String get errorExportingReport => 'Error exporting report';

  @override
  String get viewAuditLogs => 'View Audit Logs';

  @override
  String get complaintManagement => 'Complaint Management';

  @override
  String get manageConfigs => 'Manage Configurations';

  @override
  String get manageSubjects => 'Manage Subjects';

  @override
  String get manageAreas => 'Manage Areas';

  @override
  String get reports => 'Reports';

  @override
  String get assignedList => 'Assigned Grievances';

  @override
  String get announcements => 'Announcements';

  @override
  String get privacyPolicy => 'Privacy Policy';
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\l10n\app_localizations_hi.dart ---
// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for Hindi (`hi`).
class AppLocalizationsHi extends AppLocalizations {
  AppLocalizationsHi([String locale = 'hi']) : super(locale);

  @override
  String get appTitle => 'शिकायत प्रणाली';

  @override
  String get login => 'लॉगिन';

  @override
  String get register => 'पंजीकरण';

  @override
  String get submitGrievance => 'शिकायत सबमिट करें';

  @override
  String get authenticationFailed => 'प्रमाणीकरण विफल';

  @override
  String get error => 'एक त्रुटि हुई';

  @override
  String get name => 'नाम';

  @override
  String get email => 'ईमेल';

  @override
  String get password => 'पासवर्ड';

  @override
  String get registerPrompt => 'खाता नहीं है? पंजीकरण करें';

  @override
  String get loginPrompt => 'पहले से खाता है? लॉगिन करें';

  @override
  String get googleLogin => 'गूगल के साथ लॉगिन';

  @override
  String get googleLoginFailed => 'गूगल लॉगिन विफल';

  @override
  String get settings => 'सेटिंग्स';

  @override
  String get darkMode => 'डार्क मोड';

  @override
  String get language => 'भाषा';

  @override
  String get comments => 'टिप्पणियाँ';

  @override
  String get noComments => 'अभी तक कोई टिप्पणी नहीं';

  @override
  String get noCommentsMessage => 'सबसे पहले टिप्पणी करें!';

  @override
  String get addComment => 'टिप्पणी जोड़ें';

  @override
  String get yourComment => 'आपकी टिप्पणी';

  @override
  String get commentCannotBeEmpty => 'टिप्पणी खाली नहीं हो सकती';

  @override
  String get cancel => 'रद्द करें';

  @override
  String get submit => 'सबमिट करें';

  @override
  String get commentAddedSuccess => 'टिप्पणी सफलतापूर्वक जोड़ दी गई';

  @override
  String get failedToAddComment => 'टिप्पणी जोड़ने में विफल';

  @override
  String get grievanceDetails => 'शिकायत विवरण';

  @override
  String get status => 'स्थिति';

  @override
  String get submitFeedback => 'प्रतिक्रिया सबमिट करें';

  @override
  String get selectRating => 'रेटिंग चुनें';

  @override
  String get feedback => 'प्रतिक्रिया';

  @override
  String get pleaseProvideRating => 'कृपया रेटिंग दें';

  @override
  String get feedbackSubmitted => 'आपकी प्रतिक्रिया सबमिट हो गई है';

  @override
  String get failedToLoadGrievance => 'शिकायत लोड करने में विफल';

  @override
  String get userHistory => 'उपयोगकर्ता इतिहास';

  @override
  String get userNotFound => 'उपयोगकर्ता नहीं मिला';

  @override
  String get noGrievancesFound => 'कोई शिकायत नहीं मिली';

  @override
  String get noGrievances => 'कोई शिकायत नहीं';

  @override
  String get noGrievancesMessage => 'प्रदर्शित करने के लिए कोई शिकायत नहीं है।';

  @override
  String get retry => 'पुनः प्रयास करें';

  @override
  String get filterByStatus => 'स्थिति अनुसार फ़िल्टर करें';

  @override
  String get filterByPriority => 'प्राथमिकता अनुसार फ़िल्टर करें';

  @override
  String get filterByArea => 'क्षेत्र अनुसार फ़िल्टर करें';

  @override
  String get filterBySubject => 'विषय अनुसार फ़िल्टर करें';

  @override
  String get reassign => 'पुनः असाइन करें';

  @override
  String get escalate => 'एस्केलेट करें';

  @override
  String get updateStatus => 'स्थिति अपडेट करें';

  @override
  String get viewDetails => 'विवरण देखें';

  @override
  String get reassignGrievance => 'शिकायत पुनः असाइन करें';

  @override
  String get selectAssignee => 'असाइनी चुनें';

  @override
  String get selectStatus => 'स्थिति चुनें';

  @override
  String get update => 'अपडेट करें';

  @override
  String get noComplaints => 'कोई शिकायत नहीं';

  @override
  String get noComplaintsMessage => 'प्रदर्शित करने के लिए कोई शिकायत नहीं है।';

  @override
  String get tryAgain => 'पुनः प्रयास करें';

  @override
  String get reassignComplaint => 'शिकायत पुनः सौंपें';

  @override
  String get escalateComplaint => 'शिकायत बढ़ाएँ';

  @override
  String get userIdRequired => 'उपयोगकर्ता आईडी आवश्यक है';

  @override
  String get noConfigs => 'कोई कॉन्फ़िगरेशन नहीं';

  @override
  String get noConfigsMessage =>
      'प्रदर्शित करने के लिए कोई कॉन्फ़िगरेशन नहीं है। नीचे एक जोड़ें।';

  @override
  String get addConfig => 'कॉन्फ़िगरेशन जोड़ें';

  @override
  String get editConfig => 'कॉन्फ़िगरेशन संपादित करें';

  @override
  String get configKey => 'कॉन्फ़िगरेशन कुंजी';

  @override
  String get configValue => 'कॉन्फ़िगरेशन मान';

  @override
  String get configCannotBeEmpty => 'कुंजी और मान खाली नहीं हो सकते';

  @override
  String get configValueCannotBeEmpty => 'मान खाली नहीं हो सकता';

  @override
  String get configAddedSuccess => 'कॉन्फ़िगरेशन सफलतापूर्वक जोड़ा गया';

  @override
  String get configUpdatedSuccess => 'कॉन्फ़िगरेशन सफलतापूर्वक अपडेट किया गया';

  @override
  String get track_grievances => 'अपनी शिकायतें ट्रैक करें';

  @override
  String get no_grievances => 'अभी तक कोई शिकायत नहीं';

  @override
  String get no_grievances_message =>
      'शुरू करने के लिए अपनी पहली शिकायत दर्ज करें';

  @override
  String get submit_grievance => 'शिकायत दर्ज करें';

  @override
  String get your_grievances => 'आपकी शिकायतें';

  @override
  String get please_login => 'कृपया लॉगिन करें';

  @override
  String get addUser => 'उपयोगकर्ता जोड़ें';

  @override
  String get role => 'भूमिका';

  @override
  String get add => 'जोड़ें';

  @override
  String get userAddedSuccess => 'उपयोगकर्ता सफलतापूर्वक जोड़ा गया';

  @override
  String get failedToAddUser => 'उपयोगकर्ता जोड़ने में विफल';

  @override
  String get editUser => 'उपयोगकर्ता संपादित करें';

  @override
  String get deleteUser => 'उपयोगकर्ता हटाएं';

  @override
  String get userUpdatedSuccess => 'उपयोगकर्ता सफलतापूर्वक अपडेट किया गया';

  @override
  String get failedToUpdateUser => 'उपयोगकर्ता अपडेट करने में विफल';

  @override
  String get deleteUserConfirmation =>
      'क्या आप वाकई इस उपयोगकर्ता को हटाना चाहते हैं?';

  @override
  String get userDeletedSuccess => 'उपयोगकर्ता सफलतापूर्वक हटाया गया';

  @override
  String get delete => 'हटाएं';

  @override
  String get failedToDeleteUser => 'उपयोगकर्ता हटाने में विफल';

  @override
  String get manageUsers => 'उपयोगकर्ताओं का प्रबंधन करें';

  @override
  String get noUsers => 'कोई उपयोगकर्ता नहीं';

  @override
  String get noUsersMessage => 'दिखाने के लिए कोई उपयोगकर्ता नहीं है।';

  @override
  String get noEmail => 'कोई ईमेल नहीं';

  @override
  String get loading => 'लॉगिन प्रक्रिया चल रही है...';

  @override
  String get viewgrievanceetails => 'View Grievances';

  @override
  String get assignGrievance => 'शिकायत सौंपें';

  @override
  String get rejectGrievance => 'शिकायत अस्वीकारें';

  @override
  String get rejectionReason => 'अस्वीकृति का कारण';

  @override
  String get reject => 'अस्वीकारें';

  @override
  String get assignedGrievances => 'सौंपे गए शिकायतें';

  @override
  String get noAssigned => 'कोई शिकायतें नहीं सौंपी गई';

  @override
  String get noAssignedMessage => 'आपको कोई शिकायतें नहीं सौंपी गई हैं।';

  @override
  String get upload => 'अपलोड करें';

  @override
  String get uploadWorkproof => 'कार्य का प्रमाण अपलोड करें';

  @override
  String get guest => 'अतिथि';

  @override
  String get invalidRole => 'अमान्य भूमिका';

  @override
  String get profile => 'प्रोफ़ाइल';

  @override
  String get logout => 'लॉगआउट';

  @override
  String get logoutFailed => 'लॉगआउट विफल रहा';

  @override
  String get notifications => 'सूचनाएँ';

  @override
  String get save => 'सहेजें';

  @override
  String get appVersion => 'ऐप संस्करण';

  @override
  String get about => 'के बारे में';

  @override
  String get contactSupport => 'सहायता से संपर्क करें';

  @override
  String get faqs => 'अक्सर पूछे जाने वाले प्रश्न';

  @override
  String get helpSupport => 'मदद और समर्थन';

  @override
  String get viewPrivacyPolicyprivacySecurity =>
      'गोपनीयता नीति / गोपनीयता और सुरक्षा देखें';

  @override
  String get enableNotifications => 'सूचनाएं सक्षम करें';

  @override
  String get account => 'खाता';

  @override
  String get privacySecurity => 'गोपनीयता और सुरक्षा';

  @override
  String get viewPrivacyPolicy => 'गोपनीयता नीति देखें';

  @override
  String get invalidEmail => 'अमान्य ईमेल';

  @override
  String get nameRequired => 'नाम आवश्यक है';

  @override
  String get emailRequired => 'ईमेल आवश्यक है';

  @override
  String get passwordRequired => 'पासवर्ड आवश्यक है';

  @override
  String get recentComplaints => 'हाल की शिकायतें';

  @override
  String get filterByPeriod => 'अवधि अनुसार फ़िल्टर करें';

  @override
  String get totalComplaints => 'कुल शिकायतें';

  @override
  String get day => 'दिन';

  @override
  String get week => 'सप्ताह';

  @override
  String get month => 'महीना';

  @override
  String get year => 'साल';

  @override
  String get allTime => 'सभी समय';

  @override
  String get complaintStatusOverview => 'शिकायत स्थिति अवलोकन';

  @override
  String get grievanceTrend => 'शिकायत प्रवृत्ति';

  @override
  String get numberOfGrievances => 'शिकायतों की संख्या';

  @override
  String get timePeriod => 'समय अवधि';

  @override
  String get deptWiseDistribution => 'विभागवार वितरण';

  @override
  String get department => 'विभाग';

  @override
  String get slaMetrics => 'SLA मेट्रिक्स';

  @override
  String get slaDays => 'SLA दिन';

  @override
  String get complianceRate => 'अनुपालन दर';

  @override
  String get avgResolutionTime => 'औसत समाधान समय';

  @override
  String get exportPDF => 'PDF निर्यात करें';

  @override
  String get exportCSV => 'CSV निर्यात करें';

  @override
  String get exportExcel => 'Excel निर्यात करें';

  @override
  String get reportExported => 'रिपोर्ट निर्यात की गई';

  @override
  String get errorExportingReport => 'रिपोर्ट निर्यात करने में त्रुटि';

  @override
  String get viewAuditLogs => 'ऑडिट लॉग देखें';

  @override
  String get complaintManagement => 'शिकायत प्रबंधन';

  @override
  String get manageConfigs => 'कॉन्फ़िगरेशन प्रबंधित करें';

  @override
  String get manageSubjects => 'विषयों का प्रबंधन करें';

  @override
  String get manageAreas => 'क्षेत्र प्रबंधित करें';

  @override
  String get reports => 'रिपोर्ट्स';

  @override
  String get assignedList => 'निर्धारित शिकायतें';

  @override
  String get announcements => 'सूचनाएँ';

  @override
  String get privacyPolicy => 'गोपनीयता नीति';
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\l10n\app_localizations_mr.dart ---
// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for Marathi (`mr`).
class AppLocalizationsMr extends AppLocalizations {
  AppLocalizationsMr([String locale = 'mr']) : super(locale);

  @override
  String get appTitle => 'तक्रार प्रणाली';

  @override
  String get login => 'लॉगिन';

  @override
  String get register => 'नोंदणी';

  @override
  String get submitGrievance => 'तक्रार सबमिट करा';

  @override
  String get authenticationFailed => 'प्रमाणीकरण अयशस्वी';

  @override
  String get error => 'त्रुटी आली';

  @override
  String get name => 'नाव';

  @override
  String get email => 'ईमेल';

  @override
  String get password => 'पासवर्ड';

  @override
  String get registerPrompt => 'खाते नाही? नोंदणी करा';

  @override
  String get loginPrompt => 'आधीपासून खाते आहे? लॉगिन करा';

  @override
  String get googleLogin => 'गूगलसह लॉगिन';

  @override
  String get googleLoginFailed => 'गूगल लॉगिन अयशस्वी';

  @override
  String get settings => 'सेटिंग्ज';

  @override
  String get darkMode => 'डार्क मोड';

  @override
  String get language => 'भाषा';

  @override
  String get comments => 'टिप्पण्या';

  @override
  String get noComments => 'अजून टिप्पण्या नाहीत';

  @override
  String get noCommentsMessage => 'पहिली टिप्पणी करण्याची संधी घ्या!';

  @override
  String get addComment => 'टिप्पणी जोडा';

  @override
  String get yourComment => 'आपली टिप्पणी';

  @override
  String get commentCannotBeEmpty => 'टिप्पणी रिकामी असू शकत नाही';

  @override
  String get cancel => 'रद्द करा';

  @override
  String get submit => 'सबमिट करा';

  @override
  String get commentAddedSuccess => 'टिप्पणी यशस्वीरीत्या जोडली गेली';

  @override
  String get failedToAddComment => 'टिप्पणी जोडण्यात अयशस्वी';

  @override
  String get grievanceDetails => 'तक्रार तपशील';

  @override
  String get status => 'स्थिती';

  @override
  String get submitFeedback => 'प्रतिसाद सबमिट करा';

  @override
  String get selectRating => 'रेटिंग निवडा';

  @override
  String get feedback => 'प्रतिसाद';

  @override
  String get pleaseProvideRating => 'कृपया रेटिंग द्या';

  @override
  String get feedbackSubmitted => 'आपला प्रतिसाद सबमिट केला गेला आहे';

  @override
  String get failedToLoadGrievance => 'तक्रार लोड करण्यात अयशस्वी';

  @override
  String get userHistory => 'वापरकर्ता इतिहास';

  @override
  String get userNotFound => 'वापरकर्ता सापडला नाही';

  @override
  String get noGrievancesFound => 'कोणतीही तक्रार आढळली नाही';

  @override
  String get noGrievances => 'कोणतीही तक्रार नाही';

  @override
  String get noGrievancesMessage =>
      'प्रदर्शित करण्यासाठी कोणत्याही तक्रारी नाहीत.';

  @override
  String get retry => 'पुन्हा प्रयत्न करा';

  @override
  String get filterByStatus => 'स्थितीनुसार फिल्टर करा';

  @override
  String get filterByPriority => 'प्राधान्यानुसार फिल्टर करा';

  @override
  String get filterByArea => 'क्षेत्रानुसार फिल्टर करा';

  @override
  String get filterBySubject => 'विषयानुसार फिल्टर करा';

  @override
  String get reassign => 'पुन्हा नेमून द्या';

  @override
  String get escalate => 'एस्केलेट करा';

  @override
  String get updateStatus => 'स्थिती अद्यतनित करा';

  @override
  String get viewDetails => 'तपशील पहा';

  @override
  String get reassignGrievance => 'तक्रार पुन्हा नेमून द्या';

  @override
  String get selectAssignee => 'नेमणूकधारक निवडा';

  @override
  String get selectStatus => 'स्थिती निवडा';

  @override
  String get update => 'अद्यतनित करा';

  @override
  String get noComplaints => 'तक्रारी नाहीत';

  @override
  String get noComplaintsMessage => 'दाखवण्यासाठी कोणत्याही तक्रारी नाहीत.';

  @override
  String get tryAgain => 'पुन्हा प्रयत्न करा';

  @override
  String get reassignComplaint => 'तक्रार पुनः नियुक्त करा';

  @override
  String get escalateComplaint => 'तक्रार वाढवा';

  @override
  String get userIdRequired => 'वापरकर्ता आयडी आवश्यक आहे';

  @override
  String get noConfigs => 'कॉन्फिगरेशन नाहीत';

  @override
  String get noConfigsMessage =>
      'प्रदर्शित करण्यासाठी कोणतेही कॉन्फिगरेशन नाहीत. खाली एक जोडा.';

  @override
  String get addConfig => 'कॉन्फिगरेशन जोडा';

  @override
  String get editConfig => 'कॉन्फिगरेशन संपादित करा';

  @override
  String get configKey => 'कॉन्फिगरेशन की';

  @override
  String get configValue => 'कॉन्फिगरेशन व्हॅल्यू';

  @override
  String get configCannotBeEmpty => 'की आणि व्हॅल्यू रिक्त असू शकत नाहीत';

  @override
  String get configValueCannotBeEmpty => 'व्हॅल्यू रिक्त असू शकत नाही';

  @override
  String get configAddedSuccess => 'कॉन्फिगरेशन यशस्वीरित्या जोडले';

  @override
  String get configUpdatedSuccess => 'कॉन्फिगरेशन यशस्वीरित्या अपडेट केले';

  @override
  String get track_grievances => 'आपल्या तक्रारी ट्रॅक करा';

  @override
  String get no_grievances => 'अजून कोणतीही तक्रार नाही';

  @override
  String get no_grievances_message =>
      'सुरुवात करण्यासाठी आपली पहिली तक्रार नोंदवा';

  @override
  String get submit_grievance => 'तक्रार नोंदवा';

  @override
  String get your_grievances => 'आपल्या तक्रारी';

  @override
  String get please_login => 'कृपया लॉगिन करा';

  @override
  String get addUser => 'वापरकर्ता जोडा';

  @override
  String get role => 'भूमिका';

  @override
  String get add => 'जोडा';

  @override
  String get userAddedSuccess => 'वापरकर्ता यशस्वीरित्या जोडला गेला';

  @override
  String get failedToAddUser => 'वापरकर्ता जोडण्यात अयशस्वी';

  @override
  String get editUser => 'वापरकर्ता संपादित करा';

  @override
  String get deleteUser => 'वापरकर्ता हटवा';

  @override
  String get userUpdatedSuccess => 'वापरकर्ता यशस्वीरित्या अद्यतनित केला गेला';

  @override
  String get failedToUpdateUser => 'वापरकर्ता अद्यतनित करण्यात अयशस्वी';

  @override
  String get deleteUserConfirmation => 'आपण खरोखर हा वापरकर्ता हटवू इच्छिता?';

  @override
  String get userDeletedSuccess => 'वापरकर्ता यशस्वीरित्या हटविला गेला';

  @override
  String get delete => 'हटवा';

  @override
  String get failedToDeleteUser => 'वापरकर्ता हटविण्यात अयशस्वी';

  @override
  String get manageUsers => 'वापरकर्त्यांचे व्यवस्थापन करा';

  @override
  String get noUsers => 'कोणतेही वापरकर्ते नाहीत';

  @override
  String get noUsersMessage => 'दाखविण्यासाठी कोणतेही वापरकर्ते नाहीत.';

  @override
  String get noEmail => 'ईमेल नाही';

  @override
  String get loading => 'लॉगिन प्रक्रिया सुरू आहे...';

  @override
  String get viewgrievanceetails => 'View Grievances';

  @override
  String get assignGrievance => 'तक्रार सोपवा';

  @override
  String get rejectGrievance => 'तक्रार नाकारावी';

  @override
  String get rejectionReason => 'नकाराचे कारण';

  @override
  String get reject => 'नाकारावे';

  @override
  String get assignedGrievances => 'सोपवलेल्या तक्रारी';

  @override
  String get noAssigned => 'कोणत्याही तक्रारी सोपवलेल्या नाहीत';

  @override
  String get noAssignedMessage =>
      'आपल्याला कोणत्याही तक्रारी सोपवलेल्या नाहीत.';

  @override
  String get upload => 'अपलोड करा';

  @override
  String get uploadWorkproof => 'कामाचा पुरावा अपलोड करा';

  @override
  String get guest => 'पाहुणा';

  @override
  String get invalidRole => 'अवैध भूमिका';

  @override
  String get profile => 'प्रोफाइल';

  @override
  String get logout => 'लॉगआउट';

  @override
  String get logoutFailed => 'लॉगआउट अयशस्वी';

  @override
  String get notifications => 'सूचना';

  @override
  String get save => 'जतन करा';

  @override
  String get appVersion => 'अ‍ॅप आवृत्ती';

  @override
  String get about => 'बद्दल';

  @override
  String get contactSupport => 'समर्थनाशी संपर्क करा';

  @override
  String get faqs => 'वारंवार विचारले जाणारे प्रश्न';

  @override
  String get helpSupport => 'मदत व समर्थन';

  @override
  String get viewPrivacyPolicyprivacySecurity =>
      'गोपनीयता धोरण / गोपनीयता आणि सुरक्षा पहा';

  @override
  String get enableNotifications => 'सूचना सक्षम करा';

  @override
  String get account => 'खाते';

  @override
  String get privacySecurity => 'गोपनीयता आणि सुरक्षा';

  @override
  String get viewPrivacyPolicy => 'गोपनीयता धोरण पहा';

  @override
  String get invalidEmail => 'अवैध ईमेल';

  @override
  String get nameRequired => 'नाव आवश्यक आहे';

  @override
  String get emailRequired => 'ईमेल आवश्यक आहे';

  @override
  String get passwordRequired => 'पासवर्ड आवश्यक आहे';

  @override
  String get recentComplaints => 'अलीकडील तक्रारी';

  @override
  String get filterByPeriod => 'कालावधीप्रमाणे फिल्टर करा';

  @override
  String get totalComplaints => 'एकूण तक्रारी';

  @override
  String get day => 'दिवस';

  @override
  String get week => 'आठवडा';

  @override
  String get month => 'महिना';

  @override
  String get year => 'वर्ष';

  @override
  String get allTime => 'संपूर्ण वेळ';

  @override
  String get complaintStatusOverview => 'तक्रार स्थितीचा आढावा';

  @override
  String get grievanceTrend => 'तक्रारींचा कल';

  @override
  String get numberOfGrievances => 'तक्रारींची संख्या';

  @override
  String get timePeriod => 'कालावधी';

  @override
  String get deptWiseDistribution => 'विभागनिहाय वितरण';

  @override
  String get department => 'विभाग';

  @override
  String get slaMetrics => 'SLA मेट्रिक्स';

  @override
  String get slaDays => 'SLA दिवस';

  @override
  String get complianceRate => 'अनुपालन दर';

  @override
  String get avgResolutionTime => 'सरासरी निराकरण वेळ';

  @override
  String get exportPDF => 'PDF निर्यात करा';

  @override
  String get exportCSV => 'CSV निर्यात करा';

  @override
  String get exportExcel => 'Excel निर्यात करा';

  @override
  String get reportExported => 'रिपोर्ट निर्यात झाला';

  @override
  String get errorExportingReport => 'रिपोर्ट निर्यात करताना त्रुटी';

  @override
  String get viewAuditLogs => 'ऑडिट लॉग पाहा';

  @override
  String get complaintManagement => 'तक्रार व्यवस्थापन';

  @override
  String get manageConfigs => 'कॉन्फिगरेशन व्यवस्थापित करा';

  @override
  String get manageSubjects => 'विषय व्यवस्थापन';

  @override
  String get manageAreas => 'क्षेत्र व्यवस्थापित करा';

  @override
  String get reports => 'अहवाल';

  @override
  String get assignedList => 'निर्धारित तक्रारी';

  @override
  String get announcements => 'जाहिराती';

  @override
  String get privacyPolicy => 'गोपनीयता धोरण';
}


=== Folder: models ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\comment_model.dart ---
// lib/models/comment_model.dart
class Comment {
  final int id;
  final int grievanceId;
  final int userId;
  final String? commentText;
  final DateTime createdAt;

  Comment({
    required this.id,
    required this.grievanceId,
    required this.userId,
    this.commentText,
    required this.createdAt,
  });

  factory Comment.fromJson(Map<String, dynamic> json) {
    return Comment(
      id: json['id'],
      grievanceId: json['grievance_id'],
      userId: json['user_id'],
      commentText: json['comment_text'] ?? '',
      createdAt: DateTime.parse(json['created_at']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'grievance_id': grievanceId,
      'user_id': userId,
      'comment_text': commentText,
      'created_at': createdAt.toIso8601String(),
    };
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\grievance_model.dart ---
import 'package:main_ui/models/comment_model.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/models/master_data_model.dart';

class Assignee {
  final String? name;

  Assignee({this.name});

  factory Assignee.fromJson(Map<String, dynamic> json) {
    return Assignee(
      name: json['name'] as String?,
    );
  }
}

class Grievance {
  final int id;
  final String complaintId;
  final int? citizenId;
  final int? subjectId;
  final int? areaId;
  final String title;
  final String description;
  final String? wardNumber;
  final String? status;
  final String? priority;
  final int? assignedTo;
  final int? assignedBy;
  final String? rejectionReason;
  final DateTime? resolvedAt;
  final DateTime createdAt;
  final DateTime updatedAt;
  final double? latitude;
  final double? longitude;
  final String? address;
  final int escalationLevel;
  final int? feedbackRating;
  final String? feedbackText;
  final User? citizen;
  final User? assignee;
  final MasterSubject? subject;
  final MasterArea? area;
  final List<GrievanceAttachment>? attachments; // From old version
  final List<Comment>? comments; // From old version

  Grievance({
    required this.id,
    required this.complaintId,
    this.citizenId,
    this.subjectId,
    this.areaId,
    required this.title,
    required this.description,
    this.wardNumber,
    this.status,
    this.priority,
    this.assignedTo,
    this.assignedBy,
    this.rejectionReason,
    this.resolvedAt,
    required this.createdAt,
    required this.updatedAt,
    this.latitude,
    this.longitude,
    this.address,
    required this.escalationLevel,
    this.feedbackRating,
    this.feedbackText,
    this.citizen,
    this.assignee,
    this.subject,
    this.area,
    this.attachments,
    this.comments,
  });

  factory Grievance.fromJson(Map<String, dynamic> json) {
    return Grievance(
      id: json['id'] as int,
      complaintId: json['complaint_id'] as String,
      citizenId: json['citizen_id'] as int?,
      subjectId: json['subject_id'] as int?,
      areaId: json['area_id'] as int?,
      title: json['title'] as String,
      description: json['description'] as String,
      wardNumber: json['ward_number'] as String?,
      status: json['status'] as String?,
      priority: json['priority'] as String?,
      assignedTo: json['assigned_to'] != null ? json['assigned_to'] as int : null, // Handle null
      assignedBy: json['assigned_by'] != null ? json['assigned_by'] as int : null, // Handle null
      rejectionReason: json['rejection_reason'] as String?,
      resolvedAt: json['resolved_at'] != null
          ? DateTime.parse(json['resolved_at'] as String)
          : null,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      latitude: json['latitude'] is double ? json['latitude'] : null,
      longitude: json['longitude'] is double ? json['longitude'] : null,
      address: json['address'] as String?,
      escalationLevel: json['escalation_level'] as int? ?? 0,
      feedbackRating: json['feedback_rating'] as int?,
      feedbackText: json['feedback_text'] as String?,
      citizen: json['citizen'] != null
          ? User.fromJson(json['citizen'] as Map<String, dynamic>)
          : null,
      assignee: json['assignee'] != null
          ? User.fromJson(json['assignee'] as Map<String, dynamic>)
          : null,
      subject: json['subject'] != null
          ? MasterSubject.fromJson(json['subject'] as Map<String, dynamic>)
          : null,
      area: json['area'] != null
          ? MasterArea.fromJson(json['area'] as Map<String, dynamic>)
          : null,
      attachments: json['attachments'] != null
          ? (json['attachments'] as List).map((a) => GrievanceAttachment.fromJson(a)).toList()
          : null,
      comments: json['comments'] != null
          ? (json['comments'] as List).map((c) => Comment.fromJson(c)).toList()
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'complaint_id': complaintId,
      'citizen_id': citizenId,
      'subject_id': subjectId,
      'area_id': areaId,
      'title': title,
      'description': description,
      'ward_number': wardNumber,
      'status': status,
      'priority': priority,
      'assigned_to': assignedTo,
      'assigned_by': assignedBy,
      'rejection_reason': rejectionReason,
      'resolved_at': resolvedAt?.toIso8601String(),
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'latitude': latitude,
      'longitude': longitude,
      'address': address,
      'escalation_level': escalationLevel,
      'feedback_rating': feedbackRating,
      'feedback_text': feedbackText,
      'citizen': citizen?.toJson(),
      'assignee': assignee?.toJson(),
      'subject': subject?.toJson(),
      'area': area?.toJson(),
      'attachments': attachments?.map((a) => a.toJson()).toList(),
      'comments': comments?.map((c) => c.toJson()).toList(),
    };
  }
}

class GrievanceAttachment {
  final int id;
  final int grievanceId;
  final String filePath;
  final String fileType;
  final DateTime uploadedAt;

  GrievanceAttachment({
    required this.id,
    required this.grievanceId,
    required this.filePath,
    required this.fileType,
    required this.uploadedAt,
  });

  factory GrievanceAttachment.fromJson(Map<String, dynamic> json) {
    return GrievanceAttachment(
      id: json['id'] ?? 0,
      grievanceId: json['grievance_id'] ?? 0,
      filePath: json['file_path'] ?? '',
      fileType: json['file_type'] ?? '',
      uploadedAt: DateTime.parse(json['uploaded_at'] ?? DateTime.now().toIso8601String()),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'grievance_id': grievanceId,
      'file_path': filePath,
      'file_type': fileType,
      'uploaded_at': uploadedAt.toIso8601String(),
    };
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\kpi_model.dart ---
class KpiData {
  final Map<String, int> totalComplaints;
  final Map<String, int> statusOverview;
  final Map<String, int> deptWise;
  final Map<String, dynamic> slaMetrics;
  final Map<String, int> staffPerformance;

  KpiData({
    required this.totalComplaints,
    required this.statusOverview,
    required this.deptWise,
    required this.slaMetrics,
    required this.staffPerformance,
  });

  factory KpiData.fromJson(Map<String, dynamic> json) {
    return KpiData(
      totalComplaints: Map<String, int>.from(json['total_complaints'] ?? {}),
      statusOverview: Map<String, int>.from(json['status_overview'] ?? {}),
      deptWise: Map<String, int>.from(json['dept_wise'] ?? {}),
      slaMetrics: Map<String, dynamic>.from(json['sla_metrics'] ?? {}),
      staffPerformance: Map<String, int>.from(json['staff_performance'] ?? {}),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\master_data_model.dart ---
class MasterSubject {
  final int id;
  final String name;
  final String? description;

  MasterSubject({
    required this.id,
    required this.name,
    this.description,
  });

  factory MasterSubject.fromJson(Map<String, dynamic> json) {
    return MasterSubject(
      id: json['id'] is String ? int.parse(json['id']) : json['id'] as int,
      name: json['name'] as String,
      description: json['description'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
    };
  }
}

class MasterArea {
  final int id;
  final String name;
  final String? description;

  MasterArea({
    required this.id,
    required this.name,
    this.description,
  });

  factory MasterArea.fromJson(Map<String, dynamic> json) {
    return MasterArea(
      id: json['id'] is String ? int.parse(json['id']) : json['id'] as int,
      name: json['name'] as String,
      description: json['description'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
    };
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\report_model.dart ---
class ReportData {
  final Map<String, int> totalComplaints;
  final Map<String, int> statusOverview;
  final Map<String, int> deptWise;
  final Map<String, dynamic> slaMetrics;
  final Map<String, int> staffPerformance;
  final double resolutionRate;
  final Map<String, dynamic> pendingAging;
  final double slaCompliance;

  ReportData({
    required this.totalComplaints,
    required this.statusOverview,
    required this.deptWise,
    required this.slaMetrics,
    required this.staffPerformance,
    required this.resolutionRate,
    required this.pendingAging,
    required this.slaCompliance,
  });

  factory ReportData.fromJson(Map<String, dynamic> json) {
    return ReportData(
      totalComplaints: Map<String, int>.from(json['total_complaints'] ?? {}),
      statusOverview: Map<String, int>.from(json['status_overview'] ?? {}),
      deptWise: Map<String, int>.from(json['dept_wise'] ?? {}),
      slaMetrics: Map<String, dynamic>.from(json['sla_metrics'] ?? {}),
      staffPerformance: Map<String, int>.from(json['staff_performance'] ?? {}),
      resolutionRate: json['resolution_rate']?.toDouble() ?? 0.0,
      pendingAging: Map<String, dynamic>.from(json['pending_aging'] ?? {}),
      slaCompliance: json['sla_compliance']?.toDouble() ?? 0.0,
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\user_model.dart ---
class User {
  final int id;
  final String? name;
  final String? email;
  final String? phoneNumber;
  final String? role;
  final int? departmentId;
  final String? address;
  final String? profilePicture;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final DateTime? lastLogin;
  final bool twoFactorEnabled;
  final bool isActive;

  User({
    required this.id,
    this.name,
    this.email,
    this.phoneNumber,
    this.role,
    this.departmentId,
    this.address,
    this.profilePicture,
    this.createdAt,
    this.updatedAt,
    this.lastLogin,
    this.twoFactorEnabled = false,
    this.isActive = true,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      name: json['name'] ?? 'Unknown User',
      email: json['email'],
      phoneNumber: json['phone_number'],
      role: json['role'] ?? 'Unknown',
      departmentId: json['department_id'],
      address: json['address'],
      profilePicture: json['profile_picture'],
      createdAt: json['created_at'] != null ? DateTime.parse(json['created_at']) : null,
      updatedAt: json['updated_at'] != null ? DateTime.parse(json['updated_at']) : null,
      lastLogin: json['last_login'] != null ? DateTime.parse(json['last_login']) : null,
      twoFactorEnabled: json['two_factor_enabled'] ?? false,
      isActive: json['is_active'] ?? true,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'email': email,
      'phone_number': phoneNumber,
      'role': role,
      'department_id': departmentId,
      'address': address,
      'profile_picture': profilePicture,
      'created_at': createdAt?.toIso8601String(),
      'updated_at': updatedAt?.toIso8601String(),
      'last_login': lastLogin?.toIso8601String(),
      'two_factor_enabled': twoFactorEnabled,
      'is_active': isActive,
    };
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\models\workproof_model.dart ---
// lib/models/workproof_model.dart
class Workproof {
  final int id;
  final int grievanceId;
  final int uploadedBy;
  final String filePath;
  final String? notes;
  final DateTime uploadedAt;

  Workproof({
    required this.id,
    required this.grievanceId,
    required this.uploadedBy,
    required this.filePath,
    this.notes,
    required this.uploadedAt,
  });

  factory Workproof.fromJson(Map<String, dynamic> json) {
    return Workproof(
      id: json['id'],
      grievanceId: json['grievance_id'],
      uploadedBy: json['uploaded_by'],
      filePath: json['file_path'],
      notes: json['notes'],
      uploadedAt: DateTime.parse(json['uploaded_at']),
    );
  }
}

=== Folder: providers ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\admin_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:dio/dio.dart';
import '../models/grievance_model.dart';
import '../models/kpi_model.dart';
import '../services/api_service.dart';

// Define the apiServiceProvider for dependency injection
final apiServiceProvider = Provider<ApiService>((ref) => ApiService());

// Define a Config model
class Config {
  final String key;
  final String value;

  Config({required this.key, required this.value});

  factory Config.fromJson(Map<String, dynamic> json) {
    return Config(
      key: json['key'] ?? '',
      value: json['value'] ?? '',
    );
  }
}

class AdminState {
  final KpiData? kpiData;
  final List<Grievance> grievances;
  final List<Config> configs; // Added for config management
  final String? error;

  AdminState({
    this.kpiData,
    this.grievances = const [],
    this.configs = const [], // Initialize empty configs list
    this.error,
  });

  AdminState copyWith({
    KpiData? kpiData,
    List<Grievance>? grievances,
    List<Config>? configs,
    String? error,
  }) {
    return AdminState(
      kpiData: kpiData ?? this.kpiData,
      grievances: grievances ?? this.grievances,
      configs: configs ?? this.configs,
      error: error ?? this.error,
    );
  }
}

class AdminNotifier extends StateNotifier<AdminState> {
  final ApiService _apiService;

  AdminNotifier(this._apiService) : super(AdminState()) {
    getConfigs(); // Fetch configs on initialization
  }

  Future<void> fetchAdvancedKPIs({String timePeriod = 'all'}) async {
    try {
      final response = await ApiService.get('/admins/reports/kpis/advanced?time_period=$timePeriod');
      final kpiData = KpiData.fromJson(response.data);
      state = state.copyWith(kpiData: kpiData, error: null);
      print(response.data);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  Future<List<Grievance>> getAllGrievances({String? status}) async {
    try {
      final response = await ApiService.get('/admins/grievances/all');
      final grievances =
          (response.data as List).map((g) => Grievance.fromJson(g)).toList();
      state = state.copyWith(grievances: grievances, error: null);
      

      return grievances;
    } catch (e) {
      state = state.copyWith(grievances: [], error: e.toString());
      return [];
    }
  }

  Future<void> escalateGrievance(int grievanceId) async {
    try {
      await ApiService.post('/admins/grievances/$grievanceId/escalate', {});
      state = state.copyWith(error: null);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  Future<void> reassignGrievance(int grievanceId, int assigneeId) async {
    try {
      await ApiService
          .post('/admins/reassign/$grievanceId', {'assigned_to': assigneeId});
      state = state.copyWith(error: null);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  Future<void> updateGrievanceStatus(int grievanceId, String status) async {
    try {
      await ApiService.post('/grievances/$grievanceId/status', {'status': status});
      state = state.copyWith(error: null);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  Future<List<Grievance>> getCitizenHistory(int userId) async {
    try {
      final response = await ApiService.get('/admins/users/$userId/history');
      final grievances =
          (response.data as List).map((g) => Grievance.fromJson(g)).toList();
      state = state.copyWith(grievances: grievances, error: null);
      return grievances;
    } catch (e) {
      state = state.copyWith(grievances: [], error: e.toString());
      return [];
    }
  }

  Future<List<int>> generateReport(String filter, String format) async {
    try {
      // Note: For web, handle ResponseType.bytes (e.g., base64 or blob for downloads)
      final response = await ApiService.get('/admins/reports?filter_type=$filter&format=$format', responseType: ResponseType.bytes);
      state = state.copyWith(error: null);
      return response.data;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return [];
    }
  }

  // New methods for config management
  Future<void> getConfigs() async {
    try {
      state = state.copyWith(error: null); // Clear previous errors
      final response = await ApiService.get('/admins/configs');
      final configs =
          (response.data as List).map((json) => Config.fromJson(json)).toList();
      state = state.copyWith(configs: configs, error: null);
    } catch (e) {
      state = state.copyWith(error: 'Failed to fetch configs: $e');
    }
  }

  Future<void> addConfig(String key, String value) async {
    try {
      state = state.copyWith(error: null); // Clear previous errors
      await ApiService.post('/admins/configs', {'key': key, 'value': value});
      await getConfigs(); // Refresh configs after adding
    } catch (e) {
      state = state.copyWith(error: 'Failed to add config: $e');
    }
  }
}

final adminProvider = StateNotifierProvider<AdminNotifier, AdminState>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return AdminNotifier(apiService);
});
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\api_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/api_service.dart';

final apiServiceProvider = Provider<ApiService>((ref) {
  return ApiService();
});
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\auth_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/user_model.dart';
import '../services/auth_service.dart';

class AuthNotifier extends StateNotifier<User?> {
  AuthNotifier() : super(null);

  Future<void> loginWithGoogle() async {
    try {
      await AuthService.googleLogin();
      await _fetchUserAndUpdateState();
    } catch (e) {
      print('Google login failed: $e');
      rethrow;
    }
  }

  Future<void> register(String name, String email, String password) async {
    try {
      await AuthService.register(name, email, password);
      await _fetchUserAndUpdateState();
    } catch (e) {
      print('Registration failed: $e');
      rethrow;
    }
  }

  Future<void> loginWithEmail(String email, String password) async {
    try {
      await AuthService.passwordLogin(email, password);
      await _fetchUserAndUpdateState();
    } catch (e) {
      print('Login failed: $e');
      rethrow;
    }
  }

  Future<void> loginWithOtp(String phoneNumber, String otp) async {
    try {
      await AuthService.verifyOtp(phoneNumber, otp);
      await _fetchUserAndUpdateState();
    } catch (e) {
      print('OTP login failed: $e');
      rethrow;
    }
  }

  Future<void> requestOtp(String phoneNumber) async {
    try {
      await AuthService.requestOtp(phoneNumber);
    } catch (e) {
      print('OTP request failed: $e');
      rethrow;
    }
  }

  Future<void> logout() async {
    print('Logging out');
    await AuthService.logout();
    state = null;
  }

  Future<void> checkAuth() async {
    final user = await AuthService.getCurrentUser();
    if (user != null) {
      print('Found authenticated user: ${user.name}');
      state = user;
    } else {
      print('No authenticated user found');
      state = null;
    }
  }

  Future<void> processNewToken(String token) async {
    try {
      await AuthService.storeToken(token);
      await _fetchUserAndUpdateState();
    } catch (e) {
      print('Error processing token: $e');
      rethrow;
    }
  }

  Future<void> _fetchUserAndUpdateState() async {
    try {
      final userData = await AuthService.getCurrentUser();
      print('Fetched user data: ${userData?.toJson()}');
      state = userData;
    } catch (e) {
      print('Error fetching user data: $e. Logging out.');
      await logout();
    }
  }
}

final authProvider = StateNotifierProvider<AuthNotifier, User?>((ref) => AuthNotifier());
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\citizen_history_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/services/grievance_service.dart';

final citizenHistoryProvider = FutureProvider.family<List<Grievance>, int>((ref, userId) async {
  return await GrievanceService().getGrievancesByUserId(userId);
});
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\comment_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/services/grievance_service.dart';
import 'package:main_ui/models/comment_model.dart';
class CommentNotifier extends StateNotifier<List<Comment>> {
  final int _grievanceId;
  final GrievanceService _service;

  CommentNotifier(this._grievanceId, this._service) : super([]);

  Future<void> fetchComments() async {
    try {
      final grievance = await _service.getGrievanceDetails(_grievanceId);
      state = grievance.comments ?? [];
    } catch (e) {
      print('Error fetching comments: $e');
      state = [];
    }
  }

  Future<void> addComment(String content) async {
    try {
      await _service.addComment(_grievanceId, content);
      await fetchComments();
    } catch (e) {
      print('Error adding comment: $e');
    }
  }
}

final commentProvider =
    StateNotifierProvider.family<CommentNotifier, List<Comment>, int>(
  (ref, grievanceId) => CommentNotifier(grievanceId, GrievanceService()),
);
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\grievance_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/grievance_model.dart';
import '../services/grievance_service.dart';

// Provider for fetching citizen grievance history by user ID
final citizenHistoryProvider = FutureProvider.family<List<Grievance>, int>((ref, userId) async {
  final grievanceService = GrievanceService();
  return await grievanceService.getGrievancesByUserId(userId);
});

// StateNotifier for managing grievance lists (e.g., my grievances, new grievances, assigned grievances)
class GrievanceNotifier extends StateNotifier<List<Grievance>> {
  GrievanceNotifier() : super([]);
  bool _isFetching = false;

  final GrievanceService _service = GrievanceService();

  Future<void> fetchMyGrievances() async {
    if (_isFetching) return; // Skip if already fetching
    _isFetching = true;
    try {
      state = await _service.getMyGrievances();
      print('Grievances updated: ${state.length} items');
    } catch (e) {
      print('Error fetching grievances: $e');
      state = [];
      rethrow;
    } finally {
      _isFetching = false;
    }
  }

  Future<void> fetchNewGrievances() async {
    try {
      state = await _service.getNewGrievances();
      print('New grievances fetched: ${state.length} items');
    } catch (e) {
      print('Error fetching new grievances: $e');
      state = [];
      rethrow;
    }
  }

  Future<void> fetchAssignedGrievances() async {
    try {
      state = await _service.getAssignedGrievances();
      print('Assigned grievances fetched: ${state.length} items');
    } catch (e) {
      print('Error fetching assigned grievances: $e');
      state = [];
      rethrow;
    }
  }
}

// Provider for the GrievanceNotifier
final grievanceProvider = StateNotifierProvider<GrievanceNotifier, List<Grievance>>((ref) {
  return GrievanceNotifier();
});
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\locale_provider.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/storage_service.dart';

// Define a StateNotifier to manage locale state
class LocaleNotifier extends StateNotifier<Locale> {
  LocaleNotifier() : super(const Locale('en')) {
    _loadLocale();
  }

  Future<void> _loadLocale() async {
    final savedLocale = await StorageService.getLocale();
    if (savedLocale != null) {
      state = Locale(savedLocale);
    }
  }

  void setLocale(Locale locale) {
    state = locale;
    StorageService.saveLocale(locale.languageCode);
  }
}

// Define the locale provider
final localeNotifierProvider = StateNotifierProvider<LocaleNotifier, Locale>((ref) => LocaleNotifier());
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\master_data_provider.dart ---
// lib/providers/master_data_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/master_data_model.dart';
import '../services/master_data_service.dart';

final subjectsProvider = FutureProvider<List<MasterSubject>>((ref) async {
  return MasterDataService.getSubjects();
});

final areasProvider = FutureProvider<List<MasterArea>>((ref) async {
  return MasterDataService.getAreas();
});
--- File: D:\Company_Data\PCMCApp\main_ui\lib\providers\user_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/services/auth_service.dart';
import 'package:main_ui/services/api_service.dart';

// Notifier for the current authenticated user
class UserNotifier extends StateNotifier<User?> {
  UserNotifier(this.ref) : super(null) {
    fetchCurrentUser();
  }

  final Ref ref;

  Future<void> fetchCurrentUser() async {
    try {
      final user = await AuthService.getCurrentUser();
      state = user;
    } catch (e) {
      print('Error fetching current user: $e');
      state = null;
    }
  }

  Future<void> refreshUser() async {
    await fetchCurrentUser();
  }

  Future<void> updateUser() async {
    try {
      final response = await ApiService.get('/settings/user'); // Fetch updated user data
      if (response != null && response.data != null) {
        state = User.fromJson(response.data); // Update state with new user data
      }
    } catch (e) {
      print('Failed to update user: $e');
      throw e; // Let UI handle errors
    }
  }

  void setUser(User? user) {
    state = user;
  }
}

// Define the user provider
final userNotifierProvider = StateNotifierProvider<UserNotifier, User?>((ref) {
  return UserNotifier(ref);
});

// Provider for managing a list of users (for admin)
final usersProvider = StateNotifierProvider<UsersNotifier, List<User>>((ref) {
  return UsersNotifier(ref);
});

// Notifier for managing a list of users
class UsersNotifier extends StateNotifier<List<User>> {
  UsersNotifier(this.ref) : super([]) {
    fetchUsers(); // Initialize by fetching users
  }

  final Ref ref;

  // Fetch all users from the backend
  Future<void> fetchUsers() async {
    try {
      final users = await ApiService.getUsers(); // Assume ApiService method
      state = users ?? [];
    } catch (e) {
      print('Error fetching users: $e');
      state = [];
    }
  }

  // Add or update a user
  Future<void> addUser(Map<String, dynamic> userData) async {
    try {
      // Convert dynamic values to strings for ApiService.addUpdateUser
      final stringUserData = userData.map((key, value) => MapEntry(key, value.toString()));
      await ApiService.addUpdateUser(stringUserData);
      await fetchUsers(); // Refresh the user list
    } catch (e) {
      print('Error adding user: $e');
      throw e; // Let UI handle errors
    }
  }

  // Update an existing user
  Future<void> updateUser(int userId, Map<String, dynamic> userData) async {
    try {
      // Include user ID in the data map and convert values to strings
      final stringUserData = {
        'id': userId.toString(),
        ...userData.map((key, value) => MapEntry(key, value.toString())),
      };
      await ApiService.addUpdateUser(stringUserData);
      await fetchUsers(); // Refresh the user list
      // If the updated user is the current user, refresh userNotifierProvider
      if (ref.read(userNotifierProvider)?.id == userId) {
        await ref.read(userNotifierProvider.notifier).refreshUser();
      }
    } catch (e) {
      print('Error updating user: $e');
      throw e;
    }
  }

  // Delete a user
  Future<void> deleteUser(int userId) async {
    try {
      await ApiService.deleteUser(userId);
      await fetchUsers(); // Refresh the user list
      // If the deleted user is the current user, clear userNotifierProvider
      if (ref.read(userNotifierProvider)?.id == userId) {
        ref.read(userNotifierProvider.notifier).setUser(null);
      }
    } catch (e) {
      print('Error deleting user: $e');
      throw e;
    }
  }
}

=== Folder: screens ===


=== Folder: screens\admin ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\all_users_history.dart ---

import 'package:flutter/material.dart';
import 'package:main_ui/services/api_service.dart'; // Import your API service
import 'package:main_ui/models/user_model.dart'; // Adjust imports as needed
import 'package:main_ui/models/grievance_model.dart';

class AllUsersHistoryScreen extends StatefulWidget {
  const AllUsersHistoryScreen({super.key});

  @override
  State<AllUsersHistoryScreen> createState() => _AllUsersHistoryScreenState();
}

class _AllUsersHistoryScreenState extends State<AllUsersHistoryScreen> {
  List<dynamic> usersHistory = [];
  bool isLoading = true;
  String? error;

  @override
  void initState() {
    super.initState();
    fetchAllHistories();
  }

  Future<void> fetchAllHistories() async {
    try {
      final response = await ApiService.dio.get('/admins/users/history');
      setState(() {
        usersHistory = response.data;
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        error = 'Failed to load histories: $e';
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold( // Add Scaffold here
      appBar: AppBar(
        title: const Text('All Users History'),
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : error != null
              ? Center(child: Text(error!))
              : ListView.builder(
                  itemCount: usersHistory.length,
                  itemBuilder: (context, index) {
                    final userData = usersHistory[index];
                    final user = User.fromJson(userData['user']); // Parse user
                    final grievances = (userData['grievances'] as List)
                        .map((g) => Grievance.fromJson(g))
                        .toList();

                    return ExpansionTile(
                      title: Text('${user.name} (${user.email})'),
                      children: grievances
                          .map((g) => ListTile(
                                title: Text(g.title),
                                subtitle: Text(g.status ?? 'Unknown'),
                              ))
                          .toList(),
                    );
                  },
                ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\audit_logs.dart ---
// lib/screens/admin/audit_logs.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../services/api_service.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/empty_state.dart';

class AuditLogs extends ConsumerStatefulWidget {
  const AuditLogs({super.key});

  @override
  ConsumerState<AuditLogs> createState() => _AuditLogsState();
}

class _AuditLogsState extends ConsumerState<AuditLogs> {
  late Future<List<dynamic>> _logsFuture;

  @override
  void initState() {
    super.initState();
    _logsFuture = _fetchLogs();
  }

  Future<List<dynamic>> _fetchLogs() async {
    final response = await ApiService.get('/admins/audit-logs');
    return response.data as List<dynamic>;
  }

  void _refreshLogs() {
    setState(() {
      _logsFuture = _fetchLogs();
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Audit Logs'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            tooltip: "Refresh Logs",
            onPressed: _refreshLogs,
          ),
        ],
      ),
      body: FutureBuilder<List<dynamic>>(
        future: _logsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return EmptyState(
              icon: Icons.error,
              title: 'Error',
              message: snapshot.error.toString(),
              actionButton: CustomButton(text: 'Retry', onPressed: _refreshLogs),
            );
          }
          final logs = snapshot.data ?? [];
          if (logs.isEmpty) {
            return const EmptyState(
              icon: Icons.history,
              title: 'No Logs',
              message: 'There are no audit logs to display.',
            );
          }

          return ListView.separated(
            padding: const EdgeInsets.all(16),
            itemCount: logs.length,
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemBuilder: (context, index) {
              final log = logs[index];
              return Card(
                elevation: 2,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: ListTile(
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  leading: CircleAvatar(
                    backgroundColor: theme.primaryColor.withValues (alpha:0.15),
                    child: const Icon(Icons.info, color: Colors.black87),
                  ),
                  title: Text(
                    log['action'],
                    style: theme.textTheme.titleMedium,
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Text(
                        "By User: ${log['performed_by']}",
                        style: theme.textTheme.bodySmall,
                      ),
                      const SizedBox(height: 2),
                      Text(
                        "At: ${log['timestamp']}",
                        style: theme.textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\complaint_management.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/models/master_data_model.dart';
import 'package:main_ui/services/user_service.dart';
import 'package:main_ui/services/master_data_service.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/grievance_card.dart';
import 'package:main_ui/providers/admin_provider.dart';

class ComplaintManagement extends ConsumerStatefulWidget {
  const ComplaintManagement({super.key});

  @override
  _ComplaintManagementState createState() => _ComplaintManagementState();
}

class _ComplaintManagementState extends ConsumerState<ComplaintManagement> {
  String? _selectedStatus;
  int? _selectedAreaId;
  int? _selectedSubjectId;
  String? _selectedPriority;
  List<Grievance> _grievances = [];
  List<User> _assignees = [];
  List<MasterArea> _areas = [];
  List<MasterSubject> _subjects = [];
  String? _errorMessage;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<void> _fetchData() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    try {
      // Fetch grievances using adminProvider
      final grievances = await ref.read(adminProvider.notifier).getAllGrievances(
            status: _selectedStatus,
          );
      final assignees = await UserService.getUsers();
      final areas = await MasterDataService.getAreas();
      final subjects = await MasterDataService.getSubjects();
      setState(() {
        _grievances = grievances.where((g) {
          if (_selectedStatus != null && g.status != _selectedStatus) return false;
          if (_selectedPriority != null && g.priority != _selectedPriority) return false;
          if (_selectedAreaId != null && g.area?.id != _selectedAreaId) return false;
          if (_selectedSubjectId != null && g.subject?.id != _selectedSubjectId) return false;
          return true;
        }).toList();
        _assignees = assignees.where((u) => u.role == 'employer').toList();
        _areas = areas;
        _subjects = subjects;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: Text(l10n.appTitle),
          centerTitle: true,
        ),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    if (_errorMessage != null) {
      return Scaffold(
        appBar: AppBar(
          title: Text(l10n.appTitle),
          centerTitle: true,
        ),
        body: EmptyState(
          icon: Icons.error,
          title: l10n.error,
          message: _errorMessage!,
          actionButton: CustomButton(
            text: l10n.retry,
            onPressed: _fetchData,
            icon: Icons.refresh,
          ),
        ),
      );
    }

    if (_grievances.isEmpty) {
      return Scaffold(
        appBar: AppBar(
          title: Text(l10n.appTitle),
          centerTitle: true,
        ),
        body: EmptyState(
          icon: Icons.inbox,
          title: l10n.noComplaints,
          message: l10n.noComplaintsMessage,
          actionButton: CustomButton(
            text: l10n.retry,
            onPressed: _fetchData,
            icon: Icons.refresh,
          ),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.appTitle),
        centerTitle: true,
      ),
      body: Column(
        children: [
          // Filters
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Wrap(
              spacing: 16.0,
              runSpacing: 8.0,
              children: [
                DropdownButton<String>(
                  hint: Text(l10n.filterByStatus),
                  value: _selectedStatus,
                  isExpanded: true,
                  items: ['new', 'in_progress', 'on_hold', 'resolved', 'closed', 'rejected']
                      .map((s) => DropdownMenuItem(value: s, child: Text(s.capitalize())))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _selectedStatus = value);
                    _fetchData();
                  },
                ),
                DropdownButton<String>(
                  hint: Text(l10n.filterByPriority),
                  value: _selectedPriority,
                  isExpanded: true,
                  items: ['low', 'medium', 'high', 'urgent']
                      .map((p) => DropdownMenuItem(value: p, child: Text(p.capitalize())))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _selectedPriority = value);
                    _fetchData();
                  },
                ),
                DropdownButton<int>(
                  hint: Text(l10n.filterByArea),
                  value: _selectedAreaId,
                  isExpanded: true,
                  items: _areas
                      .map((a) => DropdownMenuItem(value: a.id, child: Text(a.name)))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _selectedAreaId = value);
                    _fetchData();
                  },
                ),
                DropdownButton<int>(
                  hint: Text(l10n.filterBySubject),
                  value: _selectedSubjectId,
                  isExpanded: true,
                  items: _subjects
                      .map((s) => DropdownMenuItem(value: s.id, child: Text(s.name)))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _selectedSubjectId = value);
                    _fetchData();
                  },
                ),
              ],
            ),
          ),
          Expanded(
            child: RefreshIndicator(
              onRefresh: _fetchData,
              child: ListView.builder(
                padding: const EdgeInsets.all(16.0),
                itemCount: _grievances.length,
                itemBuilder: (ctx, idx) {
                  final grievance = _grievances[idx];
                  return Card(
                    child: Column(
                      children: [
                        GrievanceCard(grievance: grievance),
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Row(
                            children: [
                              Flexible(
                                child: CustomButton(
                                  text: l10n.reassignComplaint,
                                  onPressed: () => _showReassignDialog(grievance.id),
                                  icon: Icons.person_add,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Flexible(
                                child: CustomButton(
                                  text: l10n.escalateComplaint,
                                  onPressed: () async {
                                    try {
                                      await ref.read(adminProvider.notifier).escalateGrievance(grievance.id);
                                      _fetchData();
                                    } catch (e) {
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(content: Text(e.toString())),
                                      );
                                    }
                                  },
                                  icon: Icons.arrow_upward,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Flexible(
                                child: CustomButton(
                                  text: l10n.updateStatus,
                                  onPressed: () => _showStatusDialog(grievance.id),
                                  icon: Icons.update,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Flexible(
                                child: CustomButton(
                                  text: l10n.viewDetails,
                                  onPressed: () {
                                    if (grievance.id > 0) {
                                      Navigator.pushNamed(
                                        context,
                                        '/citizen/detail',
                                        arguments: grievance.id,
                                      );
                                    } else {
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        const SnackBar(content: Text("Invalid grievance ID")),
                                      );
                                    }
                                  },
                                  icon: Icons.info,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showReassignDialog(int grievanceId) {
    final l10n = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (ctx) {
        int? selectedAssigneeId;
        return AlertDialog(
          title: Text(l10n.reassignComplaint),
          content: DropdownButton<int>(
            hint: Text(l10n.selectAssignee),
            value: selectedAssigneeId,
            isExpanded: true,
            items: _assignees
                .map((u) => DropdownMenuItem(value: u.id, child: Text(u.name ?? "Names Not Found")))
                .toList(),
            onChanged: (value) => setState(() => selectedAssigneeId = value),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(ctx),
              child: Text(l10n.cancel),
            ),
            TextButton(
              onPressed: () async {
                if (selectedAssigneeId != null) {
                  try {
                    await ref.read(adminProvider.notifier).reassignGrievance(grievanceId, selectedAssigneeId!);
                    Navigator.pop(ctx);
                    _fetchData();
                  } catch (e) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text(e.toString())),
                    );
                  }
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(l10n.selectAssignee)),
                  );
                }
              },
              child: Text(l10n.reassignComplaint),
            ),
          ],
        );
      },
    );
  }

  void _showStatusDialog(int grievanceId) {
    final l10n = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (ctx) {
        String? selectedStatus;
        return AlertDialog(
          title: Text(l10n.updateStatus),
          content: DropdownButton<String>(
            hint: Text(l10n.selectStatus),
            value: selectedStatus,
            isExpanded: true,
            items: ['new', 'in_progress', 'on_hold', 'resolved', 'closed', 'rejected']
                .map((s) => DropdownMenuItem(value: s, child: Text(s.capitalize())))
                .toList(),
            onChanged: (value) => setState(() => selectedStatus = value),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(ctx),
              child: Text(l10n.cancel),
            ),
            TextButton(
              onPressed: () async {
                if (selectedStatus != null) {
                  try {
                    await ref.read(adminProvider.notifier).updateGrievanceStatus(grievanceId, selectedStatus!);
                    Navigator.pop(ctx);
                    _fetchData();
                  } catch (e) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text(e.toString())),
                    );
                  }
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(l10n.selectStatus)),
                  );
                }
              },
              child: Text(l10n.updateStatus),
            ),
          ],
        );
      },
    );
  }
}

extension StringExtension on String {
  String capitalize() {
    if (isEmpty) return this;
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\dashboard.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/grievance_card.dart';
import 'package:main_ui/providers/admin_provider.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'dart:io' as io;
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/models/kpi_model.dart';
import 'package:main_ui/providers/auth_provider.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/loading_indicator.dart';
import 'package:main_ui/widgets/navigation_drawer.dart';
import 'dart:convert';
import 'package:universal_html/html.dart' as html;
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';

class Dashboard extends ConsumerStatefulWidget {
  const Dashboard({super.key});

  @override
  _DashboardState createState() => _DashboardState();
}

class _DashboardState extends ConsumerState<Dashboard> {
  String _selectedPeriod = 'all';
  late Future<List<Grievance>> _grievancesFuture;

  @override
  void initState() {
    super.initState();
    _grievancesFuture = ref.read(adminProvider.notifier).getAllGrievances();
    _fetchData();
  }

  Future<void> _fetchData() async {
    try {
      await ref.read(adminProvider.notifier).fetchAdvancedKPIs(timePeriod: _selectedPeriod);
      setState(() {
        _grievancesFuture = ref.read(adminProvider.notifier).getAllGrievances();
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${AppLocalizations.of(context)!.error}: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final adminState = ref.watch(adminProvider);
    final kpiData = adminState.kpiData;
    final theme = Theme.of(context);
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.appTitle),
        centerTitle: true,
        elevation: 2,
      ),
      drawer: const CustomNavigationDrawer(),
      body: RefreshIndicator(
        onRefresh: _fetchData,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildFilterDropdown(theme, loc),
              const SizedBox(height: 20),
              kpiData != null
                  ? Column(
                      children: [
                        _buildKpiCard(theme, kpiData, loc),
                        const SizedBox(height: 20),
                        _buildPieChartCard(theme, kpiData, loc),
                        const SizedBox(height: 20),
                        _buildLineChartCard(theme, kpiData, loc),
                        const SizedBox(height: 20),
                        _buildBarChartCard(theme, kpiData, loc),
                        const SizedBox(height: 20),
                        _buildSlaCard(theme, kpiData, loc),
                        const SizedBox(height: 20),
                        Text(loc.recentComplaints ?? 'Recent Complaints',
                            style: theme.textTheme.titleMedium),
                        const SizedBox(height: 8),
                        _buildRecentComplaints(loc),
                        const SizedBox(height: 24),
                        _buildExportButtons(loc),
                      ],
                    )
                  : EmptyState(
                      icon: Icons.error,
                      title: loc.noGrievances,
                      message: loc.noGrievancesMessage,
                      actionButton: ElevatedButton(
                        onPressed: _fetchData,
                        child: Text(loc.retry),
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFilterDropdown(ThemeData theme, AppLocalizations loc) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        Text(loc.filterByPeriod ?? 'Time Period: ',
            style: theme.textTheme.bodyMedium),
        const SizedBox(width: 8),
        DropdownButton<String>(
          value: _selectedPeriod,
          style: theme.textTheme.bodyMedium,
          items: ['day', 'week', 'month', 'year', 'all']
              .map((period) => DropdownMenuItem(
                    value: period,
                    child: Text(period.capitalize()),
                  ))
              .toList(),
          onChanged: (value) {
            if (value != null) {
              setState(() => _selectedPeriod = value);
              _fetchData();
            }
          },
        ),
      ],
    );
  }

  Widget _buildKpiCard(ThemeData theme, KpiData kpiData, AppLocalizations loc) {
    final totalComplaints = kpiData.totalComplaints ?? {};

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(loc.totalComplaints ?? 'Total Complaints',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 8),
            Wrap(
              spacing: 16,
              runSpacing: 8,
              children: [
                _buildMetricItem(loc.day ?? 'Day', totalComplaints['day'] ?? 0),
                _buildMetricItem(
                    loc.week ?? 'Week', totalComplaints['week'] ?? 0),
                _buildMetricItem(
                    loc.month ?? 'Month', totalComplaints['month'] ?? 0),
                _buildMetricItem(
                    loc.year ?? 'Year', totalComplaints['year'] ?? 0),
                _buildMetricItem(
                    loc.allTime ?? 'All Time', totalComplaints['all'] ?? 0),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMetricItem(String label, int value) {
    return Column(
      children: [
        Text(label, style: const TextStyle(fontSize: 12)),
        Text(
          '$value',
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
      ],
    );
  }

  Widget _buildPieChartCard(ThemeData theme, KpiData kpiData, AppLocalizations loc) {
    final statusOverview = kpiData.statusOverview ?? {};

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(loc.complaintStatusOverview ?? 'Complaint Status Overview',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 8),
            SizedBox(
              height: 220,
              child: statusOverview.isNotEmpty
                  ? PieChart(
                      PieChartData(
                        sections: _buildPieChartSections(statusOverview),
                        centerSpaceRadius: 40,
                        sectionsSpace: 2,
                      ),
                    )
                  : const Center(child: LoadingIndicator()),
            ),
          ],
        ),
      ),
    );
  }

  List<PieChartSectionData> _buildPieChartSections(Map<String, dynamic> statusOverview) {
    const colors = [
      Colors.blue,
      Colors.orange,
      Colors.green,
      Colors.red,
      Colors.grey,
      Colors.purple
    ];
    int index = 0;

    final entries = statusOverview.entries
        .where((entry) =>
            (entry.value is num && (entry.value as num) > 0) ||
            (entry.value is String && int.tryParse(entry.value) != null && int.parse(entry.value) > 0))
        .toList();

    if (entries.isEmpty) {
      return [
        PieChartSectionData(
          value: 1,
          title: 'No Data',
          color: Colors.grey,
          radius: 50,
          titleStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
        )
      ];
    }

    return entries.map((entry) {
      final color = colors[index % colors.length];
      index++;
      final value = entry.value is num
          ? (entry.value as num).toDouble()
          : double.tryParse(entry.value.toString()) ?? 0.0;

      return PieChartSectionData(
        value: value,
        title: '${entry.key.replaceAll('_', ' ').capitalize()}\n${value.toInt()}',
        color: color,
        radius: 50,
        titleStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
        badgeWidget: Tooltip(
          message: '${entry.key.capitalize()}: ${value.toInt()}',
          child: Container(
            width: 10,
            height: 10,
            decoration: BoxDecoration(
              color: color,
              shape: BoxShape.circle,
            ),
          ),
        ),
      );
    }).toList();
  }

  Widget _buildLineChartCard(ThemeData theme, KpiData kpiData, AppLocalizations loc) {
    final totalComplaints = kpiData.totalComplaints ?? {};

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(loc.grievanceTrend ?? 'Grievance Trend Over Time',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 8),
            SizedBox(
              height: 220,
              child: totalComplaints.isNotEmpty
                  ? LineChart(
                      LineChartData(
                        gridData: FlGridData(show: true),
                        titlesData: FlTitlesData(
                          leftTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              reservedSize: 40,
                              getTitlesWidget: (value, meta) {
                                return Text(
                                  value.toInt().toString(),
                                  style: const TextStyle(fontSize: 12),
                                );
                              },
                            ),
                            axisNameWidget: Text(loc.numberOfGrievances ?? 'Number of Grievances'),
                          ),
                          bottomTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              getTitlesWidget: (value, meta) {
                                const labels = ['Day', 'Week', 'Month', 'Year', 'All'];
                                return Text(
                                  labels[value.toInt()],
                                  style: const TextStyle(fontSize: 12),
                                );
                              },
                            ),
                            axisNameWidget: Text(loc.timePeriod ?? 'Time Period'),
                          ),
                          topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                          rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                        ),
                        borderData: FlBorderData(show: true),
                        minX: 0,
                        maxX: 4,
                        minY: 0,
                        lineBarsData: [
                          LineChartBarData(
                            spots: [
                              FlSpot(0, (totalComplaints['day'] ?? 0).toDouble()),
                              FlSpot(1, (totalComplaints['week'] ?? 0).toDouble()),
                              FlSpot(2, (totalComplaints['month'] ?? 0).toDouble()),
                              FlSpot(3, (totalComplaints['year'] ?? 0).toDouble()),
                              FlSpot(4, (totalComplaints['all'] ?? 0).toDouble()),
                            ],
                            isCurved: true,
                            color: Colors.blue,
                            barWidth: 3,
                            dotData: FlDotData(show: true),
                            belowBarData: BarAreaData(
                              show: true,
                              color: Colors.blue.withOpacity(0.2),
                            ),
                          ),
                        ],
                      ),
                    )
                  : const Center(child: LoadingIndicator()),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBarChartCard(ThemeData theme, KpiData kpiData, AppLocalizations loc) {
    final deptWise = kpiData.deptWise ?? {};

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(loc.deptWiseDistribution ?? 'Department-Wise Distribution',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 8),
            SizedBox(
              height: 220,
              child: deptWise.isNotEmpty
                  ? BarChart(
                      BarChartData(
                        alignment: BarChartAlignment.spaceAround,
                        barGroups: _buildBarChartGroups(deptWise),
                        titlesData: FlTitlesData(
                          leftTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              reservedSize: 40,
                              getTitlesWidget: (value, meta) {
                                return Text(
                                  value.toInt().toString(),
                                  style: const TextStyle(fontSize: 12),
                                );
                              },
                            ),
                            axisNameWidget: Text(loc.numberOfGrievances ?? 'Number of Grievances'),
                          ),
                          bottomTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              getTitlesWidget: (value, meta) {
                                final keys = deptWise.keys.toList();
                                return Text(
                                  keys[value.toInt()].capitalize(),
                                  style: const TextStyle(fontSize: 12),
                                );
                              },
                            ),
                            axisNameWidget: Text(loc.department ?? 'Department'),
                          ),
                          topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                          rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                        ),
                        borderData: FlBorderData(show: true),
                        gridData: FlGridData(show: true),
                      ),
                    )
                  : const Center(child: LoadingIndicator()),
            ),
          ],
        ),
      ),
    );
  }

  List<BarChartGroupData> _buildBarChartGroups(Map<String, dynamic> deptWise) {
    const colors = [
      Colors.blue,
      Colors.orange,
      Colors.green,
      Colors.red,
      Colors.purple,
    ];
    return deptWise.entries.toList().asMap().entries.map((entry) {
  final index = entry.key;
  final dept = entry.value.key;
  final value = entry.value.value is num
      ? (entry.value.value as num).toDouble()
      : double.tryParse(entry.value.value.toString()) ?? 0.0;

  return BarChartGroupData(
    x: index,
    barRods: [
      BarChartRodData(
        toY: value,
        color: colors[index % colors.length],
        width: 16,
        borderRadius: BorderRadius.circular(4),
      ),
    ],
  );
}).toList();

  }

  Widget _buildSlaCard(ThemeData theme, KpiData kpiData, AppLocalizations loc) {
    final slaMetrics = kpiData.slaMetrics ?? {};

    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(loc.slaMetrics ?? 'SLA Metrics',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 12),
            _buildSlaMetricItem(loc.slaDays ?? 'SLA Days',
                '${slaMetrics['sla_days'] ?? 7}'),
            _buildSlaMetricItem(loc.complianceRate ?? 'Compliance Rate',
                '${(slaMetrics['sla_compliance_rate'] ?? 0).toStringAsFixed(2)}%'),
            _buildSlaMetricItem(
                loc.avgResolutionTime ?? 'Avg Resolution Time',
                '${(slaMetrics['avg_resolution_time_days'] ?? 0).toStringAsFixed(2)} days'),
          ],
        ),
      ),
    );
  }

  Widget _buildSlaMetricItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(fontWeight: FontWeight.w500)),
          Text(value, style: const TextStyle(fontWeight: FontWeight.bold)),
        ],
      ),
    );
  }

  Widget _buildRecentComplaints(AppLocalizations loc) {
    return FutureBuilder<List<Grievance>>(
      future: _grievancesFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const LoadingIndicator();
        } else if (snapshot.hasError) {
          return EmptyState(
            icon: Icons.error,
            title: loc.error,
            message: '${loc.noGrievancesMessage}\n${snapshot.error}',
            actionButton: ElevatedButton(
              onPressed: () {
                setState(() {
                  _grievancesFuture = ref.read(adminProvider.notifier).getAllGrievances();
                });
              },
              child: Text(loc.retry),
            ),
          );
        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return EmptyState(
            icon: Icons.inbox,
            title: loc.noGrievances,
            message: loc.noGrievancesMessage,
          );
        }

        final grievances = snapshot.data!.take(5).toList();
        return ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: grievances.length,
          itemBuilder: (ctx, idx) => GrievanceCard(grievance: grievances[idx]),
        );
      },
    );
  }

  Widget _buildExportButtons(AppLocalizations loc) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        OutlinedButton.icon(
          onPressed: () => _exportReport('pdf'),
          icon: const Icon(Icons.picture_as_pdf),
          label: Text(loc.exportPDF ?? 'Export PDF'),
        ),
        OutlinedButton.icon(
          onPressed: () => _exportReport('csv'),
          icon: const Icon(Icons.table_chart),
          label: Text(loc.exportCSV ?? 'Export CSV'),
        ),
        OutlinedButton.icon(
          onPressed: () => _exportReport('excel'),
          icon: const Icon(Icons.grid_on),
          label: Text(loc.exportExcel ?? 'Export Excel'),
        ),
      ],
    );
  }

  Future<void> _exportReport(String format) async {
  final loc = AppLocalizations.of(context)!;
  try {
    final data = await ref
        .read(adminProvider.notifier)
        .generateReport(_selectedPeriod, format);
    final fileName =
        'report_${_selectedPeriod}_$format.${format == 'excel' ? 'xlsx' : format}';

    if (kIsWeb) {
      // Web-specific file download
      final blob = html.Blob([data]);
      final url = html.Url.createObjectUrlFromBlob(blob);
      final anchor = html.AnchorElement(href: url)
        ..setAttribute('download', fileName)
        ..click();
      html.Url.revokeObjectUrl(url);
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${loc.reportExported ?? 'Report exported'}: $fileName')));
    } else {
      // Mobile/desktop file handling
      final dir = await getTemporaryDirectory();
      final filePath = '${dir.path}/$fileName';
      final file = io.File(filePath);
      await file.writeAsBytes(data);
      await OpenFile.open(filePath);
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${loc.reportExported ?? 'Report exported'}: $fileName')));
    }
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${loc.errorExportingReport ?? 'Error exporting report'}: $e')));
  }
}
}

extension StringExtension on String {
  String capitalize() {
    if (isEmpty) return this;
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\ManageAreasScreen.dart ---
import 'package:flutter/material.dart';
import 'package:main_ui/services/master_data_service.dart';
import 'package:main_ui/models/master_data_model.dart';
import 'package:main_ui/widgets/loading_indicator.dart';

class ManageAreasScreen extends StatefulWidget {
  const ManageAreasScreen({Key? key}) : super(key: key);

  @override
  _ManageAreasScreenState createState() => _ManageAreasScreenState();
}

class _ManageAreasScreenState extends State<ManageAreasScreen> {
  late Future<List<MasterArea>> _areasFuture;

  @override
  void initState() {
    super.initState();
    _areasFuture = MasterDataService.getAreas();
  }

  void _refreshAreas() {
    setState(() {
      _areasFuture = MasterDataService.getAreas();
    });
  }

  void _showAddAreaDialog() {
    showDialog(
      context: context,
      builder: (context) => AreaFormDialog(onAreaAdded: _refreshAreas),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Manage Areas'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: _showAddAreaDialog,
          ),
        ],
      ),
      body: FutureBuilder<List<MasterArea>>(
        future: _areasFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const LoadingIndicator();
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          final areas = snapshot.data ?? [];
          return ListView.builder(
            itemCount: areas.length,
            itemBuilder: (context, index) {
              final area = areas[index];
              return ListTile(
                title: Text(area.name),
                subtitle: Text(area.description ?? 'No description'),
              );
            },
          );
        },
      ),
    );
  }
}

class AreaFormDialog extends StatefulWidget {
  final VoidCallback onAreaAdded;

  const AreaFormDialog({Key? key, required this.onAreaAdded}) : super(key: key);

  @override
  _AreaFormDialogState createState() => _AreaFormDialogState();
}

class _AreaFormDialogState extends State<AreaFormDialog> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  bool _isSubmitting = false;

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isSubmitting = true;
    });

    try {
      final data = {
        'name': _nameController.text,
        'description': _descriptionController.text,
      };
      await MasterDataService.addArea(data);
      widget.onAreaAdded();
      Navigator.of(context).pop();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to add area: $e')),
      );
    } finally {
      setState(() {
        _isSubmitting = false;
      });
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Add Area'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Area Name'),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter an area name';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Description (Optional)'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _isSubmitting ? null : _submit,
          child: _isSubmitting
              ? const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('Add'),
        ),
      ],
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\manage_configs.dart ---
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../services/api_service.dart';

import '../../l10n/app_localizations.dart';
import '../../widgets/empty_state.dart';
import '../../widgets/custom_button.dart';

// Define a Config model
class Config {
  final String key;
  final String value;

  Config({required this.key, required this.value});

  factory Config.fromJson(Map<String, dynamic> json) {
    return Config(
      key: json['key'] ?? '',
      value: json['value'] ?? '',
    );
  }
}

// AdminNotifier for managing configs
class AdminNotifier extends StateNotifier<AsyncValue<List<Config>>> {
  static final Dio _dio = ApiService.dio;
  AdminNotifier() : super(const AsyncValue.loading()) {
    getConfigs();
  }

  Future<void> getConfigs() async {
    try {
      state = const AsyncValue.loading();
      final response = await _dio.get('/admins/configs');
      final configs = (response.data as List).map((json) => Config.fromJson(json)).toList();
      state = AsyncValue.data(configs);
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> addConfig(String key, String value) async {
    try {
      state = const AsyncValue.loading();
      await ApiService.post('/admins/configs', {'key': key, 'value': value});
      await getConfigs(); // Refresh configs after adding
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }
}

final adminProvider = StateNotifierProvider<AdminNotifier, AsyncValue<List<Config>>>((ref) => AdminNotifier());

class ManageConfigs extends ConsumerStatefulWidget {
  const ManageConfigs({super.key});

  @override
  ConsumerState<ManageConfigs> createState() => _ManageConfigsState();
}

class _ManageConfigsState extends ConsumerState<ManageConfigs> {
  final TextEditingController _keyController = TextEditingController();
  final TextEditingController _valueController = TextEditingController();

  @override
  void dispose() {
    _keyController.dispose();
    _valueController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final configsAsync = ref.watch(adminProvider);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.settings),
      ),
      body: configsAsync.when(
        data: (configs) => configs.isEmpty
            ? EmptyState(
                icon: Icons.settings_outlined,
                title: l10n.noConfigs, // New localization key
                message: l10n.noConfigsMessage, // New localization key
                actionButton: CustomButton(
                  text: l10n.addConfig, // New localization key
                  onPressed: () => _showAddConfigDialog(context),
                ),
              )
            : ListView.builder(
                padding: const EdgeInsets.all(16.0),
                itemCount: configs.length,
                itemBuilder: (context, index) {
                  final config = configs[index];
                  return Card(
                    child: ListTile(
                      title: Text(config.key, style: Theme.of(context).textTheme.titleMedium),
                      subtitle: Text(config.value, style: Theme.of(context).textTheme.bodyMedium),
                      trailing: IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: () => _showEditConfigDialog(context, config),
                      ),
                    ),
                  );
                },
              ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => EmptyState(
          icon: Icons.error,
          title: l10n.error,
          message: error.toString(),
          actionButton: CustomButton(
            text: l10n.retry,
            onPressed: () => ref.read(adminProvider.notifier).getConfigs(),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddConfigDialog(context),
        child: const Icon(Icons.add),
      ),
    );
  }

  void _showAddConfigDialog(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    _keyController.clear();
    _valueController.clear();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.addConfig), // New localization key
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _keyController,
              decoration: InputDecoration(
                labelText: l10n.configKey, // New localization key
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _valueController,
              decoration: InputDecoration(
                labelText: l10n.configValue, // New localization key
                border: const OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(l10n.cancel),
          ),
          CustomButton(
            text: l10n.submit,
            onPressed: () async {
              if (_keyController.text.trim().isEmpty || _valueController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(l10n.configCannotBeEmpty)), // New localization key
                );
                return;
              }
              try {
                await ref.read(adminProvider.notifier).addConfig(
                      _keyController.text.trim(),
                      _valueController.text.trim(),
                    );
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(l10n.configAddedSuccess)), // New localization key
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('${l10n.error}: $e')),
                );
              }
            },
          ),
        ],
      ),
    );
  }

  void _showEditConfigDialog(BuildContext context, Config config) {
    final l10n = AppLocalizations.of(context)!;
    _keyController.text = config.key;
    _valueController.text = config.value;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.editConfig), // New localization key
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _keyController,
              decoration: InputDecoration(
                labelText: l10n.configKey,
                border: const OutlineInputBorder(),
              ),
              enabled: false, // Key remains non-editable
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _valueController,
              decoration: InputDecoration(
                labelText: l10n.configValue,
                border: const OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(l10n.cancel),
          ),
          CustomButton(
            text: l10n.update,
            onPressed: () async {
              if (_valueController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(l10n.configValueCannotBeEmpty)), // New localization key
                );
                return;
              }
              try {
                await ref.read(adminProvider.notifier).addConfig(
                      _keyController.text.trim(),
                      _valueController.text.trim(),
                    );
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(l10n.configUpdatedSuccess)), // New localization key
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('${l10n.error}: $e')),
                );
              }
            },
          ),
        ],
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\manage_subjects.dart ---
// lib/screens/admin/manage_subjects.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../models/master_data_model.dart';
import '../../services/api_service.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/empty_state.dart';
import '../../services/master_data_service.dart'; // Import MasterDataService for subjectsProvider

class ManageSubjects extends ConsumerStatefulWidget {
  const ManageSubjects({super.key});

  @override
  ConsumerState<ManageSubjects> createState() => _ManageSubjectsState();
}

class _ManageSubjectsState extends ConsumerState<ManageSubjects> {
  void _showSubjectDialog({MasterSubject? subject}) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(subject == null ? 'Add Subject' : 'Edit Subject'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: const InputDecoration(labelText: 'Name'),
                controller: TextEditingController(text: subject?.name ?? ''),
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Description'),
                controller: TextEditingController(text: subject?.description ?? ''),
              ),
            ],
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('Cancel')),
            CustomButton(
              text: 'Save',
              onPressed: () async {
                // TODO: Implement actual save logic with form data
                await ApiService.post('/admin/subjects', {/* form data */});
                ref.invalidate(subjectsProvider); // Refresh subjectsProvider
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final subjectsAsync = ref.watch(subjectsProvider); // Use subjectsProvider

    return Scaffold(
      appBar: AppBar(
        title: const Text('Manage Subjects'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showSubjectDialog(),
          ),
        ],
      ),
      body: subjectsAsync.when(
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => EmptyState(
          icon: Icons.error,
          title: 'Error',
          message: error.toString(),
          actionButton: CustomButton(
            text: 'Retry',
            onPressed: () => ref.refresh(subjectsProvider), // Refresh provider
          ),
        ),
        data: (subjects) {
          if (subjects.isEmpty) {
            return const EmptyState(
              icon: Icons.category,
              title: 'No Subjects',
              message: 'There are no subjects to display.',
            );
          }
          return ListView.builder(
            itemCount: subjects.length,
            itemBuilder: (context, index) {
              final subject = subjects[index];
              return ListTile(
                title: Text(subject.name),
                subtitle: Text(subject.description ?? ''),
                trailing: IconButton(
                  icon: const Icon(Icons.edit),
                  onPressed: () => _showSubjectDialog(subject: subject),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\manage_users.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/utils/validators.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/loading_indicator.dart';
import '../../providers/user_provider.dart';

class ManageUsers extends ConsumerStatefulWidget {
  const ManageUsers({Key? key}) : super(key: key);

  @override
  ConsumerState<ManageUsers> createState() => _ManageUsersState();
}

class _ManageUsersState extends ConsumerState<ManageUsers> {
  Future<void> _showAddUserDialog() async {
    final l10n = AppLocalizations.of(context)!;
    final formKey = GlobalKey<FormState>();
    String name = '';
    String email = '';
    String phoneNumber = '';
    String password = '';
    String role = 'CITIZEN';
    String? departmentId;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.addUser),
        content: SingleChildScrollView(
          child: Form(
            key: formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  decoration: InputDecoration(
                    labelText: l10n.name,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: validateRequired,
                  onChanged: (value) => name = value,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  decoration: InputDecoration(
                    labelText: l10n.email,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: validateEmail,
                  onChanged: (value) => email = value,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Phone number is required';
                    }
                    if (!RegExp(r'^\+?\d{10,15}$').hasMatch(value)) {
                      return 'Invalid phone number';
                    }
                    return null;
                  },
                  onChanged: (value) => phoneNumber = value,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  decoration: InputDecoration(
                    labelText: l10n.password,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Password is required';
                    }
                    if (value.length < 6) {
                      return 'Password must be at least 6 characters';
                    }
                    return null;
                  },
                  onChanged: (value) => password = value,
                ),
                const SizedBox(height: 12),
                DropdownButtonFormField<String>(
                  value: role,
                  decoration: InputDecoration(
                    labelText: l10n.role,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  items: ['CITIZEN', 'MEMBER_HEAD', 'FIELD_STAFF', 'ADMIN']
                      .map((r) => DropdownMenuItem(value: r, child: Text(r)))
                      .toList(),
                  onChanged: (value) => role = value ?? 'CITIZEN',
                  validator: validateRequired,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  decoration: InputDecoration(
                    labelText: 'Department ID (Optional)',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  keyboardType: TextInputType.number,
                  onChanged: (value) => departmentId = value.isEmpty ? null : value,
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(l10n.cancel),
          ),
          CustomButton(
            text: l10n.add,
            onPressed: () async {
              if (formKey.currentState?.validate() ?? false) {
                try {
                  await ref.read(usersProvider.notifier).addUser({
                    'name': name,
                    'email': email,
                    'phone_number': phoneNumber,
                    'password': password,
                    'role': role,
                    'department_id':
                        departmentId != null ? int.tryParse(departmentId!) : null,
                  });
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(l10n.userAddedSuccess)),
                  );
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('${l10n.failedToAddUser}: $e')),
                  );
                }
              }
            },
          ),
        ],
      ),
    );
  }

  Future<void> _showEditUserDialog(User user) async {
    final l10n = AppLocalizations.of(context)!;
    final formKey = GlobalKey<FormState>();
    String name = user.name ?? "";
    String email = user.email ?? '';
    String phoneNumber = user.phoneNumber ?? '';
    String role = user.role ?? "";
    String? departmentId = user.departmentId?.toString();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.editUser ?? 'Edit User'),
        content: SingleChildScrollView(
          child: Form(
            key: formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  initialValue: name,
                  decoration: InputDecoration(
                    labelText: l10n.name,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: validateRequired,
                  onChanged: (value) => name = value,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  initialValue: email,
                  decoration: InputDecoration(
                    labelText: l10n.email,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: validateEmail,
                  onChanged: (value) => email = value,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  initialValue: phoneNumber,
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Phone number is required';
                    }
                    if (!RegExp(r'^\+?\d{10,15}$').hasMatch(value)) {
                      return 'Invalid phone number';
                    }
                    return null;
                  },
                  onChanged: (value) => phoneNumber = value,
                ),
                const SizedBox(height: 12),
                DropdownButtonFormField<String>(
                  value: role,
                  decoration: InputDecoration(
                    labelText: l10n.role,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  items: ['CITIZEN', 'MEMBER_HEAD', 'FIELD_STAFF', 'ADMIN']
                      .map((r) => DropdownMenuItem(value: r, child: Text(r)))
                      .toList(),
                  onChanged: (value) => role = value ?? 'CITIZEN',
                  validator: validateRequired,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  initialValue: departmentId,
                  decoration: InputDecoration(
                    labelText: 'Department ID (Optional)',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  keyboardType: TextInputType.number,
                  onChanged: (value) => departmentId = value.isEmpty ? null : value,
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(l10n.cancel),
          ),
          CustomButton(
            text: l10n.update,
            onPressed: () async {
              if (formKey.currentState?.validate() ?? false) {
                try {
                  await ref.read(usersProvider.notifier).updateUser(user.id, {
                    'id': user.id,
                    'name': name,
                    'email': email,
                    'phone_number': phoneNumber,
                    'role': role,
                    'department_id':
                        departmentId != null ? int.tryParse(departmentId!) : null,
                  });
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content: Text(l10n.userUpdatedSuccess ??
                            'User updated successfully')),
                  );
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content: Text(
                            '${l10n.failedToUpdateUser ?? 'Failed to update user'}: $e')),
                  );
                }
              }
            },
          ),
        ],
      ),
    );
  }

  Future<void> _confirmDeleteUser(int userId) async {
    final l10n = AppLocalizations.of(context)!;
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.deleteUser ?? 'Delete User'),
        content: Text(l10n.deleteUserConfirmation ??
            'Are you sure you want to delete this user?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(l10n.cancel),
          ),
          CustomButton(
            text: l10n.delete ?? 'Delete',
            backgroundColor: Colors.red,
            onPressed: () => Navigator.pop(context, true),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        await ref.read(usersProvider.notifier).deleteUser(userId);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content:
                  Text(l10n.userDeletedSuccess ?? 'User deleted successfully')),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(
                  '${l10n.failedToDeleteUser ?? 'Failed to delete user'}: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final users = ref.watch(usersProvider);

    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.manageUsers),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () =>
                ref.read(usersProvider.notifier).fetchUsers(),
            tooltip: l10n.retry,
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddUserDialog,
        backgroundColor: theme.colorScheme.primary,
        child: const Icon(Icons.add),
        tooltip: l10n.addUser,
      ),
      body: users.isEmpty
          ? EmptyState(
              icon: Icons.people_outline,
              title: l10n.noUsers,
              message: l10n.noUsersMessage,
              actionButton: CustomButton(
                text: l10n.addUser,
                onPressed: _showAddUserDialog,
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(8),
              itemCount: users.length,
              itemBuilder: (context, index) {
                final user = users[index];
                return Card(
                  elevation: 2,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12)),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: theme.colorScheme.primary,
                      child: Text(
                        (user.name?.isNotEmpty ?? false) ? user.name![0] : '?',
                        style: TextStyle(color: theme.colorScheme.onPrimary),
                      ),
                    ),
                    title: Text(user.name ?? "", style: theme.textTheme.titleMedium),
                    subtitle: Text(
                      '${user.email ?? l10n.noEmail} • ${user.role}',
                      style: theme.textTheme.bodySmall,
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.edit),
                          onPressed: () => _showEditUserDialog(user),
                          tooltip: l10n.editUser,
                        ),
                        IconButton(
                          icon: const Icon(Icons.delete, color: Colors.red),
                          onPressed: () => _confirmDeleteUser(user.id),
                          tooltip: l10n.deleteUser,
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\reports_screen.dart ---
import 'package:flutter/material.dart';

class ReportsScreen extends StatelessWidget {
  const ReportsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Later connect with backend: GET /admin/reports
    final kpis = {
      "Resolution Rate": "82%",
      "SLA Compliance": "76%",
      "Pending Aging": "5 days avg"
    };

    return Scaffold(
      appBar: AppBar(title: const Text("Reports & Analytics")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: kpis.entries.map((e) => Card(
            margin: const EdgeInsets.symmetric(vertical: 8),
            child: ListTile(
              title: Text(e.key, style: const TextStyle(fontWeight: FontWeight.bold)),
              trailing: Text(e.value, style: const TextStyle(fontSize: 16)),
            ),
          )).toList(),
        ),
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\admin\user_history.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../models/grievance_model.dart';
import '../../providers/grievance_provider.dart';
import '../../widgets/grievance_card.dart';
import '../../widgets/empty_state.dart';
import '../../l10n/app_localizations.dart';

class UserHistoryScreen extends ConsumerWidget {
  final int? userId;
  const UserHistoryScreen({super.key, this.userId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;

    if (userId == null) {
      return Scaffold(
        appBar: AppBar(title: Text(l10n.userHistory)),
        body: EmptyState(
          icon: Icons.error_outline,
          title: l10n.userNotFound,
          message: l10n.userIdRequired,
        ),
      );
    }

    final history = ref.watch(citizenHistoryProvider(userId!));

    return Scaffold(
      appBar: AppBar(title: Text(l10n.userHistory)),
      body: history.when(
        data: (grievances) => grievances.isEmpty
            ? EmptyState(
                icon: Icons.history_toggle_off,
                title: l10n.noGrievancesFound,
                message: l10n.noGrievancesMessage,
              )
            : ListView.builder(
                itemCount: grievances.length,
                itemBuilder: (context, index) =>
                    GrievanceCard(grievance: grievances[index]),
              ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => EmptyState(
          icon: Icons.error,
          title: l10n.error,
          message: '${l10n.error}: $err',
        ),
      ),
    );
  }
}

=== Folder: screens\auth ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\auth\login_callback.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../providers/auth_provider.dart';
import '../../l10n/app_localizations.dart';

class LoginCallbackScreen extends ConsumerStatefulWidget {
  const LoginCallbackScreen({super.key});

  @override
  ConsumerState<LoginCallbackScreen> createState() => _LoginCallbackScreenState();
}

class _LoginCallbackScreenState extends ConsumerState<LoginCallbackScreen> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _handleCallback();
    });
  }

  Future<void> _handleCallback() async {
    try {
      final uri = Uri.base;
      final token = uri.queryParameters['access_token'];

      if (token != null) {
        // Handle storing the token and updating auth state
        await ref.read(authProvider.notifier).processNewToken(token);

        // Read the final user state
        final user = ref.read(authProvider);

        // Check if the widget is still mounted
        if (!mounted) return;

        if (user != null) {
          print('User logged in: ${user.name}, Role: ${user.role}');
          // Navigate to role-specific home screen
          Navigator.pushReplacementNamed(context, '/${user.role != null ? user.role!.toLowerCase() : 'guest'}/home');
        } else {
          print('Error: Unable to fetch user data after processing token.');
          Navigator.pushReplacementNamed(context, '/login');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(AppLocalizations.of(context)?.authenticationFailed ?? 'Login failed: Could not retrieve user details.'),
            ),
          );
        }
      } else {
        if (!mounted) return;
        print('Error: No token received in URL');
        Navigator.pushReplacementNamed(context, '/login');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(AppLocalizations.of(context)?.authenticationFailed ?? 'Login failed: No token received'),
          ),
        );
      }
    } catch (e, stackTrace) {
      if (!mounted) return;
      print('Login callback error: $e\n$stackTrace');
      Navigator.pushReplacementNamed(context, '/login');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            AppLocalizations.of(context)?.error ?? 'An unexpected error occurred: $e',
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            Text(
              AppLocalizations.of(context)?.loading ?? 'Processing login...',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
          ],
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\auth\login_screen.dart ---
// lib/screens/auth/login_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/providers/auth_provider.dart';
import 'package:main_ui/utils/validators.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/custom_button.dart';

class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});

  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends ConsumerState<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  bool _isLogin = true;
  bool _isLoading = false;
  bool _obscurePassword = true;
  String _name = '';
  String _email = '';
  String _password = '';

  Future<void> _submit() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      setState(() => _isLoading = true);
      
      try {
        if (_isLogin) {
          await ref.read(authProvider.notifier).loginWithEmail(_email, _password);
        } else {
          await ref.read(authProvider.notifier).register(_name, _email, _password);
        }
        
        final user = ref.read(authProvider);
        if (user != null) {
          Navigator.pushReplacementNamed(context, '/${user.role}/home');
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(AppLocalizations.of(context)!.authenticationFailed)),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${AppLocalizations.of(context)!.error}: $e')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final l10n = AppLocalizations.of(context)!;
    
    return Scaffold(
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 40),
              Text(
                _isLogin ? l10n.login : l10n.register,
                style: theme.textTheme.headlineLarge,
              ),
              const SizedBox(height: 8),
              Text(
                _isLogin 
                  ? 'Welcome back! Please sign in to continue'
                  : 'Create an account to get started',
                style: theme.textTheme.bodyMedium?.copyWith(color: theme.colorScheme.onSurface.withValues(alpha:0.6)),
              ),
              const SizedBox(height: 40),
              
              Form(
                key: _formKey,
                child: Column(
                  children: [
                    if (!_isLogin)
                      Column(
                        children: [
                          TextFormField(
                            decoration: InputDecoration(
                              labelText: l10n.name,
                              prefixIcon: const Icon(Icons.person_outline),
                            ),
                            validator: validateRequired,
                            onSaved: (value) => _name = value!,
                          ),
                          const SizedBox(height: 16),
                        ],
                      ),
                    
                    TextFormField(
                      decoration: InputDecoration(
                        labelText: l10n.email,
                        prefixIcon: const Icon(Icons.email_outlined),
                      ),
                      keyboardType: TextInputType.emailAddress,
                      validator: validateEmail,
                      onSaved: (value) => _email = value!,
                    ),
                    const SizedBox(height: 16),
                    
                    TextFormField(
                      decoration: InputDecoration(
                        labelText: l10n.password,
                        prefixIcon: const Icon(Icons.lock_outline),
                        suffixIcon: IconButton(
                          icon: Icon(_obscurePassword ? Icons.visibility_outlined : Icons.visibility_off_outlined),
                          onPressed: () => setState(() => _obscurePassword = !_obscurePassword),
                        ),
                      ),
                      obscureText: _obscurePassword,
                      validator: validateRequired,
                      onSaved: (value) => _password = value!,
                    ),
                    const SizedBox(height: 24),
                    
                    CustomButton(
                      text: _isLogin ? l10n.login : l10n.register,
                      onPressed: _isLoading ? null : _submit,
                      isLoading: _isLoading,
                      fullWidth: true,
                      backgroundColor: const Color(0xFF151a2f),
                    ),
                    const SizedBox(height: 16),
                    
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          _isLogin ? l10n.registerPrompt : l10n.loginPrompt,
                          style: theme.textTheme.bodyMedium,
                        ),
                        const SizedBox(width: 4),
                        TextButton(
                          onPressed: () {
                            setState(() {
                              _isLogin = !_isLogin;
                              _formKey.currentState?.reset();
                            });
                          },
                          style: TextButton.styleFrom(
                            foregroundColor: const Color(0xFF151a2f),
                          ),
                          child: Text(_isLogin ? l10n.register : l10n.login),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 32),
                    Row(
                      children: [
                        Expanded(child: Divider(color: theme.dividerTheme.color)),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: Text(
                            'OR',
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: theme.colorScheme.onSurface.withValues(alpha: 0.5),
                            ),
                          ),
                        ),
                        Expanded(child: Divider(color: theme.dividerTheme.color)),
                      ],
                    ),
                    const SizedBox(height: 24),
                    
                    OutlinedButton.icon(
                      icon: Image.asset('assets/images/google_logo.png', height: 24, width: 24),
                      label: Text(l10n.googleLogin),
                      onPressed: _isLoading ? null : () async {
                        setState(() => _isLoading = true);
                        try {
                          await ref.read(authProvider.notifier).loginWithGoogle();
                        } catch (e) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('${l10n.googleLoginFailed}: $e')),
                          );
                        } finally {
                          setState(() => _isLoading = false);
                        }
                      },
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        side: BorderSide(color: theme.dividerTheme.color!),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),

                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\auth\otp_verification_screen.dart ---
import 'package:flutter/material.dart';

class OtpVerificationScreen extends StatefulWidget {
  const OtpVerificationScreen({super.key});

  @override
  State<OtpVerificationScreen> createState() => _OtpVerificationScreenState();
}

class _OtpVerificationScreenState extends State<OtpVerificationScreen> {
  final TextEditingController _otpController = TextEditingController();

  void _verifyOtp() {
    final otp = _otpController.text.trim();
    if (otp.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please enter OTP")),
      );
      return;
    }
    // TODO: Call backend /auth/verify-otp
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("OTP Verified: $otp")),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("OTP Verification")),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            const Text("Enter the OTP sent to your registered mobile number"),
            const SizedBox(height: 20),
            TextField(
              controller: _otpController,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                labelText: "OTP",
              ),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _verifyOtp,
              child: const Text("Verify"),
            )
          ],
        ),
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\auth\splash_screen.dart ---
// main_ui/lib/screens/auth/splash_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../providers/auth_provider.dart';
import '../../providers/locale_provider.dart';

class SplashScreen extends ConsumerWidget {
  const SplashScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await ref.read(localeNotifierProvider.notifier); // Ensure locale is loaded
      await ref.read(authProvider.notifier).checkAuth();
      final user = ref.read(authProvider);
      if (user != null) {
        Navigator.pushReplacementNamed(context, '/${user.role}/home');
      } else {
        Navigator.pushReplacementNamed(context, '/login');
      }
    });
    return const Scaffold(body: Center(child: CircularProgressIndicator()));
  }
}

=== Folder: screens\citizen ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\citizen\grievance_detail.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../models/grievance_model.dart';
import '../../models/comment_model.dart';
import '../../services/grievance_service.dart';
import '../../widgets/status_badge.dart';
import '../../widgets/comment_tile.dart';
import '../../l10n/app_localizations.dart';
import '../../widgets/empty_state.dart';
import '../../widgets/custom_button.dart';

// Provider for grievance details
final grievanceProvider = FutureProvider.family<Grievance, int>((ref, id) async {
  return await GrievanceService().getGrievanceDetails(id);
});

class GrievanceDetail extends ConsumerStatefulWidget {
  final int id;

  const GrievanceDetail({super.key, required this.id});

  @override
  ConsumerState<GrievanceDetail> createState() => _GrievanceDetailState();
}

class _GrievanceDetailState extends ConsumerState<GrievanceDetail> {
  final TextEditingController _feedbackController = TextEditingController();
  final TextEditingController _commentController = TextEditingController();
  int? _rating;

  @override
  void dispose() {
    _feedbackController.dispose();
    _commentController.dispose();
    super.dispose();
  }

  Future<void> _addComment() async {
    if (_commentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(AppLocalizations.of(context)!.commentCannotBeEmpty),
        ),
      );
      return;
    }
    
    try {
      await GrievanceService().addComment(widget.id, _commentController.text);
      _commentController.clear();
      ref.refresh(grievanceProvider(widget.id));
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(AppLocalizations.of(context)!.commentAddedSuccess),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(AppLocalizations.of(context)!.failedToAddComment),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final grievanceAsync = ref.watch(grievanceProvider(widget.id));
    final theme = Theme.of(context);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.grievanceDetails),
      ),
      body: grievanceAsync.when(
        data: (grievance) => _buildGrievanceDetail(theme, l10n, grievance),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => EmptyState(
          icon: Icons.error,
          title: l10n.error,
          message: l10n.failedToLoadGrievance,
        ),
      ),
    );
  }

  Widget _buildGrievanceDetail(ThemeData theme, AppLocalizations l10n, Grievance grievance) {
    return Column(
      children: [
        // Grievance details section
        Expanded(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header section with title and status
                Card(
                  elevation: 2,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          grievance.title,
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Row(
                          children: [
                            StatusBadge(status: grievance.status ?? 'Unknown'),
                            const Spacer(),
                            IconButton(
                              icon: const Icon(Icons.refresh),
                              onPressed: () {
                                ref.refresh(grievanceProvider(widget.id));
                              },
                              tooltip: 'Refresh',
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // Details section
                Card(
                  elevation: 2,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Details',
                          style: theme.textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 12),
                        
                        _buildDetailRow(theme, 'Description', grievance.description),
                        
                        if (grievance.subject != null)
                          _buildDetailRow(theme, 'Subject', grievance.subject!.name),
                        
                        if (grievance.area != null)
                          _buildDetailRow(theme, 'Area', grievance.area!.name),
                        
                        if (grievance.priority != null)
                          _buildDetailRow(theme, 'Priority', grievance.priority?.toString() ?? 'medium'),
                        
                        _buildDetailRow(
                          theme, 
                          'Created', 
                          DateFormat('MMM dd, yyyy - HH:mm').format(grievance.createdAt)
                        ),
                        
                        if (grievance.updatedAt != grievance.createdAt)
                          _buildDetailRow(
                            theme, 
                            'Last Updated', 
                            DateFormat('MMM dd, yyyy - HH:mm').format(grievance.updatedAt)
                          ),
                        
                        if (grievance.assignee != null)
                          _buildDetailRow(theme, 'Assigned To', grievance.assignee!.name ?? ""),
                      ],
                    ),
                  ),
                ),
                
                // Attachments section
                if (grievance.attachments != null && grievance.attachments!.isNotEmpty) ...[
                  const SizedBox(height: 16),
                  Card(
                    elevation: 2,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Attachments',
                            style: theme.textTheme.titleLarge?.copyWith(
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Wrap(
                            spacing: 8,
                            children: grievance.attachments!.map((attachment) {
                              return Chip(
                                avatar: const Icon(Icons.attachment, size: 18),
                                label: Text(
                                  attachment.filePath.split('/').last,
                                  style: theme.textTheme.bodySmall,
                                ),
                              );
                            }).toList(),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
                
                // Comments section
                const SizedBox(height: 16),
                Card(
                  elevation: 2,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Comments',
                          style: theme.textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 12),
                        
                        if (grievance.comments != null && grievance.comments!.isNotEmpty)
                          ...grievance.comments!.map((comment) {
                            return CommentTile(comment: comment);
                          }).toList()
                        else
                          EmptyState(
                            icon: Icons.comment,
                            title: l10n.noComments,
                            message: l10n.noCommentsMessage,
                          ),
                      ],
                    ),
                  ),
                ),
                
                // Feedback section (only for resolved grievances)
                if (grievance.status == 'resolved') ...[
                  const SizedBox(height: 16),
                  Card(
                    elevation: 2,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            l10n.submitFeedback,
                            style: theme.textTheme.titleLarge?.copyWith(
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 12),
                          
                          Text(
                            l10n.selectRating,
                            style: theme.textTheme.bodyMedium,
                          ),
                          const SizedBox(height: 8),
                          
                          Wrap(
                            spacing: 8,
                            children: List.generate(5, (index) {
                              final rating = index + 1;
                              return ChoiceChip(
                                label: Text('$rating'),
                                selected: _rating == rating,
                                onSelected: (selected) {
                                  setState(() {
                                    _rating = selected ? rating : null;
                                  });
                                },
                              );
                            }),
                          ),
                          
                          const SizedBox(height: 16),
                          
                          TextField(
                            controller: _feedbackController,
                            decoration: InputDecoration(
                              labelText: l10n.feedback,
                              border: const OutlineInputBorder(),
                              filled: true,
                            ),
                            maxLines: 3,
                          ),
                          
                          const SizedBox(height: 16),
                          
                          CustomButton(
                            text: l10n.submit,
                            onPressed: () async {
                              if (_rating == null) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(l10n.pleaseProvideRating),
                                  ),
                                );
                                return;
                              }
                              
                              try {
                                await GrievanceService().submitFeedback(
                                  widget.id,
                                  _rating!,
                                  _feedbackController.text,
                                );
                                
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(l10n.feedbackSubmitted),
                                    backgroundColor: Colors.green,
                                  ),
                                );
                                
                                _feedbackController.clear();
                                setState(() {
                                  _rating = null;
                                });
                              } catch (e) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('${l10n.error}: $e'),
                                    backgroundColor: Colors.red,
                                  ),
                                );
                              }
                            },
                            icon: Icons.send,
                            fullWidth: true,
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
        
        // Add comment section
        Container(
          padding: const EdgeInsets.all(16.0),
          decoration: BoxDecoration(
            color: Theme.of(context).cardColor,
            border: Border(top: BorderSide(color: Theme.of(context).dividerColor)),
          ),
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _commentController,
                  decoration: InputDecoration(
                    hintText: l10n.addComment,
                    border: const OutlineInputBorder(),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              IconButton(
                icon: const Icon(Icons.send),
                onPressed: _addComment,
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildDetailRow(ThemeData theme, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              '$label:',
              style: theme.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              value,
              style: theme.textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\citizen\submit_grievance.dart ---
// lib/screens/citizen/submit_grievance.dart
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:geolocator/geolocator.dart';
import 'package:image_picker/image_picker.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/providers/master_data_provider.dart';
import 'package:main_ui/services/grievance_service.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/file_upload_widget.dart';
import 'package:main_ui/widgets/loading_indicator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:flutter/foundation.dart' show kIsWeb;

class SubmitGrievance extends ConsumerStatefulWidget {
  const SubmitGrievance({super.key});

  @override
  ConsumerState<SubmitGrievance> createState() => _SubmitGrievanceState();
}

class _SubmitGrievanceState extends ConsumerState<SubmitGrievance> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _addressController = TextEditingController();

  int? _selectedSubjectId;
  int? _selectedAreaId;
  List<PlatformFile> _attachments = [];
  Position? _currentPosition;
  bool _isSubmitting = false;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  Future<void> _getCurrentLocation() async {
    final hasPermission = await _handleLocationPermission();
    if (!hasPermission) return;

    try {
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      setState(() => _currentPosition = position);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${AppLocalizations.of(context)!.error}: $e')),
      );
    }
  }

  Future<bool> _handleLocationPermission() async {
    final status = await Permission.location.request();
    if (status.isGranted) {
      return true;
    } else if (status.isPermanentlyDenied) {
      await openAppSettings();
      return false;
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(AppLocalizations.of(context)!.error)),
      );
      return false;
    }
  }

  Future<void> _pickImage() async {
  final picker = ImagePicker();
  final pickedFile = await picker.pickImage(source: ImageSource.gallery);

  if (pickedFile != null) {
    // Prepare values outside setState
    final fileBytes = kIsWeb ? await pickedFile.readAsBytes() : null;
    final filePath = kIsWeb ? null : pickedFile.path;
    final fileName = pickedFile.name;
    // Compute size: Use bytes length for web, file length for non-web
    final fileSize = kIsWeb
        ? fileBytes?.length ?? 0
        : await File(pickedFile.path).length();

    // Now call setState with already computed values
    setState(() {
      _attachments.add(PlatformFile(
        name: fileName,
        size: fileSize, // Size in bytes, required
        path: filePath, // Path for non-web
        bytes: fileBytes, // Bytes for web
      ));
    });
  }
}

  Future<void> _submitGrievance() async {
    if (!_formKey.currentState!.validate() ||
        _selectedSubjectId == null ||
        _selectedAreaId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(AppLocalizations.of(context)!.error),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isSubmitting = true);

    try {
      final grievanceService = GrievanceService();
await grievanceService.createGrievance(
  title: _titleController.text,
  description: _descriptionController.text,
  subjectId: _selectedSubjectId!,
  areaId: _selectedAreaId!,
  latitude: _currentPosition?.latitude,
  longitude: _currentPosition?.longitude,
  address: _addressController.text.isNotEmpty ? _addressController.text : null,
  attachments: _attachments,
);


      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(AppLocalizations.of(context)!.submitGrievance),
          backgroundColor: Colors.green,
        ),
      );
      Navigator.pop(context);
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${AppLocalizations.of(context)!.error}: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      if (mounted) {
        setState(() => _isSubmitting = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(localizations.submitGrievance),
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: localizations.name,
                  border: const OutlineInputBorder(),
                ),
                validator: (value) => value!.isEmpty ? localizations.error : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: localizations.feedback,
                  border: const OutlineInputBorder(),
                ),
                maxLines: 4,
                validator: (value) => value!.isEmpty ? localizations.error : null,
              ),
              const SizedBox(height: 16),
              ref.watch(subjectsProvider).when(
                    data: (subjects) => DropdownButtonFormField<int>(
                      decoration: InputDecoration(
                        labelText: localizations.filterBySubject,
                        border: const OutlineInputBorder(),
                      ),
                      value: _selectedSubjectId,
                      items: subjects
                          .map((subject) => DropdownMenuItem<int>(
                                value: subject.id,
                                child: Text(subject.name),
                              ))
                          .toList(),
                      onChanged: (value) => setState(() => _selectedSubjectId = value),
                      validator: (value) => value == null ? localizations.error : null,
                    ),
                    loading: () => const LoadingIndicator(),
                    error: (error, stack) => Text('${localizations.error}: $error'),
                  ),
              const SizedBox(height: 16),
              ref.watch(areasProvider).when(
                    data: (areas) => DropdownButtonFormField<int>(
                      decoration: InputDecoration(
                        labelText: localizations.filterByArea,
                        border: const OutlineInputBorder(),
                      ),
                      value: _selectedAreaId,
                      items: areas
                          .map((area) => DropdownMenuItem<int>(
                                value: area.id,
                                child: Text(area.name),
                              ))
                          .toList(),
                      onChanged: (value) => setState(() => _selectedAreaId = value),
                      validator: (value) => value == null ? localizations.error : null,
                    ),
                    loading: () => const LoadingIndicator(),
                    error: (error, stack) => Text('${localizations.error}: $error'),
                  ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _addressController,
                decoration: const InputDecoration(
                  labelText: 'Address (optional)',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  CustomButton(
                    text: 'Get Location',
                    onPressed: _getCurrentLocation,
                    icon: Icons.location_on,
                    fullWidth: false,
                  ),
                  const SizedBox(width: 8),
                  CustomButton(
                    text: 'Pick Image',
                    onPressed: _pickImage,
                    icon: Icons.image,
                    fullWidth: false,
                  ),
                  const SizedBox(width: 8),
                  if (_currentPosition != null)
                    Text(
                      'Lat: ${_currentPosition!.latitude.toStringAsFixed(4)}, '
                      'Lng: ${_currentPosition!.longitude.toStringAsFixed(4)}',
                      style: const TextStyle(fontSize: 12),
                    ),
                ],
              ),
              const SizedBox(height: 16),
              FileUploadWidget(
                onFilesSelected: (files) {
                  setState(() => _attachments.addAll(files));
                },
              ),
              const SizedBox(height: 24),
              CustomButton(
                text: _isSubmitting ? 'Submitting...' : localizations.submit,
                onPressed: _isSubmitting ? null : _submitGrievance,
                icon: Icons.send,
                fullWidth: true,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\citizen\track_grievance.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/providers/grievance_provider.dart';
import 'package:main_ui/widgets/grievance_card.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/loading_indicator.dart';
import 'package:main_ui/widgets/track_grievance_progress.dart';
import 'package:main_ui/l10n/app_localizations.dart';

// Assuming a provider for the authenticated user's ID (e.g., from JWT)
final userIdProvider = Provider<int?>((ref) {
  // Replace with actual logic to get user ID from JWT or auth service
  return 1; // Placeholder: Replace with actual user ID from auth
});

class TrackGrievance extends ConsumerStatefulWidget {
  const TrackGrievance({super.key});

  @override
  ConsumerState<TrackGrievance> createState() => _TrackGrievanceState();
}

class _TrackGrievanceState extends ConsumerState<TrackGrievance> {
  int _selectedIndex = 0;
  final PageController _pageController = PageController(viewportFraction: 0.9);
  int _currentPage = 0;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _startAutoScroll();
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Fetch grievances when the screen loads
    final userId = ref.read(userIdProvider);
    if (userId != null) {
      ref.invalidate(citizenHistoryProvider(userId));
    }
  }

  void _startAutoScroll() {
    Future.delayed(const Duration(seconds: 5), () {
      if (mounted) {
        final nextPage = _currentPage + 1;
        if (nextPage < 3) {
          if (_pageController.hasClients) {
            _pageController.animateToPage(
              nextPage,
              duration: const Duration(milliseconds: 800),
              curve: Curves.easeInOut,
            );
          }
          
        } else {
          _pageController.animateToPage(
            0,
            duration: const Duration(milliseconds: 800),
            curve: Curves.easeInOut,
          );
        }
        _startAutoScroll();
      }
    });
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
    if (index == 1) {
      Navigator.pushNamed(context, '/citizen/submit');
    } else if (index == 2) {
      Navigator.pushNamed(context, '/profile');
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final localizations = AppLocalizations.of(context)!;
    final userId = ref.watch(userIdProvider);

    if (userId == null) {
      return Scaffold(
        appBar: AppBar(
          title: Text(localizations.track_grievances),
          backgroundColor: theme.appBarTheme.backgroundColor,
          foregroundColor: theme.appBarTheme.foregroundColor,
          elevation: theme.appBarTheme.elevation,
        ),
        body: EmptyState(
          icon: Icons.error_outline,
          title: localizations.error,
          message: localizations.please_login,
          actionButton: ElevatedButton(
            onPressed: () => Navigator.pushNamed(context, '/login'),
            child: Text(localizations.login),
          ),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(localizations.track_grievances),
        backgroundColor: theme.appBarTheme.backgroundColor,
        foregroundColor: theme.appBarTheme.foregroundColor,
        elevation: theme.appBarTheme.elevation,
        actions: [
          IconButton(
            icon: const Icon(Icons.settings_outlined),
            onPressed: () => Navigator.pushNamed(context, '/settings'),
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          final userId = ref.read(userIdProvider);
          if (userId != null) {
            ref.invalidate(citizenHistoryProvider(userId));
            await ref.read(citizenHistoryProvider(userId).future);
          }
        },
        child: ref
            .watch(citizenHistoryProvider(userId))
            .when(
              data: (grievances) {
                if (grievances.isEmpty) {
                  return EmptyState(
                    icon: Icons.inbox_rounded,
                    title: localizations.noGrievances,
                    message: localizations.noGrievancesMessage,
                    actionButton: ElevatedButton(
                      onPressed: () =>
                          Navigator.pushNamed(context, '/citizen/submit'),
                      child: Text(localizations.submitGrievance),
                    ),
                  );
                }
                return SingleChildScrollView(
                  physics: const AlwaysScrollableScrollPhysics(),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Promotional Banner Carousel
                      SizedBox(
                        height: 180,
                        child: PageView.builder(
                          controller: _pageController,
                          onPageChanged: (index) {
                            setState(() {
                              _currentPage = index;
                            });
                          },
                          itemCount: 3,
                          itemBuilder: (context, index) {
                            final List<Map<String, dynamic>> banners = [
                              {
                                'title': localizations.submitGrievance,
                                'subtitle': 'Report issues in just a few taps',
                                'color': theme.colorScheme.primaryContainer,
                                'icon': Icons.add_task_rounded,
                              },
                              {
                                'title': localizations.track_grievances,
                                'subtitle':
                                    'Real-time updates on your complaints',
                                'color': theme.colorScheme.secondaryContainer,
                                'icon': Icons.track_changes_rounded,
                              },
                              {
                                'title': 'Quick Resolutions',
                                'subtitle': 'Get your issues resolved faster',
                                'color': theme.colorScheme.tertiaryContainer,
                                'icon': Icons.verified_user_rounded,
                              },
                            ];
                            return _buildBannerItem(banners[index], theme);
                          },
                        ),
                      ),
                      // Page indicators
                      const SizedBox(height: 8),
                      Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: List.generate(3, (index) {
                            return Container(
                              width: 8.0,
                              height: 8.0,
                              margin: const EdgeInsets.symmetric(
                                horizontal: 4.0,
                              ),
                              decoration: BoxDecoration(
                                shape: BoxShape.circle,
                                color: _currentPage == index
                                    ? theme.colorScheme.primary
                                    : Colors.grey[300],
                              ),
                            );
                          }),
                        ),
                      ),
                      const SizedBox(height: 24),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16.0),
                        child: Text(
                          localizations.grievanceDetails,
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.w700,
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      // Grievances List with Progress
                      ListView.builder(
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(),
                        itemCount: grievances.length,
                        itemBuilder: (context, index) {
                          final grievance = grievances[index];
                          return Padding(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 16.0,
                              vertical: 8.0,
                            ),
                            child: Column(
                              children: [
                                GrievanceCard(grievance: grievance),
                                const SizedBox(height: 8),
                                TrackGrievanceProgress(grievance: grievance),
                              ],
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                );
              },
              loading: () => const LoadingIndicator(),
              error: (error, _) => EmptyState(
                icon: Icons.error_outline,
                title: localizations.error,
                message: error.toString(),
                actionButton: ElevatedButton(
                  onPressed: () => ref.refresh(citizenHistoryProvider(userId)),
                  child: Text(localizations.retry),
                ),
              ),
            ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => Navigator.pushNamed(context, '/citizen/submit'),
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: Colors.white,
        child: const Icon(Icons.add_rounded),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.track_changes_outlined),
            activeIcon: Icon(Icons.track_changes_rounded),
            label: 'Track',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.add_circle_outline),
            activeIcon: Icon(Icons.add_circle_rounded),
            label: 'Submit',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person_rounded),
            label: 'Profile',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: theme.colorScheme.primary,
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: true,
        onTap: _onItemTapped,
      ),
    );
  }

  Widget _buildBannerItem(Map<String, dynamic> banner, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Container(
        decoration: BoxDecoration(
          color: banner['color'],
          borderRadius: BorderRadius.circular(16),
        ),
        padding: const EdgeInsets.all(20),
        child: Row(
          children: [
            Icon(
              banner['icon'],
              size: 40,
              color: theme.colorScheme.onPrimaryContainer,
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    banner['title'],
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: theme.colorScheme.onPrimaryContainer,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    banner['subtitle'],
                    style: TextStyle(
                      color: theme.colorScheme.onPrimaryContainer.withValues ( alpha: 
                        0.8,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


=== Folder: screens\common ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\announcements_screen.dart ---
import 'package:flutter/material.dart';

class AnnouncementsScreen extends StatelessWidget {
  const AnnouncementsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Later connect with backend: GET /admin/announcements
    final announcements = [
      {"title": "Emergency Notice", "message": "Water supply disruption in area.", "type": "emergency"},
      {"title": "General Info", "message": "Ward office timings updated.", "type": "general"},
    ];

    return Scaffold(
      appBar: AppBar(title: const Text("Announcements")),
      body: ListView.builder(
        itemCount: announcements.length,
        itemBuilder: (context, index) {
          final ann = announcements[index];
          return Card(
            margin: const EdgeInsets.all(10),
            child: ListTile(
              leading: Icon(
                ann['type'] == "emergency" ? Icons.warning : Icons.info,
                color: ann['type'] == "emergency" ? Colors.red : Colors.blue,
              ),
              title: Text(ann['title']!),
              subtitle: Text(ann['message']!),
            ),
          );
        },
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\app_version_screen.dart ---
import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';

class AppVersionScreen extends StatefulWidget {
  const AppVersionScreen({super.key});

  @override
  State<AppVersionScreen> createState() => _AppVersionScreenState();
}

class _AppVersionScreenState extends State<AppVersionScreen> {
  String version = "Loading...";

  @override
  void initState() {
    super.initState();
    _loadVersion();
  }

  Future<void> _loadVersion() async {
    final info = await PackageInfo.fromPlatform();
    setState(() {
      version = "${info.version} (Build ${info.buildNumber})";
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("App Version")),
      body: Center(
        child: Text("Current Version: $version", style: const TextStyle(fontSize: 18)),
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\contact_support_screen.dart ---
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

class ContactSupportScreen extends StatelessWidget {
  const ContactSupportScreen({super.key});

  void _launchEmail() async {
    final Uri emailUri = Uri(scheme: 'mailto', path: 'support@pcmcapp.com', query: 'subject=App Support');
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  void _launchPhone() async {
    final Uri phoneUri = Uri(scheme: 'tel', path: '+91-9876543210');
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Contact Support")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Need help?", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            const SizedBox(height: 10),
            const Text("You can reach us via email or phone for assistance."),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.email, color: Colors.blue),
              title: const Text("Email Us"),
              subtitle: const Text("support@pcmcapp.com"),
              onTap: _launchEmail,
            ),
            ListTile(
              leading: const Icon(Icons.phone, color: Colors.green),
              title: const Text("Call Us"),
              subtitle: const Text("+91-9876543210"),
              onTap: _launchPhone,
            ),
          ],
        ),
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\faqs_screen.dart ---
import 'package:flutter/material.dart';

class FaqsScreen extends StatelessWidget {
  const FaqsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final faqs = [
      {"q": "How to submit a grievance?", "a": "Go to 'Submit Grievance' from the home screen and fill in details."},
      {"q": "How can I track my complaint?", "a": "Navigate to 'Track Grievance' and enter your grievance ID."},
      {"q": "Can I upload documents?", "a": "Yes, you can upload photos or PDFs as proof while submitting grievances."},
      {"q": "How long does it take to resolve?", "a": "It usually takes 7 working days, depending on priority."},
    ];

    return Scaffold(
      appBar: AppBar(title: const Text("FAQs")),
      body: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: faqs.length,
        separatorBuilder: (_, __) => const Divider(),
        itemBuilder: (context, index) {
          return ExpansionTile(
            title: Text(faqs[index]['q']!, style: const TextStyle(fontWeight: FontWeight.w600)),
            children: [Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(faqs[index]['a']!),
            )],
          );
        },
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\notifications_screen.dart ---
import 'package:flutter/material.dart';

class NotificationsScreen extends StatelessWidget {
  const NotificationsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Later connect with backend: GET /notifications
    final notifications = [
      {"title": "Grievance Update", "body": "Your complaint #123 resolved."},
      {"title": "Reminder", "body": "Submit feedback for grievance #101."},
    ];

    return Scaffold(
      appBar: AppBar(title: const Text("Notifications")),
      body: ListView.builder(
        itemCount: notifications.length,
        itemBuilder: (context, index) {
          final notif = notifications[index];
          return Card(
            margin: const EdgeInsets.all(10),
            child: ListTile(
              leading: const Icon(Icons.notifications),
              title: Text(notif['title']!),
              subtitle: Text(notif['body']!),
            ),
          );
        },
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\profile_screen.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/services/api_service.dart';
import 'package:main_ui/services/auth_service.dart';
import 'package:main_ui/utils/theme.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/loading_indicator.dart';
import 'package:main_ui/widgets/file_upload_widget.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/providers/user_provider.dart';
import 'package:file_picker/file_picker.dart';

class ProfileScreen extends ConsumerStatefulWidget {
  const ProfileScreen({super.key});

  @override
  ConsumerState<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends ConsumerState<ProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;
  late TextEditingController _addressController;
  bool _isEditing = false;
  bool _isLoading = false;
  bool _twoFactorEnabled = false;

  @override
  void initState() {
    super.initState();
    final user = ref.read(userNotifierProvider);
    _nameController = TextEditingController(text: user?.name);
    _emailController = TextEditingController(text: user?.email);
    _phoneController = TextEditingController(text: user?.phoneNumber);
    _addressController = TextEditingController(text: user?.address);
    _twoFactorEnabled = user?.twoFactorEnabled ?? false;
  }

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  Future<void> _updateProfile() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      try {
        final userData = {
          'id': ref.read(userNotifierProvider)!.id.toString(), // Convert to string
          'name': _nameController.text,
          'email': _emailController.text,
          'phoneNumber': _phoneController.text,
          'address': _addressController.text,
          'twoFactorEnabled': _twoFactorEnabled.toString(),
        };
        final updatedUser = await ApiService.addUpdateUser(userData);
        ref.read(userNotifierProvider.notifier).setUser(User.fromJson(updatedUser));
        setState(() => _isEditing = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(AppLocalizations.of(context)!.userUpdatedSuccess)),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(AppLocalizations.of(context)!.failedToUpdateUser)),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _uploadProfilePicture(List<PlatformFile> files) async {
    if (files.isNotEmpty) {
      setState(() => _isLoading = true);
      try {
        final file = files.first;
        final response = await ApiService.uploadProfilePicture(file);
        final user = ref.read(userNotifierProvider)!;
        ref.read(userNotifierProvider.notifier).setUser(
              User(
                id: user.id,
                name: user.name,
                email: user.email,
                phoneNumber: user.phoneNumber,
                role: user.role,
                departmentId: user.departmentId,
                address: user.address,
                profilePicture: response['file_path'],
                lastLogin: user.lastLogin,
                twoFactorEnabled: user.twoFactorEnabled,
                isActive: user.isActive,
              ),
            );
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Profile picture uploaded successfully')),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to upload profile picture')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final user = ref.watch(userNotifierProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(localizations.profile),
        actions: [
          if (user != null)
            IconButton(
              icon: const Icon(Icons.logout),
              tooltip: localizations.logout,
              onPressed: () async {
                setState(() => _isLoading = true);
                try {
                  await AuthService.logout();
                  ref.read(userNotifierProvider.notifier).setUser(null);
                  Navigator.pushReplacementNamed(context, '/login');
                } catch (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(localizations.logoutFailed)),
                  );
                } finally {
                  setState(() => _isLoading = false);
                }
              },
            ),
        ],
      ),
      body: _isLoading
          ? const LoadingIndicator()
          : user == null
              ? _buildNotLoggedInView(context, localizations, theme)
              : _buildProfileView(context, localizations, theme, user),
    );
  }

  Widget _buildNotLoggedInView(
      BuildContext context, AppLocalizations localizations, ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            localizations.please_login,
            style: theme.textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          SizedBox(
            width: 200, // Constrain the button width
            child: CustomButton(
              text: localizations.login,
              icon: Icons.login,
              onPressed: () => Navigator.pushNamed(context, '/login'),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileView(
      BuildContext context, AppLocalizations localizations, ThemeData theme, User user) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // Profile header with picture
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary.withAlpha(40), // Fixed: changed withValues to withAlpha
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Column(
                  children: [
                    Stack(
                      alignment: Alignment.bottomRight,
                      children: [
                        CircleAvatar(
                          radius: 50,
                          backgroundImage:
                              user.profilePicture != null ? NetworkImage(user.profilePicture!) : null,
                          backgroundColor: theme.colorScheme.primary,
                          child: user.profilePicture == null
                              ? Text(
                                  user.name?.isNotEmpty == true ? user.name![0].toUpperCase() : '?',
                                  style: TextStyle(
                                    color: theme.colorScheme.onPrimary,
                                    fontSize: 40,
                                    fontWeight: FontWeight.bold,
                                  ),
                                )
                              : null,
                        ),
                        if (_isEditing)
                          IconButton(
                            icon: const Icon(Icons.camera_alt, color: Colors.white),
                            onPressed: () {
                              showModalBottomSheet(
                                context: context,
                                builder: (context) => FileUploadWidget(
                                  onFilesSelected: _uploadProfilePicture,
                                ),
                              );
                            },
                          ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    Text(
                      user.name ?? localizations.name,
                      style: theme.textTheme.headlineMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: theme.colorScheme.primary,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      user.role?.toUpperCase() ?? 'UNKNOWN',
                      style: theme.textTheme.titleMedium?.copyWith(
                        color: theme.colorScheme.secondary,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
              // Profile details card
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildProfileField(
                        icon: Icons.email,
                        label: localizations.email,
                        value: user.email,
                        controller: _emailController,
                        enabled: _isEditing,
                        validator: (value) =>
                            value == null || !value.contains('@') ? localizations.invalidEmail : null,
                      ),
                      const Divider(),
                      _buildProfileField(
                        icon: Icons.person,
                        label: localizations.name,
                        value: user.name,
                        controller: _nameController,
                        enabled: _isEditing,
                        validator: (value) =>
                            value == null || value.isEmpty ? localizations.nameRequired : null,
                      ),
                      const Divider(),
                      _buildProfileField(
                        icon: Icons.phone,
                        label: 'Phone',
                        value: user.phoneNumber,
                        controller: _phoneController,
                        enabled: _isEditing,
                        validator: (value) =>
                            value == null || value.isEmpty ? 'Phone number is required' : null,
                      ),
                      const Divider(),
                      _buildProfileField(
                        icon: Icons.location_on,
                        label: 'Address',
                        value: user.address,
                        controller: _addressController,
                        enabled: _isEditing,
                      ),
                      const Divider(),
                      ListTile(
                        leading: Icon(Icons.security, color: theme.colorScheme.primary),
                        title: Text('Two-Factor Authentication'),
                        trailing: Switch(
                          value: _twoFactorEnabled,
                          onChanged: _isEditing
                              ? (value) => setState(() => _twoFactorEnabled = value)
                              : null,
                        ),
                      ),
                      const Divider(),
                      ListTile(
                        leading: Icon(Icons.access_time, color: theme.colorScheme.primary),
                        title: Text('Last Login'),
                        subtitle: Text(
                          user.lastLogin != null
                              ? DateFormat('dd/MM/yyyy HH:mm').format(user.lastLogin!)
                              : 'N/A',
                        ),
                      ),
                      const Divider(),
                      ListTile(
                        leading: Icon(Icons.verified_user, color: theme.colorScheme.primary),
                        title: Text('Account Status'),
                        subtitle: Text(user.isActive ? 'Active' : 'Inactive'),
                      ),
                      if (user.departmentId != null) ...[
                        const Divider(),
                        ListTile(
                          leading: Icon(Icons.location_city, color: theme.colorScheme.primary),
                          title: Text('Department'),
                          subtitle: FutureBuilder(
                            future: ApiService.getMasterArea(user.departmentId!),
                            builder: (context, snapshot) {
                              if (snapshot.connectionState == ConnectionState.waiting) {
                                return const Text('Loading...');
                              }
                              if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {
                                return const Text('Unknown');
                              }
                              return Text(snapshot.data!['name'] ?? 'Unknown');
                            },
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 24),
              // Action buttons - FIXED: Added proper constraints
              if (_isEditing) 
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(right: 8.0),
                        child: CustomButton(
                          text: localizations.cancel,
                          backgroundColor: theme.colorScheme.secondary,
                          onPressed: () => setState(() {
                            _isEditing = false;
                            _nameController.text = user.name ?? '';
                            _emailController.text = user.email ?? '';
                            _phoneController.text = user.phoneNumber ?? '';
                            _addressController.text = user.address ?? '';
                            _twoFactorEnabled = user.twoFactorEnabled ?? false;
                          }),
                        ),
                      ),
                    ),
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(left: 8.0),
                        child: CustomButton(
                          text: localizations.update,
                          icon: Icons.save,
                          onPressed: _updateProfile,
                          isLoading: _isLoading,
                        ),
                      ),
                    ),
                  ],
                )
              else
                SizedBox(
                  width: double.infinity,
                  child: CustomButton(
                    text: 'Edit Profile',
                    icon: Icons.edit,
                    onPressed: () => setState(() => _isEditing = true),
                  ),
                ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity, // Make logout button full width
                child: CustomButton(
                  text: localizations.logout,
                  icon: Icons.logout,
                  backgroundColor: theme.colorScheme.error,
                  foregroundColor: theme.colorScheme.onError,
                  onPressed: () async {
                    setState(() => _isLoading = true);
                    try {
                      await AuthService.logout();
                      ref.read(userNotifierProvider.notifier).setUser(null);
                      Navigator.pushReplacementNamed(context, '/login');
                    } catch (e) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(localizations.logoutFailed)),
                      );
                    } finally {
                      setState(() => _isLoading = false);
                    }
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileField({
    required IconData icon,
    required String label,
    required String? value,
    required TextEditingController controller,
    bool enabled = false,
    String? Function(String?)? validator,
  }) {
    return ListTile(
      leading: Icon(icon, color: Theme.of(context).colorScheme.primary),
      title: Text(label),
      subtitle: enabled
          ? TextFormField(
              controller: controller,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                hintText: label,
              ),
              validator: validator,
            )
          : Text(value ?? 'N/A'),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\settings_screen.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/providers/locale_provider.dart';
import 'package:main_ui/providers/user_provider.dart';
import 'package:main_ui/services/auth_service.dart';
import 'package:main_ui/services/api_service.dart';
import 'package:main_ui/utils/validators.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/loading_indicator.dart';

class SettingsScreen extends ConsumerStatefulWidget {
  const SettingsScreen({super.key});

  @override
  ConsumerState<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends ConsumerState<SettingsScreen> {
  bool _notificationsEnabled = true; // Default; fetch from backend
  bool _isLoading = false;
  final _formKey = GlobalKey<FormState>();
  TextEditingController _nameController = TextEditingController();
  TextEditingController _emailController = TextEditingController();
  TextEditingController _passwordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    setState(() => _isLoading = true);
    try {
      final response = await ApiService.get('/settings/'); // New backend route
      if (response != null) {
        setState(() {
          _notificationsEnabled = response.data['notifications_enabled'] ?? true;
          final user = ref.read(userNotifierProvider);
          _nameController.text = user?.name ?? '';
          _emailController.text = user?.email ?? '';
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to load settings: $e')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _saveSettings() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _isLoading = true);
    try {
      await ApiService.post('/settings/', {
        'notifications_enabled': _notificationsEnabled,
        'name': _nameController.text,
        'email': _emailController.text,
        'password': _passwordController.text.isNotEmpty ? _passwordController.text : null,
      });
      await ref.read(userNotifierProvider.notifier).updateUser(); // Refresh user
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Settings saved!')));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to save: $e')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!;
    final locale = ref.watch(localeNotifierProvider);

    return Scaffold(
      appBar: AppBar(title: Text(localizations.settings)),
      body: _isLoading
          ? const LoadingIndicator()
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Account Section
                    Text(localizations.account, style: Theme.of(context).textTheme.titleLarge),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _nameController,
                      decoration: InputDecoration(labelText: localizations.name),
                      validator: validateRequired,
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _emailController,
                      decoration: InputDecoration(labelText: localizations.email),
                      validator: validateEmail,
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _passwordController,
                      decoration: InputDecoration(labelText: '${localizations.password} (optional)'),
                      obscureText: true,
                      validator: (value) => value!.isNotEmpty ? validateRequired(value) : null,
                    ),
                    const SizedBox(height: 24),

                    // Notifications
                    Text(localizations.notifications, style: Theme.of(context).textTheme.titleLarge),
                    SwitchListTile(
                      title: Text(localizations.enableNotifications ?? 'Enable Notifications'),
                      value: _notificationsEnabled,
                      onChanged: (value) => setState(() => _notificationsEnabled = value),
                    ),
                    const SizedBox(height: 24),

                    // Language
                    Text(localizations.language, style: Theme.of(context).textTheme.titleLarge),
                    DropdownButton<Locale>(
                      value: locale,
                      items: const [
                        DropdownMenuItem(value: Locale('en'), child: Text('English')),
                        DropdownMenuItem(value: Locale('mr'), child: Text('Marathi')),
                        DropdownMenuItem(value: Locale('hi'), child: Text('Hindi')),
                      ],
                      onChanged: (value) => ref.read(localeNotifierProvider.notifier).setLocale(value!),
                    ),
                    const SizedBox(height: 24),

                    // Privacy & Security
                    Text(localizations.privacySecurity ?? 'Privacy & Security', style: Theme.of(context).textTheme.titleLarge),
                    ListTile(
                      title: Text(localizations.viewPrivacyPolicy ?? 'View Privacy Policy'),
                      onTap: () => Navigator.pushNamed(context, '/privacy-policy'), // Add route if needed
                    ),
                    const SizedBox(height: 24),

                    // Help & Support
                    Text(localizations.helpSupport ?? 'Help & Support', style: Theme.of(context).textTheme.titleLarge),
                    ListTile(
                      title: Text(localizations.faqs ?? 'FAQs'),
                      onTap: () => Navigator.pushNamed(context, '/faqs'), // Add route if needed
                    ),
                    ListTile(
                      title: Text(localizations.contactSupport ?? 'Contact Support'),
                      onTap: () => Navigator.pushNamed(context, '/contact-support'), // Add route if needed
                    ),
                    const SizedBox(height: 24),

                    // About
                    Text(localizations.about ?? 'About', style: Theme.of(context).textTheme.titleLarge),
                    ListTile(
                      title: Text(localizations.appVersion ?? 'App Version: 1.0.0'),
                      onTap: () => Navigator.pushNamed(context, '/app-version'), 
                    ),
                    const SizedBox(height: 24),

                    // Save & Logout
                    CustomButton(text: localizations.save ?? 'Save', onPressed: _saveSettings),
                    const SizedBox(height: 8),
                    CustomButton(
                      text: localizations.logout ?? 'Logout',
                      backgroundColor: Colors.red,
                      onPressed: () async {
                        await AuthService.logout();
                        ref.read(userNotifierProvider.notifier).setUser(null);
                        Navigator.pushReplacementNamed(context, '/login');
                      },
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\common\view_privacy_policy_screen.dart ---
import 'package:flutter/material.dart';

class PrivacyPolicyScreen extends StatelessWidget {
  const PrivacyPolicyScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Privacy Policy")),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: const [
            Text("Our Commitment", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            Text(
              "We value your privacy and are committed to protecting your personal data. "
              "This policy explains how we handle your information securely.",
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 20),
            Text("1. Data Collection", style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
            SizedBox(height: 8),
            Text("We collect your name, email, and grievance details only to process complaints."),
            SizedBox(height: 20),
            Text("2. Data Usage", style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
            SizedBox(height: 8),
            Text("Your data is used solely for grievance redressal and system improvement."),
            SizedBox(height: 20),
            Text("3. Security", style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
            SizedBox(height: 8),
            Text("We implement encryption and strict access policies to safeguard your information."),
          ],
        ),
      ),
    );
  }
}


=== Folder: screens\field_staff ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\field_staff\assigned_list.dart ---
// lib/screens/field_staff/assigned_list.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/navigation_drawer.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/services/api_service.dart';
import 'package:main_ui/providers/user_provider.dart';

// Define a provider for fetching assigned grievances
final assignedGrievancesProvider = FutureProvider<List<Grievance>>((ref) async {
  final user = ref.watch(userNotifierProvider);
  if (user == null || user.role != 'field_staff') {
    return [];
  }
  final response = await ApiService.get('/grievances/assigned');
  return (response.data as List)
      .map((json) => Grievance.fromJson(json))
      .toList();
});

// Separate card widget for field staff grievances
class FieldStaffGrievanceCard extends StatelessWidget {
  final Grievance grievance;
  const FieldStaffGrievanceCard({super.key, required this.grievance});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      color: theme.colorScheme.surfaceVariant,
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () => Navigator.pushNamed(
          context,
          '/employer/detail',
          arguments: grievance.id,
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      grievance.title ?? 'Untitled Grievance',
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: theme.colorScheme.primary,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Row(
                    children: [
                      _buildStatusBadge(grievance.status ?? 'new', theme),
                      const SizedBox(width: 8),
                      Text(
                        grievance.priority?.toUpperCase() ?? 'N/A',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.secondary,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Text(
                grievance.description ?? 'No description provided',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onSurfaceVariant,
                ),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.calendar_today_rounded,
                        size: 16,
                        color: theme.colorScheme.onSurface.withOpacity(0.6),
                      ),
                      const SizedBox(width: 4),
                      Text(
                        grievance.createdAt != null
                            ? _formatDate(grievance.createdAt!)
                            : 'Unknown date',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.6),
                        ),
                      ),
                    ],
                  ),
                  if (grievance.escalationLevel != null &&
                      grievance.escalationLevel! > 0)
                    Chip(
                      label: Text('Escalated: Level ${grievance.escalationLevel}'),
                      backgroundColor: Colors.orange.withOpacity(0.2),
                      labelStyle: const TextStyle(color: Colors.orange),
                    ),
                ],
              ),
              const SizedBox(height: 8),
              // Quick action buttons specific to field staff
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton.icon(
                    onPressed: () => Navigator.pushNamed(
                      context,
                      '/employer/update',
                      arguments: grievance.id,
                    ),
                    icon: const Icon(Icons.update),
                    label: const Text('Update Status'),
                    style: TextButton.styleFrom(
                      foregroundColor: theme.colorScheme.primary,
                    ),
                  ),
                  const SizedBox(width: 8),
                  TextButton.icon(
                    onPressed: () => Navigator.pushNamed(
                      context,
                      '/employer/upload',
                      arguments: grievance.id,
                    ),
                    icon: const Icon(Icons.upload_file),
                    label: const Text('Upload Proof'),
                    style: TextButton.styleFrom(
                      foregroundColor: theme.colorScheme.secondary,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatusBadge(String status, ThemeData theme) {
    Color color;
    switch (status) {
      case 'new':
        color = Colors.blue;
        break;
      case 'in_progress':
        color = Colors.orange;
        break;
      case 'resolved':
        color = Colors.green;
        break;
      case 'rejected':
        color = Colors.red;
        break;
      case 'on_hold':
        color = Colors.yellow;
        break;
      case 'closed':
        color = Colors.grey;
        break;
      default:
        color = Colors.grey;
    }
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        status.toUpperCase(),
        style: TextStyle(color: color, fontWeight: FontWeight.bold),
      ),
    );
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    if (difference.inDays > 1) {
      return '${difference.inDays} days ago';
    } else if (difference.inDays == 1) {
      return '1 day ago';
    } else if (difference.inHours > 1) {
      return '${difference.inHours} hours ago';
    } else if (difference.inMinutes > 1) {
      return '${difference.inMinutes} minutes ago';
    } else {
      return 'Just now';
    }
  }
}

class AssignedList extends ConsumerWidget {
  const AssignedList({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    final grievancesAsync = ref.watch(assignedGrievancesProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.assignedGrievances ?? 'Assigned Grievances'),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () => Navigator.pushNamed(context, '/notifications'),
          ),
        ],
      ),
      drawer: const CustomNavigationDrawer(),
      body: grievancesAsync.when(
        data: (grievances) {
          if (grievances.isEmpty) {
            return EmptyState(
              icon: Icons.assignment_turned_in,
              title: l10n.noAssigned,
              message:
                  l10n.noAssignedMessage ?? 'No assigned grievances yet.',
              actionButton: TextButton(
                onPressed: () => ref.refresh(assignedGrievancesProvider),
                child: Text(l10n.retry),
              ),
            );
          }

          return RefreshIndicator(
            onRefresh: () => ref.refresh(assignedGrievancesProvider.future),
            child: ListView.builder(
              itemCount: grievances.length,
              itemBuilder: (context, index) {
                final grievance = grievances[index];
                return FieldStaffGrievanceCard(grievance: grievance);
              },
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => EmptyState(
          icon: Icons.error_outline,
          title: l10n.error,
          message: l10n.failedToLoadGrievance,
          actionButton: TextButton(
            onPressed: () => ref.refresh(assignedGrievancesProvider),
            child: Text(l10n.retry),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, '/employer/update');
        },
        child: const Icon(Icons.update),
        tooltip: l10n.updateStatus,
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\field_staff\update_status.dart ---
// lib/screens/employer/update_status.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/custom_button.dart';

class UpdateStatus extends ConsumerWidget {
  const UpdateStatus({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    // Static dummy statuses (replace with enum/API later)
    final List<String> dummyStatuses = ['In Progress', 'On Hold', 'Resolved'];
    String? selectedStatus;

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.updateStatus),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            DropdownButtonFormField<String>(
              value: selectedStatus,
              hint: Text(l10n.selectStatus),
              items: dummyStatuses.map((status) {
                return DropdownMenuItem(value: status, child: Text(status));
              }).toList(),
              onChanged: (value) => selectedStatus = value,
            ),
            const SizedBox(height: 16),
            CustomButton(
              text: l10n.update,
              onPressed: () {
                // Add API update logic later
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Status updated to $selectedStatus')),
                );
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\field_staff\upload_workproof.dart ---
// lib/screens/employer/upload_workproof.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/widgets/file_upload_widget.dart'; // Assuming this exists for file picking

class UploadWorkproof extends ConsumerWidget {
  const UploadWorkproof({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    List<dynamic> selectedFiles = []; // Static holder for selected files

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.uploadWorkproof ?? 'Upload Work Proof'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            FileUploadWidget(
              onFilesSelected: (files) {
                selectedFiles = files;
              },
            ),
            const SizedBox(height: 16),
            CustomButton(
              text: l10n.upload ?? 'Upload',
              onPressed: () {
                // Add API upload logic later (no real upload now)
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Files selected (upload simulated)')),
                );
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}

=== Folder: screens\member_head ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\member_head\assign_grievance.dart ---
// lib/screens/member_head/assign_grievance.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/custom_button.dart';

class AssignGrievance extends ConsumerWidget {
  const AssignGrievance({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    // Static dummy field staff list (replace with API later)
    final List<String> dummyFieldStaff = ['Staff 1', 'Staff 2', 'Staff 3'];
    String? selectedStaff;

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.assignGrievance ?? 'Assign Grievance'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            DropdownButtonFormField<String>(
              value: selectedStaff,
              hint: Text(l10n.selectAssignee),
              items: dummyFieldStaff.map((staff) {
                return DropdownMenuItem(value: staff, child: Text(staff));
              }).toList(),
              onChanged: (value) => selectedStaff = value,
            ),
            const SizedBox(height: 16),
            CustomButton(
              text: l10n.reassign ?? 'Assign',
              onPressed: () {
                // Add API assign logic later
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Assigned to $selectedStaff')),
                );
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\member_head\reject_grievance.dart ---
// lib/screens/member_head/reject_grievance.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/widgets/custom_button.dart';

class RejectGrievance extends ConsumerWidget {
  const RejectGrievance({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    final TextEditingController reasonController = TextEditingController();

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.rejectGrievance ?? 'Reject Grievance'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: reasonController,
              decoration: InputDecoration(
                labelText: l10n.rejectionReason ?? 'Rejection Reason',
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            CustomButton(
              text: l10n.reject ?? 'Reject',
              onPressed: () {
                // Add API reject logic later
                final reason = reasonController.text;
                if (reason.isNotEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Rejected: $reason')),
                  );
                  Navigator.pop(context);
                }
              },
            ),
          ],
        ),
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\screens\member_head\view_grievances.dart ---
// lib/screens/member_head/view_grievances.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/widgets/empty_state.dart';
import 'package:main_ui/widgets/grievance_card.dart';
import 'package:main_ui/widgets/navigation_drawer.dart';
import 'package:main_ui/widgets/custom_button.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/services/api_service.dart';
import 'package:main_ui/providers/user_provider.dart';

// Define a provider for fetching grievances for member_head
final memberHeadGrievancesProvider = FutureProvider<List<Grievance>>((ref) async {
  final user = ref.watch(userNotifierProvider);
  if (user == null || user.role != 'member_head') {
    return [];
  }
  final apiService = await ApiService.get('/grievances/department/${user.departmentId}');
  return (apiService.data as List)
      .map((json) => Grievance.fromJson(json))
      .toList();
});

class ViewGrievances extends ConsumerWidget {
  const ViewGrievances({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    final grievancesAsync = ref.watch(memberHeadGrievancesProvider);
    final theme = Theme.of(context);

    // State for the priority filter slider
    final priorityLevels = ['low', 'medium', 'high', 'urgent'];
    final ValueNotifier<double> priorityFilter = ValueNotifier<double>(0);

    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.viewgrievanceetails ?? 'View Grievances'),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () => Navigator.pushNamed(context, '/notifications'),
            tooltip: l10n.notifications,
          ),
        ],
      ),
      drawer: const CustomNavigationDrawer(), // Add navigation drawer for profile, settings, logout
      body: Column(
        children: [
          // Slider for filtering by priority
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  l10n.filterByPriority,
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                ValueListenableBuilder<double>(
                  valueListenable: priorityFilter,
                  builder: (context, value, child) {
                    return Slider(
                      value: value,
                      min: 0,
                      max: priorityLevels.length - 1,
                      divisions: priorityLevels.length - 1,
                      label: priorityLevels[value.toInt()],
                      onChanged: (newValue) {
                        priorityFilter.value = newValue;
                      },
                      activeColor: theme.colorScheme.primary,
                      inactiveColor: theme.colorScheme.onSurface.withValues (alpha: 0.3),
                    );
                  },
                ),
              ],
            ),
          ),
          // Grievance list
          Expanded(
            child: grievancesAsync.when(
              data: (grievances) {
                // Filter grievances based on priority slider
                final filteredGrievances = grievances.where((grievance) {
                  final priorityIndex = priorityLevels.indexOf(grievance.priority?.toLowerCase() ?? 'medium');
                  return priorityIndex >= priorityFilter.value.toInt();
                }).toList();

                if (filteredGrievances.isEmpty) {
                  return EmptyState(
                    icon: Icons.list_alt,
                    title: l10n.noGrievances,
                    message: l10n.noGrievancesMessage,
                    actionButton: CustomButton(
                      text: l10n.retry,
                      onPressed: () => ref.refresh(memberHeadGrievancesProvider),
                    ),
                  );
                }

                return RefreshIndicator(
                  onRefresh: () => ref.refresh(memberHeadGrievancesProvider.future),
                  child: ListView.builder(
                    itemCount: filteredGrievances.length,
                    itemBuilder: (context, index) {
                      final grievance = filteredGrievances[index];
                      return GrievanceCard(grievance: grievance);
                    },
                  ),
                );
              },
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => EmptyState(
                icon: Icons.error_outline,
                title: l10n.error,
                message: l10n.failedToLoadGrievance,
                actionButton: CustomButton(
                  text: l10n.retry,
                  onPressed: () => ref.refresh(memberHeadGrievancesProvider),
                ),
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, '/member_head/assign');
        },
        child: const Icon(Icons.assignment),
        tooltip: l10n.assignGrievance,
      ),
    );
  }
}

=== Folder: services ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\admin_service.dart ---
import 'package:dio/dio.dart';
import 'api_service.dart';  // Add this import

class AdminService {
  static Future<Map<String, dynamic>> getDashboard() async {
    try {
      final response = await ApiService.get('/admin/dashboard'); // Assuming an endpoint
      return response.data;
    } catch (e) {
      throw Exception('Failed to load dashboard data');
    }
  }

  static Future<List<dynamic>> getAuditLogs() async {
  try {
    final response = await ApiService.get('/admin/audit-logs');
    return response.data as List<dynamic>;
  } catch (e) {
    throw Exception('Failed to load audit logs: $e');
  }
}
}


--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\api_service.dart ---
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/services/auth_service.dart';
import 'package:main_ui/utils/constants.dart';
import 'package:logging/logging.dart';
import 'package:file_picker/file_picker.dart';

final Logger _logger = Logger('ApiService');

class ApiService {
  static final Dio _dio = Dio();

  static Future<void> init() async {
    _dio.options.baseUrl = Constants.baseUrl;
    _dio.options.connectTimeout = Duration(seconds: 10);
    _dio.options.receiveTimeout = Duration(seconds: 15);
    _dio.options.headers = {'Content-Type': 'application/json'};

    // Add interceptor to attach JWT token
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        final token = await AuthService.getToken();
        if (token != null && token.isNotEmpty) {
          options.headers['Authorization'] = 'Bearer $token';
          _logger.fine('Added Authorization header with token');
        } else {
          _logger.warning('No token available for request: ${options.path}');
        }
        return handler.next(options);
      },
      onError: (DioException error, handler) async {
        if (error.response?.statusCode == 401) {
          _logger.warning('Unauthorized request: ${error.requestOptions.path}. Logging out.');
          await AuthService.logout();
          // Optionally trigger navigation to login screen via a provider or event
        }
        return handler.next(error);
      },
    ));

    _logger.info('ApiService initialized with base URL: ${Constants.baseUrl}');
  }

  // Generic GET method
  static Future<Response> get(
    String path, {
    Map<String, dynamic>? headers,
    ResponseType? responseType,
    Options? options,
  }) async {
    final mergedOptions = options ??
        Options(
          headers: headers,
          responseType: responseType,
        );
    
    final url = _dio.options.baseUrl + path;
    print("📌 Requesting URL: $url");
    try {
      return await _dio.get(path, options: mergedOptions);
    } on DioException catch (e) {
      _logger.severe('GET request failed: $path, Error: ${e.message}');
      rethrow;
    }
  }

  // Generic POST method
  static Future<Response> post(
    String path,
    dynamic data, {
    Map<String, dynamic>? headers,
    ResponseType? responseType,
  }) async {
    try {
      return await _dio.post(
        path,
        data: data,
        options: Options(
          headers: headers,
          responseType: responseType,
        ),
      );
    } on DioException catch (e) {
      _logger.severe('POST request failed: $path, Error: ${e.message}');
      rethrow;
    }
  }

  // Generic PUT method
  static Future<Response> put(
    String path,
    dynamic data, {
    Map<String, dynamic>? headers,
    ResponseType? responseType,
  }) async {
    try {
      return await _dio.put(
        path,
        data: data,
        options: Options(
          headers: headers,
          responseType: responseType,
        ),
      );
    } on DioException catch (e) {
      _logger.severe('PUT request failed: $path, Error: ${e.message}');
      rethrow;
    }
  }

  // Generic DELETE method
  static Future<Response> delete(
    String path, {
    Map<String, dynamic>? headers,
    ResponseType? responseType,
  }) async {
    try {
      return await _dio.delete(
        path,
        options: Options(
          headers: headers,
          responseType: responseType,
        ),
      );
    } on DioException catch (e) {
      _logger.severe('DELETE request failed: $path, Error: ${e.message}');
      rethrow;
    }
  }

  // Fetch all users
  static Future<List<User>> getUsers() async {
    try {
      final response = await _dio.get('/users/');
      final List<dynamic> data = response.data;
      return data.map((json) => User.fromJson(json)).toList();
    } on DioException catch (e) {
      _logger.severe('Failed to load users: ${e.message}');
      throw Exception('Failed to load users: ${e.message}');
    }
  }

  // Add or update a user
  static Future<Map<String, dynamic>> addUpdateUser(Map<String, String> userData) async {
    try {
      final response = await _dio.post('/users', data: userData);
      return response.data as Map<String, dynamic>;
    } on DioException catch (e) {
      _logger.severe('Failed to add/update user: ${e.message}');
      throw Exception('Failed to add/update user: ${e.message}');
    }
  }

  // Upload profile picture
  static Future<Map<String, dynamic>> uploadProfilePicture(PlatformFile file) async {
    try {
      final formData = FormData.fromMap({
        'file': MultipartFile.fromBytes(file.bytes!, filename: file.name),
      });
      final response = await _dio.post('/users/profile-picture', data: formData);
      return response.data as Map<String, dynamic>;
    } on DioException catch (e) {
      _logger.severe('Failed to upload profile picture: ${e.message}');
      throw Exception('Failed to upload profile picture: ${e.message}');
    }
  }

  // Fetch area by ID
  static Future<Map<String, dynamic>?> getMasterArea(int areaId) async {
    try {
      final response = await _dio.get('/areas/$areaId');
      return response.data as Map<String, dynamic>?;
    } on DioException catch (e) {
      _logger.severe('Failed to fetch area $areaId: ${e.message}');
      throw Exception('Failed to fetch area: ${e.message}');
    }
  }

  // Delete a user
  static Future<void> deleteUser(int userId) async {
    try {
      await _dio.delete('/users/$userId/');
    } on DioException catch (e) {
      _logger.severe('Failed to delete user $userId: ${e.message}');
      throw Exception('Failed to delete user: ${e.message}');
    }
  }

  // Fetch a specific grievance by ID
  static Future<Response> getGrievance(int id) async {
    try {
      final response = await _dio.get('/grievances/$id');
      return response;
    } on DioException catch (e) {
      _logger.severe('Failed to fetch grievance $id: ${e.message}');
      throw Exception('Failed to fetch grievance: ${e.message}');
    }
  }

  static Dio get dio => _dio;
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\auth_service.dart ---
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_web_auth_2/flutter_web_auth_2.dart';

import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/user_model.dart';
import '../firebase_options.dart';
import 'package:main_ui/utils/constants.dart';

class AuthService {
  static final String _baseUrl = Constants.baseUrl; // Update with your backend URL
  static final fb_auth.FirebaseAuth _firebaseAuth = fb_auth.FirebaseAuth.instance;
  static String? _token;
  static final _authStateController = StreamController<String?>.broadcast();

  // Stream to notify UI about auth changes
  static Stream<String?> get authStateChanges => _authStateController.stream;

  // Initialize SharedPreferences once
  static Future<SharedPreferences> get _storage async {
    return await SharedPreferences.getInstance();
  }

  /// Initializes the AuthService
  static Future<void> initialize() async {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    final prefs = await _storage;
    _token = prefs.getString('access_token');
    _authStateController.add(_token); // Notify initial token state
  }

  /// Stores backend JWT token
  static Future<String?> setToken(Map<String, dynamic> response) async {
    final backendToken = response['access_token'];
    if (backendToken == null || backendToken.isEmpty) {
      throw Exception('Invalid token received');
    }
    final prefs = await _storage;
    await prefs.setString('access_token', backendToken);
    _token = backendToken;
    _authStateController.add(backendToken); // Notify token change
    return backendToken;
  }

  /// Public method to store a token (for external use if needed)
  static Future<void> storeToken(String token) async {
    if (token.isEmpty) {
      throw Exception('Cannot store empty token');
    }
    final prefs = await _storage;
    await prefs.setString('access_token', token);
    _token = token;
    _authStateController.add(token); // Notify token change
  }

  /// Initiates Google Sign-In flow using backend OAuth
  static Future<void> googleLogin() async {
    try {
      final result = await FlutterWebAuth2.authenticate(
        url: '$_baseUrl/auth/google',
        callbackUrlScheme: 'com.example.mainUi', // Update with your app's scheme
      );
      final response = await http.get(
        Uri.parse('$_baseUrl/auth/google/callback?$result'),
      );
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        await setToken(data);
      } else {
        throw Exception(json.decode(response.body)['msg'] ?? 'Google login failed');
      }
    } catch (e) {
      print('Google login failed: $e');
      rethrow;
    }
  }

  /// Registers a new user with email and password
  static Future<void> register(String name, String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/auth/register'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'name': name,
          'email': email,
          'password': password,
          'role': 'CITIZEN',
        }),
      );
      if (response.statusCode == 200) {
        await passwordLogin(email, password); // Auto-login after registration
      } else {
        throw Exception(json.decode(response.body)['msg'] ?? 'Registration failed');
      }
    } catch (e) {
      print('Registration failed: $e');
      rethrow;
    }
  }

  /// Signs in a user with email and password
  static Future<void> passwordLogin(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'email': email, 'password': password}),
      );
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        await setToken(data);
      } else {
        throw Exception(json.decode(response.body)['msg'] ?? 'Login failed');
      }
    } catch (e) {
      print('Password login failed: $e');
      rethrow;
    }
  }

  /// Requests OTP for mobile login
  static Future<void> requestOtp(String phoneNumber) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/auth/otp/request'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'phone_number': phoneNumber}),
      );
      if (response.statusCode != 200) {
        throw Exception(json.decode(response.body)['msg'] ?? 'Failed to request OTP');
      }
    } catch (e) {
      print('OTP request failed: $e');
      rethrow;
    }
  }

  /// Verifies OTP for mobile login
  static Future<void> verifyOtp(String phoneNumber, String otp) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/auth/otp/verify'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'phone_number': phoneNumber, 'otp': otp}),
      );
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        await setToken(data);
      } else {
        throw Exception(json.decode(response.body)['msg'] ?? 'OTP verification failed');
      }
    } catch (e) {
      print('OTP verification failed: $e');
      rethrow;
    }
  }

  /// Fetches the current user's profile from the backend
  static Future<User?> getCurrentUser() async {
    try {
      final token = await getToken();
      if (token == null || token.isEmpty) return null;
      final response = await http.get(
        Uri.parse('$_baseUrl/auth/me'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (response.statusCode == 200) {
        return User.fromJson(json.decode(response.body));
      } else {
        await logout();
        return null;
      }
    } catch (e) {
      print('Error fetching user: $e');
      return null;
    }
  }

  /// Signs out the current user
  static Future<void> logout() async {
    try {
      final prefs = await _storage;
      await prefs.remove('access_token');
      _token = null;
      _authStateController.add(null); // Notify token cleared
      await _firebaseAuth.signOut();
    } catch (e) {
      print('Logout failed: $e');
    }
  }

  /// Gets the stored backend JWT
  static Future<String?> getToken() async {
    if (_token != null && _token!.isNotEmpty) return _token;
    final prefs = await _storage;
    _token = prefs.getString('access_token');
    return _token?.isNotEmpty == true ? _token : null;
  }

  /// Closes the auth state stream
  static void dispose() {
    _authStateController.close();
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\file_service.dart ---
// lib/services/file_service.dart
import 'package:file_picker/file_picker.dart';

class FileService {
  static Future<List<PlatformFile>> pickFiles() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: ['pdf', 'jpg', 'jpeg'],
    );
    if (result != null) {
      return result.files;
    }
    return [];
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\grievance_service.dart ---
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:file_picker/file_picker.dart';
import '../models/grievance_model.dart';
import 'api_service.dart';
import 'package:geolocator/geolocator.dart';

class GrievanceService {
  static final Dio _dio = ApiService.dio;

  // Note: This service assumes a Dio interceptor is configured in ApiService
  // to automatically handle the JWT Authorization header.
  GrievanceService();

  // Helper to parse grievance lists from response, reducing code duplication.
  List<Grievance> _parseGrievanceList(Response response) {
    if (response.data is List) {
      return (response.data as List).map((g) => Grievance.fromJson(g)).toList();
    }
    if (response.data is Map && response.data['grievances'] is List) {
      return (response.data['grievances'] as List).map((g) => Grievance.fromJson(g)).toList();
    }
    throw Exception('Unexpected response format: ${response.data}');
  }

  // Helper to create consistent error messages from DioExceptions.
  Exception _handleDioException(DioException e, String action) {
    String errorMessage;
    if (e.type == DioExceptionType.connectionError || e.type == DioExceptionType.connectionTimeout) {
      errorMessage = 'Unable to connect to the server. Please check your network or server status.';
    } else if (e.response?.statusCode == 401) {
      errorMessage = 'Unauthorized: Please log in again.';
    } else {
      errorMessage = 'Failed to $action: ${e.response?.data?['msg'] ?? e.message}';
    }
    return Exception(errorMessage);
  }

  static Future<Position?> _getLocation() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) return null;
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) return null;
    }
    return await Geolocator.getCurrentPosition();
  }

  Future<Grievance> getGrievanceDetails(int id) async {
  try {
    print('GrievanceService: Sending GET /grievances/mine');
    final response = await _dio.get('/grievances/mine');
    
    // Check if response.data is a List
    if (response.data is List) {
      final grievances = (response.data as List)
          .map((json) => Grievance.fromJson(json as Map<String, dynamic>))
          .toList();
      
      // Find the grievance with the matching id
      final grievance = grievances.firstWhere(
        (g) => g.id == id,
        orElse: () => throw Exception('Grievance with id $id not found'),
      );
      
      return grievance;
    } else {
      // If response.data is already a single object
      return Grievance.fromJson(response.data as Map<String, dynamic>);
    }
  } on DioException catch (e) {
    print('GrievanceService: DioError fetching grievance details: ${e.response?.statusCode} - ${e.response?.data}');
    throw _handleDioException(e, 'fetch grievance details');
  } catch (e) {
    print('GrievanceService: Unexpected error fetching grievance details: $e');
    rethrow;
  }
}

  Future<List<Grievance>> getAllGrievances() async {
  try {
    print('GrievanceService: Sending GET /admin/grievances/all');
    final response = await _dio.get('/admin/grievances/all');
    print('Full request URL: ${response.requestOptions.uri}');
    return _parseGrievanceList(response);
  } on DioException catch (e) {
    print('GrievanceService: DioError fetching all grievances: ${e.response?.statusCode} - ${e.response?.data}');    
    throw _handleDioException(e, 'fetch all grievances');
  } catch (e) {
    print('GrievanceService: Unexpected error fetching all grievances: $e');
    rethrow;
  }
}

  Future<List<Grievance>> getGrievancesByUserId(int userId) async {
    try {
      // NOTE: The endpoint was changed from '/grievance/track' to use the userId.
      // Ensure your backend has a corresponding route like '/grievances/user/<int:user_id>'.
      print('GrievanceService: Sending GET /track');
      final response = await _dio.get('/grievances/track');
      print('Response: ${response.data}');
      return _parseGrievanceList(response);
    } on DioException catch (e) {
      print('GrievanceService: DioError fetching user grievances: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'fetch user grievances');
    } catch (e) {
      print('GrievanceService: Unexpected error fetching user grievances: $e');
      rethrow;
    }
  }

  Future<void> addComment(int id, String commentText) async {
    try {
      print('GrievanceService: Sending POST /grievances/$id/comments with comment: $commentText');
      final response = await _dio.post(
        '/grievances/$id/comments',
        data: {'comment_text': commentText},
      );
      if (response.statusCode != 201) {
        throw Exception('Failed to add comment: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError adding comment: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'add comment');
    } catch (e) {
      print('GrievanceService: Unexpected error adding comment: $e');
      rethrow;
    }
  }

  Future<List<Grievance>> getMyGrievances() async {
    try {
      print('GrievanceService: Sending GET /grievances/mine with headers: ${_dio.options.headers}');
      final response = await _dio.get('/grievances/mine');
      return _parseGrievanceList(response);
    } on DioException catch (e) {
      print('GrievanceService: DioError fetching my grievances: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'fetch my grievances');
    } catch (e) {
      print('GrievanceService: Unexpected error fetching my grievances: $e');
      rethrow;
    }
  }

  Future<List<Grievance>> getNewGrievances() async {
    try {
      print('GrievanceService: Sending GET /grievances/new');
      final response = await _dio.get('/grievances/new');
      return _parseGrievanceList(response);
    } on DioException catch (e) {
      print('GrievanceService: DioError fetching new grievances: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'fetch new grievances');
    } catch (e) {
      print('GrievanceService: Unexpected error fetching new grievances: $e');
      rethrow;
    }
  }

  Future<List<Grievance>> getAssignedGrievances() async {
    try {
      print('GrievanceService: Sending GET /grievances/assigned');
      final response = await _dio.get('/grievances/assigned');
      return _parseGrievanceList(response);
    } on DioException catch (e) {
      print('GrievanceService: DioError fetching assigned grievances: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'fetch assigned grievances');
    } catch (e) {
      print('GrievanceService: Unexpected error fetching assigned grievances: $e');
      rethrow;
    }
  }

  Future<void> createGrievance({
    required String title,
    required String description,
    required int subjectId,
    required int areaId,
    String? priority,
    double? latitude,
    double? longitude,
    String? address,
    List<PlatformFile>? attachments,
  }) async {
    try {
      Position? position = await _getLocation();
      final formData = FormData.fromMap({
        'title': title,
        'description': description,
        'subject_id': subjectId,
        'area_id': areaId,
        'priority': priority ?? 'medium',
        if (position != null) 'latitude': position.latitude,
        if (position != null) 'longitude': position.longitude,
        if (address != null) 'address': address,
        if (attachments != null && attachments.isNotEmpty)
          'attachments': attachments.map((file) {
            if (kIsWeb) {
              return MultipartFile.fromBytes(file.bytes!, filename: file.name);
            } else {
              return MultipartFile.fromFileSync(file.path!, filename: file.path!.split('/').last);
            }
          }).toList(),
      });
      final response = await _dio.post('/grievances/', data: formData);
      if (response.statusCode == 201) {
        print('GrievanceService: Grievance created successfully');
      } else {
        throw Exception('Failed to create grievance: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError submitting grievance: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'create grievance');
    } catch (e) {
      print('GrievanceService: Unexpected error submitting grievance: $e');
      rethrow;
    }
  }

  Future<void> submitFeedback(int grievanceId, int rating, String feedbackText) async {
    try {
      print('GrievanceService: Sending POST /grievances/$grievanceId/feedback with rating: $rating, feedback: $feedbackText');
      final response = await _dio.post(
        '/grievances/$grievanceId/feedback',
        data: {
          'rating': rating,
          'feedback_text': feedbackText,
        },
      );
      if (response.statusCode != 200) {
        throw Exception('Failed to submit feedback: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError submitting feedback: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'submit feedback');
    } catch (e) {
      print('GrievanceService: Unexpected error submitting feedback: $e');
      rethrow;
    }
  }

  Future<void> reassignGrievance(int grievanceId, int assigneeId) async {
    try {
      print('GrievanceService: Sending PUT /grievances/$grievanceId/reassign with assignee_id: $assigneeId');
      final response = await _dio.put(
        '/grievances/$grievanceId/reassign',
        data: {'assignee_id': assigneeId},
      );
      if (response.statusCode != 200) {
        throw Exception('Failed to reassign grievance: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError reassigning grievance: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'reassign grievance');
    } catch (e) {
      print('GrievanceService: Unexpected error reassigning grievance: $e');
      rethrow;
    }
  }

  Future<void> updateGrievanceStatus(int grievanceId, String status) async {
    try {
      print('GrievanceService: Sending PUT /grievances/$grievanceId/status with status: $status');
      final response = await _dio.put(
        '/grievances/$grievanceId/status',
        data: {'status': status},
      );
      if (response.statusCode != 200) {
        throw Exception('Failed to update grievance status: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError updating grievance status: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'update grievance status');
    } catch (e) {
      print('GrievanceService: Unexpected error updating grievance status: $e');
      rethrow;
    }
  }

  Future<void> escalateGrievance(int grievanceId, {int? assigneeId}) async {
    try {
      print('GrievanceService: Sending POST /grievances/$grievanceId/escalate');
      final data = assigneeId != null ? {'assignee_id': assigneeId} : {};
      final response = await _dio.post(
        '/grievances/$grievanceId/escalate',
        data: data,
      );
      if (response.statusCode != 200) {
        throw Exception('Failed to escalate grievance: ${response.statusMessage}');
      }
    } on DioException catch (e) {
      print('GrievanceService: DioError escalating grievance: ${e.response?.statusCode} - ${e.response?.data}');
      throw _handleDioException(e, 'escalate grievance');
    } catch (e) {
      print('GrievanceService: Unexpected error escalating grievance: $e');
      rethrow;
    }
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\master_data_service.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:dio/dio.dart';
import '../models/master_data_model.dart';
import '../services/api_service.dart';

// Providers for fetching master data
final subjectsProvider = FutureProvider<List<MasterSubject>>((ref) async {
  return MasterDataService.getSubjects();
});

final areasProvider = FutureProvider<List<MasterArea>>((ref) async {
  return MasterDataService.getAreas();
});

class MasterDataService {
  static Future<List<MasterArea>> getAreas() async {
    try {
      print('MasterDataService: Sending GET /areas');
      final response = await ApiService.get('/areas');
      return (response.data as List).map((a) => MasterArea.fromJson(a)).toList();
    } catch (e) {
      print('Error fetching areas: $e');
      rethrow;
    }
  }

  static Future<void> addArea(Map<String, dynamic> data) async {
    try {
      print('MasterDataService: Sending POST /areas with data: $data');
      await ApiService.post('/areas', data);
    } catch (e) {
      print('Error adding area: $e');
      rethrow;
    }
  }

  static Future<List<MasterSubject>> getSubjects() async {
    try {
      print('MasterDataService: Sending GET /subjects');
      final response = await ApiService.get('/subjects');
      return (response.data as List).map((s) => MasterSubject.fromJson(s)).toList();
    } on DioException catch (e) {
      print('DioError fetching subjects: ${e.response?.statusCode} - ${e.response?.data}');
      if (e.response?.statusCode == 405) {
        throw Exception('Use GET for listing subjects.');
      }
      throw Exception('Error fetching subjects: ${e.message}');
    } catch (e) {
      print('Unexpected error fetching subjects: $e');
      rethrow;
    }
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\notification_service.dart ---
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:main_ui/services/api_service.dart';

class NotificationService {
  static final FirebaseMessaging _messaging = FirebaseMessaging.instance;

  static Future<void> initialize() async {
    await _messaging.requestPermission();
    final token = await _messaging.getToken();
    print('FCM Token: $token');

    // Send token to backend
    await ApiService.post('/notifications/register', {'fcm_token': token});

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('Foreground message: ${message.notification?.title}');
    });

    FirebaseMessaging.onBackgroundMessage(_backgroundHandler);
  }

  static Future<void> _backgroundHandler(RemoteMessage message) async {
    print('Background message: ${message.notification?.title}');
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\storage_service.dart ---
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class StorageService {
  static const _storage = FlutterSecureStorage();

  static Future<void> saveLocale(String locale) async {
    await _storage.write(key: 'locale', value: locale);
  }

  static Future<String?> getLocale() async {
    return await _storage.read(key: 'locale');
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\services\user_service.dart ---
// user_service.dart
import 'package:dio/dio.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/services/api_service.dart';

class UserService {
  /// Fetch all users
  static Future<List<User>> getUsers() async {
    try {
      print('Fetching all users...'); // Debug log
      final response = await ApiService.get(
        '/admins/users',
        headers: {
          'Accept': 'application/json',
        },
      );

      if (response.data == null || response.data is! List) {
        throw Exception('Invalid response format: Expected a list of users');
      }

      print('Fetched users: ${response.data.length}'); // Debug log
      return (response.data as List)
          .map((user) => User.fromJson(user as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      print('DioError during getUsers: ${e.message}');
      print('Response: ${e.response?.data}');
      print('Status: ${e.response?.statusCode}');

      if (e.response?.statusCode == 404) {
        throw Exception('Users endpoint not found. Check backend routes.');
      } else if (e.response?.statusCode == 405) {
        throw Exception('Invalid method. Use GET for listing users.');
      } else if (e.type == DioExceptionType.connectionError ||
          e.type == DioExceptionType.connectionTimeout) {
        throw Exception('Network error: Unable to connect to the server');
      }
      throw Exception('Failed to load users: ${e.message}');
    } catch (e) {
      throw Exception('Unexpected error while loading users: $e');
    }
  }

  /// Add a new user
  static Future<User> addUser(Map<String, dynamic> data) async {
    try {
      print('Adding new user with data: $data'); // Debug log
      final response = await ApiService.post(
        '/admin/users',
        data,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      );

      print('Add user response: ${response.data}'); // Debug log
      return User.fromJson(response.data);
    } on DioException catch (e) {
      print('DioError during addUser: ${e.message}');
      print('Response: ${e.response?.data}');
      print('Status: ${e.response?.statusCode}');
      throw Exception('Failed to add user: ${e.response?.data?['msg'] ?? e.message}');
    } catch (e) {
      throw Exception('Unexpected error while adding user: $e');
    }
  }

  /// Update an existing user
  static Future<User> updateUser(int id, Map<String, dynamic> data) async {
    try {
      print('Updating user $id with data: $data'); // Debug log
      final response = await ApiService.put(
        '/admin/users/$id',
        data,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      );

      print('Update response: ${response.data}'); // Debug log
      return User.fromJson(response.data);
    } on DioException catch (e) {
      print('DioError during update: ${e.message}');
      print('Response: ${e.response?.data}');
      print('Status: ${e.response?.statusCode}');

      if (e.type == DioExceptionType.connectionError) {
        throw Exception('Network error: Unable to connect to the server. Check if the server is running.');
      } else if (e.response != null) {
        throw Exception('Failed to update user: ${e.response?.data?['msg'] ?? e.message}');
      }
      throw Exception('Failed to update user: ${e.message}');
    } catch (e) {
      print('Unexpected error during update: $e');
      throw Exception('Unexpected error while updating user: $e');
    }
  }

  /// Delete a user
  static Future<void> deleteUser(int id) async {
    try {
      print('Deleting user $id...'); // Debug log
      final response = await ApiService.delete(
        '/admin/users/$id',
        headers: {
          'Accept': 'application/json',
        },
      );
      print('Delete response: ${response.data}'); // Debug log
    } on DioException catch (e) {
      print('DioError during deleteUser: ${e.message}');
      print('Response: ${e.response?.data}');
      print('Status: ${e.response?.statusCode}');
      throw Exception('Failed to delete user: ${e.response?.data?['msg'] ?? e.message}');
    } catch (e) {
      throw Exception('Unexpected error while deleting user: $e');
    }
  }
}


=== Folder: utils ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\utils\constants.dart ---
import 'package:flutter/foundation.dart'
    show kIsWeb, defaultTargetPlatform, TargetPlatform;

class Constants {
  static String get baseUrl {
    if (kIsWeb) {
      return "http://localhost:5000";
    }

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return "http://10.0.2.2:5000"; // Android emulator
      case TargetPlatform.iOS:
      case TargetPlatform.macOS:
      case TargetPlatform.windows:
      case TargetPlatform.linux:
      default:
        return "http://localhost:5000";
    }
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\utils\theme.dart ---
// lib/utils/theme.dart
import 'package:flutter/material.dart';

// Color palette
const Color primaryColor = Color(0xFF1976D2);
const Color secondaryColor = Color(0xFF42A5F5);
const Color accentColor = Color(0xFFFF7043);
const Color successColor = Color(0xFF4CAF50);
const Color warningColor = Color(0xFFFF9800);
const Color errorColor = Color(0xFFF44336);
const Color backgroundColor = Color(0xFFF5F5F5);
const Color surfaceColor = Color(0xFFFFFFFF);
const Color onPrimaryColor = Color(0xFFFFFFFF);
const Color onSecondaryColor = Color(0xFFFFFFFF);
const Color onBackgroundColor = Color(0xFF000000);
const Color onSurfaceColor = Color(0xFF000000);
const Color greyColor = Color(0xFF9E9E9E);
const Color lightGreyColor = Color(0xFFEEEEEE);

// Text styles
const TextStyle headline1 = TextStyle(
  fontSize: 32.0,
  fontWeight: FontWeight.bold,
  color: onBackgroundColor,
);

const TextStyle headline2 = TextStyle(
  fontSize: 24.0,
  fontWeight: FontWeight.bold,
  color: onBackgroundColor,
);

const TextStyle headline3 = TextStyle(
  fontSize: 20.0,
  fontWeight: FontWeight.bold,
  color: onBackgroundColor,
);

const TextStyle subtitle1 = TextStyle(
  fontSize: 16.0,
  fontWeight: FontWeight.w500,
  color: onBackgroundColor,
);

const TextStyle bodyText1 = TextStyle(
  fontSize: 16.0,
  fontWeight: FontWeight.normal,
  color: onBackgroundColor,
);

const TextStyle bodyText2 = TextStyle(
  fontSize: 14.0,
  fontWeight: FontWeight.normal,
  color: onBackgroundColor,
);

const TextStyle caption = TextStyle(
  fontSize: 12.0,
  fontWeight: FontWeight.normal,
  color: greyColor,
);

const TextStyle buttonText = TextStyle(
  fontSize: 16.0,
  fontWeight: FontWeight.w600,
  color: onPrimaryColor,
);

// Theme data
final ThemeData lightTheme = ThemeData(
  brightness: Brightness.light,
  primaryColor: primaryColor,
  colorScheme: const ColorScheme.light(
    primary: primaryColor,
    secondary: secondaryColor,
    surface: surfaceColor,
    background: backgroundColor,
    error: errorColor,
    onPrimary: onPrimaryColor,
    onSecondary: onSecondaryColor,
    onSurface: onSurfaceColor,
    onBackground: onBackgroundColor,
    onError: onPrimaryColor,
  ),
  scaffoldBackgroundColor: backgroundColor,
  appBarTheme: const AppBarTheme(
    backgroundColor: primaryColor,
    foregroundColor: onPrimaryColor,
    elevation: 2,
    centerTitle: true,
    titleTextStyle: TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.w600,
      color: onPrimaryColor,
    ),
  ),
  cardTheme: CardThemeData(
    elevation: 2,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    margin: const EdgeInsets.all(8),
    color: surfaceColor,
  ),
  inputDecorationTheme: InputDecorationTheme(
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: greyColor),
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: greyColor),
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: primaryColor, width: 2),
    ),
    errorBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: errorColor),
    ),
    filled: true,
    fillColor: surfaceColor,
    contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
  ),
  buttonTheme: const ButtonThemeData(
    buttonColor: primaryColor,
    textTheme: ButtonTextTheme.primary,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.all(Radius.circular(12)),
    ),
  ),
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      backgroundColor: primaryColor,
      foregroundColor: onPrimaryColor,
      textStyle: buttonText,
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
    ),
  ),
  textButtonTheme: TextButtonThemeData(
    style: TextButton.styleFrom(
      foregroundColor: primaryColor,
      textStyle: buttonText.copyWith(color: primaryColor),
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
    ),
  ),
  outlinedButtonTheme: OutlinedButtonThemeData(
    style: OutlinedButton.styleFrom(
      foregroundColor: primaryColor,
      side: const BorderSide(color: primaryColor),
      textStyle: buttonText.copyWith(color: primaryColor),
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
    ),
  ),
  textTheme: TextTheme(
    displayLarge: headline1,
    displayMedium: headline2,
    displaySmall: headline3,
    titleMedium: subtitle1,
    bodyLarge: bodyText1,
    bodyMedium: bodyText2,
    labelSmall: caption,
  ),
  iconTheme: const IconThemeData(
    color: primaryColor,
    size: 24,
  ),
  dividerTheme: const DividerThemeData(
    color: lightGreyColor,
    thickness: 1,
    space: 1,
  ),
);

final ThemeData darkTheme = ThemeData(
  brightness: Brightness.dark,
  primaryColor: primaryColor,
  colorScheme: const ColorScheme.dark(
    primary: primaryColor,
    secondary: secondaryColor,
    surface: Color(0xFF121212),
    background: Color(0xFF000000),
    error: errorColor,
    onPrimary: onPrimaryColor,
    onSecondary: onSecondaryColor,
    onSurface: Color(0xFFFFFFFF),
    onBackground: Color(0xFFFFFFFF),
    onError: onPrimaryColor,
  ),
  scaffoldBackgroundColor: const Color(0xFF000000),
  appBarTheme: const AppBarTheme(
    backgroundColor: Color(0xFF121212),
    foregroundColor: Color(0xFFFFFFFF),
    elevation: 2,
    centerTitle: true,
    titleTextStyle: TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.w600,
      color: Color(0xFFFFFFFF),
    ),
  ),
  cardTheme: CardThemeData(
    elevation: 2,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    margin: const EdgeInsets.all(8),
    color: const Color(0xFF1E1E1E),
  ),
  inputDecorationTheme: InputDecorationTheme(
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: Color(0xFF616161)),
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: Color(0xFF616161)),
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: primaryColor, width: 2),
    ),
    errorBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: errorColor),
    ),
    filled: true,
    fillColor: const Color(0xFF1E1E1E),
    contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
  ),
  buttonTheme: const ButtonThemeData(
    buttonColor: primaryColor,
    textTheme: ButtonTextTheme.primary,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.all(Radius.circular(12)),
    ),
  ),
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      backgroundColor: primaryColor,
      foregroundColor: onPrimaryColor,
      textStyle: buttonText,
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
    ),
  ),
  textButtonTheme: TextButtonThemeData(
    style: TextButton.styleFrom(
      foregroundColor: primaryColor,
      textStyle: buttonText.copyWith(color: primaryColor),
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
    ),
  ),
  outlinedButtonTheme: OutlinedButtonThemeData(
    style: OutlinedButton.styleFrom(
      foregroundColor: primaryColor,
      side: const BorderSide(color: primaryColor),
      textStyle: buttonText.copyWith(color: primaryColor),
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
    ),
  ),
  textTheme: TextTheme(
    displayLarge: headline1.copyWith(color: Color(0xFFFFFFFF)),
    displayMedium: headline2.copyWith(color: Color(0xFFFFFFFF)),
    displaySmall: headline3.copyWith(color: Color(0xFFFFFFFF)),
    titleMedium: subtitle1.copyWith(color: Color(0xFFFFFFFF)),
    bodyLarge: bodyText1.copyWith(color: Color(0xFFFFFFFF)),
    bodyMedium: bodyText2.copyWith(color: Color(0xFFFFFFFF)),
    labelSmall: caption.copyWith(color: Color(0xFFBDBDBD)),
  ),
  iconTheme: const IconThemeData(
    color: primaryColor,
    size: 24,
  ),
  dividerTheme: const DividerThemeData(
    color: Color(0xFF424242),
    thickness: 1,
    space: 1,
  ),
);
--- File: D:\Company_Data\PCMCApp\main_ui\lib\utils\validators.dart ---
// lib/utils/validators.dart
import 'package:flutter/material.dart';

String? validateRequired(String? value) {
  if (value == null || value.isEmpty) {
    return 'This field is required';
  }
  return null;
}

String? validateEmail(String? value) {
  if (value == null || !value.contains('@')) {
    return 'Invalid email';
  }
  return null;
}

=== Folder: widgets ===

--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\comment_tile.dart ---
// lib/widgets/comment_tile.dart
import 'package:flutter/material.dart';
import '../models/comment_model.dart';

class CommentTile extends StatelessWidget {
  final Comment comment;

  const CommentTile({super.key, required this.comment});

  @override
  Widget build(BuildContext context) {
    final created =
        comment.createdAt.toLocal().toString().split('.').first; // simple format
    return ListTile(
      leading: const Icon(Icons.comment, color: Colors.blue),
      title: Text(
        comment.commentText ?? "" , // <- from your model
        style: Theme.of(context).textTheme.bodyLarge,
      ),
      subtitle: Text(
        'User ${comment.userId} • $created',
        style: Theme.of(context).textTheme.bodySmall,
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\custom_button.dart ---
// lib/widgets/custom_button.dart
import 'package:flutter/material.dart';

class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final IconData? icon;
  final Color? backgroundColor;
  final Color? foregroundColor;
  final bool fullWidth;
  final bool isLoading; // <-- Add this line

  const CustomButton({
    super.key,
    required this.text,
    this.onPressed,
    this.icon,
    this.backgroundColor,
    this.foregroundColor,
    this.fullWidth = true,
    this.isLoading = false, // <-- Add this line
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return ElevatedButton(
      onPressed: isLoading ? null : onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: backgroundColor ?? theme.colorScheme.primary,
        foregroundColor: foregroundColor ?? theme.colorScheme.onPrimary,
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        minimumSize: fullWidth ? const Size(double.infinity, 0) : null,
      ),
      child: isLoading
          ? const CircularProgressIndicator()
          : Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (icon != null) ...[
                Icon(icon, size: 20),
                const SizedBox(width: 8),
              ],
              Text(
                text,
                style: const TextStyle(fontWeight: FontWeight.w600),
              ),
            ],
          ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\empty_state.dart ---
// lib/widgets/empty_state.dart
import 'package:flutter/material.dart';

class EmptyState extends StatefulWidget {
  final IconData icon;
  final String title;
  final String message;
  final Widget? actionButton;
  final Color? iconColor; // Optional icon color
  final TextStyle? titleStyle; // Optional title style
  final TextStyle? messageStyle; // Optional message style
  final Color? backgroundColor; // Optional background color

  const EmptyState({
    super.key,
    required this.icon,
    required this.title,
    required this.message,
    this.actionButton,
    this.iconColor,
    this.titleStyle,
    this.messageStyle,
    this.backgroundColor,
  });

  @override
  State<EmptyState> createState() => _EmptyStateState();
}

class _EmptyStateState extends State<EmptyState>
    with SingleTickerProviderStateMixin {
  late final AnimationController _controller;
  late final Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _fadeAnimation =
        CurvedAnimation(parent: _controller, curve: Curves.easeInOut);

    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final screenSize = MediaQuery.of(context).size;
    final isSmallScreen = screenSize.width < 600;

    return Semantics(
      label: 'Empty state: ${widget.title}',
      child: Container(
        color: widget.backgroundColor ?? theme.colorScheme.surface,
        padding: EdgeInsets.all(isSmallScreen ? 16.0 : 32.0),
        child: Center(
          child: FadeTransition(
            opacity: _fadeAnimation,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Icon(
                    widget.icon,
                    size: isSmallScreen ? 48 : 64,
                    color: widget.iconColor ??
                        theme.colorScheme.onSurface.withValues (alpha: 0.4),
                    semanticLabel: 'Empty state icon',
                  ),
                  const SizedBox(height: 16),
                  Text(
                    widget.title,
                    style: widget.titleStyle ??
                        theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: theme.colorScheme.onSurface,
                        ),
                    textAlign: TextAlign.center,
                    semanticsLabel: widget.title,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    widget.message,
                    style: widget.messageStyle ??
                        theme.textTheme.bodyLarge?.copyWith(
                              color: theme.colorScheme.onSurface
                                  .withValues (alpha: 0.7),
                              height: 1.5,
                            ),
                    textAlign: TextAlign.center,
                    semanticsLabel: widget.message,
                  ),
                  if (widget.actionButton != null) ...[
                    const SizedBox(height: 24),
                    widget.actionButton!,
                  ],
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\file_upload_widget.dart ---
// lib/widgets/file_upload_widget.dart
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:mime/mime.dart';

import 'dart:io' as io;
import '../services/file_service.dart';


class FileUploadWidget extends StatefulWidget {
  final Function(List<PlatformFile>) onFilesSelected; // Updated type
  const FileUploadWidget({super.key, required this.onFilesSelected});

  @override
  State<FileUploadWidget> createState() => _FileUploadWidgetState();
}

class _FileUploadWidgetState extends State<FileUploadWidget> {
  List<PlatformFile> files = []; // Updated type

  Future<void> _pickFiles() async {
    final newFiles = await FileService.pickFiles();
    if (files.length + newFiles.length > 10) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Max 10 files')));
    } else {
      setState(() => files.addAll(newFiles));
      widget.onFilesSelected(files);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        ElevatedButton(onPressed: _pickFiles, child: const Text('Upload Files')),
        ...files.map((file) {
          final mimeType = lookupMimeType(file.name); // Use name
          if (mimeType?.startsWith('image/') ?? false) {
            if (kIsWeb) {
              return Image.memory(file.bytes!, height: 100); // Web: Use bytes
            } else {
              return Image.file(io.File(file.path!), height: 100); // Non-web: Use path
            }
          } else {
            return const Icon(Icons.picture_as_pdf, size: 100);
          }
        }),
      ],
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\grievance_card.dart ---
import 'package:flutter/material.dart';
import '../models/grievance_model.dart';
import 'status_badge.dart';

class GrievanceCard extends StatelessWidget {
  final Grievance grievance;
  const GrievanceCard({super.key, required this.grievance,});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: () => Navigator.pushNamed(
          context,
          '/citizen/detail',
          arguments: grievance.id,
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      grievance.title ?? 'Untitled Grievance',
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Row(
                    children: [
                      StatusBadge(status: grievance.status ?? 'new'),
                      const SizedBox(width: 8),
                      Text(
                        grievance.priority ?? 'N/A',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withValues (alpha: 0.7),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                grievance.description ?? 'No description provided',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onSurface.withValues (alpha: 0.7),
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(
                    Icons.calendar_today_rounded,
                    size: 16,
                    color: theme.colorScheme.onSurface.withValues (alpha:0.5),
                  ),
                  const SizedBox(width: 4),
                  Text(
                    grievance.createdAt != null
                        ? _formatDate(grievance.createdAt!)
                        : 'Unknown date',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: theme.colorScheme.onSurface.withValues (alpha:0.5),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    if (difference.inDays > 1) {
      return 'Submitted ${difference.inDays} days ago';
    } else if (difference.inDays == 1) {
      return 'Submitted 1 day ago';
    } else if (difference.inHours > 1) {
      return 'Submitted ${difference.inHours} hours ago';
    } else if (difference.inMinutes > 1) {
      return 'Submitted ${difference.inMinutes} minutes ago';
    } else {
      return 'Submitted just now';
    }
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\loading_indicator.dart ---
import 'package:flutter/material.dart';

class LoadingIndicator extends StatelessWidget {
  const LoadingIndicator({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: CircularProgressIndicator(),
    );
  }
}

--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\navigation_drawer.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:main_ui/l10n/app_localizations.dart';
import 'package:main_ui/models/user_model.dart';
import 'package:main_ui/providers/auth_provider.dart';
import 'package:main_ui/providers/user_provider.dart';

class CustomNavigationDrawer extends ConsumerWidget {
  const CustomNavigationDrawer({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final localizations = AppLocalizations.of(context)!;
    final user = ref.watch(userNotifierProvider);
    final theme = Theme.of(context);

    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(color: theme.primaryColor),
            child: Text(
              '${localizations.appTitle} - ${user?.name ?? user?.email ?? localizations.guest}',
              style: theme.textTheme.titleLarge?.copyWith(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.home,
            title: localizations.appTitle ?? 'Home',
            onTap: () {
              Navigator.pop(context);
              final homeRoute = _getHomeRouteForRole(user?.role);
              if (homeRoute != null) {
                Navigator.pushNamed(context, homeRoute);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(localizations.invalidRole ?? 'Invalid Role')),
                );
              }
            },
          ),
          if (user?.role?.toUpperCase() == 'ADMIN') ...[
            _buildDrawerItem(
              context: context,
              icon: Icons.history,
              title: localizations.viewAuditLogs ?? 'View Audit Logs',
              route: '/admin/audit',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.report,
              title: localizations.complaintManagement ?? 'Complaint Management',
              route: '/admin/complaints',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.settings_applications,
              title: localizations.manageConfigs ?? 'Manage Configs',
              route: '/admin/configs',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.subject,
              title: localizations.manageSubjects ?? 'Manage Subjects',
              route: '/admin/subjects',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.people,
              title: localizations.manageUsers ?? 'Manage Users',
              route: '/admin/users',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.history_toggle_off,
              title: localizations.userHistory ?? 'User History',
              route: '/admin/all_users_history',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.location_on,
              title: localizations.manageAreas ?? 'Manage Areas',
              route: '/admin/areas',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.assessment,
              title: localizations.reports ?? 'Reports',
              route: '/admin/reports',
            ),
          ],
          if (user?.role?.toUpperCase() == 'MEMBER_HEAD') ...[
            _buildDrawerItem(
              context: context,
              icon: Icons.view_list,
              title: localizations.viewgrievanceetails ?? 'View Grievances',
              route: '/member_head/view',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.assignment,
              title: localizations.assignGrievance ?? 'Assign Grievance',
              route: '/member_head/assign',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.cancel,
              title: localizations.rejectGrievance ?? 'Reject Grievance',
              route: '/member_head/reject',
            ),
          ],
          if (user?.role?.toUpperCase() == 'FIELD_STAFF') ...[
            
            _buildDrawerItem(
              context: context,
              icon: Icons.update,
              title: localizations.updateStatus ?? 'Update Status',
              route: '/employer/update',
            ),
            _buildDrawerItem(
              context: context,
              icon: Icons.upload_file,
              title: localizations.uploadWorkproof ?? 'Upload Work Proof',
              route: '/employer/upload',
            ),
          ],
          _buildDrawerItem(
            context: context,
            icon: Icons.person,
            title: localizations.profile ?? 'Profile',
            route: '/profile',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.settings,
            title: localizations.settings ?? 'Settings',
            route: '/settings',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.announcement,
            title: localizations.announcements ?? 'Announcements',
            route: '/announcements',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.notifications,
            title: localizations.notifications ?? 'Notifications',
            route: '/notifications',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.privacy_tip,
            title: localizations.privacyPolicy ?? 'Privacy Policy',
            route: '/privacy-policy',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.help,
            title: localizations.faqs ?? 'FAQs',
            route: '/faqs',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.support,
            title: localizations.contactSupport ?? 'Contact Support',
            route: '/contact-support',
          ),
          _buildDrawerItem(
            context: context,
            icon: Icons.info,
            title: localizations.appVersion ?? 'App Version',
            route: '/app-version',
          ),
          const Divider(),
          _buildDrawerItem(
            context: context,
            icon: Icons.logout,
            title: localizations.logout ?? 'Logout',
            iconColor: Colors.red,
            onTap: () async {
              try {
                await ref.read(authProvider.notifier).logout();
                ref.read(userNotifierProvider.notifier).setUser(null);
                Navigator.pop(context);
                Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(localizations.logoutFailed ?? 'Logout Failed: $e')),
                );
              }
            },
          ),
        ],
      ),
    );
  }

  Widget _buildDrawerItem({
    required BuildContext context,
    required IconData icon,
    required String title,
    String? route,
    VoidCallback? onTap,
    Color? iconColor,
  }) {
    return ListTile(
      leading: Icon(icon, color: iconColor),
      title: Text(title),
      onTap: onTap ??
          () {
            if (route != null) {
              Navigator.pop(context);
              Navigator.pushNamed(context, route);
            }
          },
    );
  }

  String? _getHomeRouteForRole(String? role) {
    switch (role?.toUpperCase()) {
      case 'CITIZEN':
        return '/citizen/home';
      case 'MEMBER_HEAD':
        return '/member_head/home';
      case 'FIELD_STAFF':
        return '/field_staff/home';
      case 'ADMIN':
        return '/admin/home';
      default:
        return null;
    }
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\status_badge.dart ---
// main_ui/lib/widgets/status_badge.dart
import 'package:flutter/material.dart';

class StatusBadge extends StatelessWidget {
  final String status;
  const StatusBadge({super.key, required this.status});

  Color get color {
    switch (status) {
      case 'new':
        return Colors.blue;
      case 'in_progress':
        return Colors.orange;
      case 'resolved':
        return Colors.green;
      case 'rejected':
        return Colors.red;
      case 'on_hold':
        return Colors.yellow;
      case 'closed':
        return Colors.grey;
      default:
        return Colors.grey;
    }
  }

  String get displayText {
    switch (status) {
      case 'new':
        return 'New';
      case 'in_progress':
        return 'In Progress';
      case 'resolved':
        return 'Resolved';
      case 'rejected':
        return 'Rejected';
      case 'on_hold':
        return 'On Hold';
      case 'closed':
        return 'Closed';
      default:
        return 'Unknown';
    }
  }

  IconData get icon {
    switch (status) {
      case 'new':
        return Icons.fiber_new_rounded;
      case 'in_progress':
        return Icons.autorenew_rounded;
      case 'resolved':
        return Icons.check_circle_rounded;
      case 'rejected':
        return Icons.cancel_rounded;
      case 'on_hold':
        return Icons.pause_circle_rounded;
      case 'closed':
        return Icons.done_all_rounded;
      default:
        return Icons.info_rounded;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withValues (alpha:0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color.withValues (alpha:0.3), width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 14,
            color: color,
          ),
          const SizedBox(width: 4),
          Text(
            displayText,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w600,
              color: color,
            ),
          ),
        ],
      ),
    );
  }
}
--- File: D:\Company_Data\PCMCApp\main_ui\lib\widgets\track_grievance_progress.dart ---
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:main_ui/models/grievance_model.dart';
import 'package:main_ui/widgets/status_badge.dart';

class TrackGrievanceProgress extends StatelessWidget {
  final Grievance grievance;

  const TrackGrievanceProgress({super.key, required this.grievance});

  static const _stages = [
    {'status': 'new', 'label': 'Submitted', 'icon': Icons.send},
    {'status': 'in_progress', 'label': 'Reviewed by Member Head', 'icon': Icons.visibility},
    {'status': 'in_progress', 'label': 'Assigned to Field Staff', 'icon': Icons.assignment_ind},
    {'status': 'resolved', 'label': 'Resolved', 'icon': Icons.check_circle},
  ];

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final status = grievance.status?.toLowerCase() ?? 'new';

    final currentStageIndex = _getCurrentStageIndex(status, grievance);

    return Card(
      elevation: 2,
      shape: const RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(12))),
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Grievance Progress',
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: theme.colorScheme.primary,
                  ),
                ),
                StatusBadge(status: status),
              ],
            ),
            const SizedBox(height: 16),
            Column(
              children: List.generate(_stages.length, (index) {
                final stage = _stages[index];
                final isActive = index <= currentStageIndex;
                final isCompleted = index < currentStageIndex;

                return Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Column(
                      children: [
                        Semantics(
                          label: stage['label'] as String, // Provide accessibility label
                          child: Container(
                            width: 32,
                            height: 32,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: isActive
                                  ? theme.colorScheme.primary
                                  : theme.colorScheme.onSurface.withValues (alpha:0.2),
                            ),
                            child: Icon(
                              stage['icon'] as IconData,
                              size: 20,
                              color: isActive
                                  ? theme.colorScheme.onPrimary
                                  : theme.colorScheme.onSurface.withValues (alpha:0.4),
                            ),
                          ),
                        ),
                        if (index < _stages.length - 1)
                          Container(
                            width: 2,
                            height: 40,
                            color: isActive
                                ? theme.colorScheme.primary
                                : theme.colorScheme.onSurface.withValues (alpha:0.2),
                          ),
                      ],
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            stage['label'] as String,
                            style: theme.textTheme.bodyLarge?.copyWith(
                              fontWeight: isActive ? FontWeight.w600 : FontWeight.normal,
                              color: isActive
                                  ? theme.colorScheme.onSurface
                                  : theme.colorScheme.onSurface.withValues (alpha:0.5),
                            ),
                          ),
                          if (isActive)
                            Text(
                              _getStageDetails(index, status, grievance),
                              style: theme.textTheme.bodySmall?.copyWith(
                                color: theme.colorScheme.onSurface.withValues (alpha:0.7),
                              ),
                            ),
                          const SizedBox(height: 8),
                        ],
                      ),
                    ),
                  ],
                );
              }),
            ),
          ],
        ),
      ),
    );
  }

  int _getCurrentStageIndex(String status, Grievance grievance) {
    if (status == 'in_progress' && grievance.assignedTo != null) {
      return 2; // Assigned to Field Staff
    } else if (status == 'in_progress') {
      return 1; // Reviewed by Member Head
    } else if (status == 'resolved' || status == 'closed') {
      return 3; // Resolved
    }
    return 0; // Submitted
  }

  String _getStageDetails(int index, String status, Grievance grievance) {
    switch (index) {
      case 0:
        return 'Submitted on ${_formatDate(grievance.createdAt)}';
      case 1:
        return 'Reviewed by Member Head${grievance.assignedBy != null ? " (User ${grievance.assignedBy})" : ""}';
      case 2:
        return 'Assigned to${grievance.assignee?.name != null ? " ${grievance.assignee!.name}" : " Field Staff"}';
      case 3:
        return 'Resolved on ${_formatDate(grievance.resolvedAt)}';
      default:
        return '';
    }
  }

  String _formatDate(DateTime? date) {
    if (date == null) return 'N/A';
    return DateFormat('dd/MM/yyyy').format(date);
  }
}